name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Git tag to deploy'
        required: true
        type: string

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag }}
          fetch-depth: 0

      - name: Verify tag exists
        run: |
          if ! git tag -l | grep -q "^${{ github.event.inputs.tag }}$"; then
            echo "❌ Tag ${{ github.event.inputs.tag }} does not exist"
            exit 1
          fi
          echo "✅ Tag ${{ github.event.inputs.tag }} found"

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          ssh-passphrase: ${{ secrets.PROD_SSH_PRIVATE_KEY_PASSWORD }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ vars.PROD_SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to Production Server
        run: |
          echo "🚀 Deploying tag ${{ github.event.inputs.tag }} to production..."
          
          # Set variables
          USER="${{ vars.PROD_SERVER_USER }}"
          REMOTE="${{ vars.PROD_SERVER_HOST }}"
          BASE_NAME="backend-gneuro"
          AREA="prod"
          DESTINATION_PATH="/home/${USER}/${AREA}_${BASE_NAME}/"
          DOCKER_COMPOSE_FILE="docker-compose-prod.yaml"
          AREA_ENV_FILE=".env-${AREA}"
          
          echo "� Destination: ${USER}@${REMOTE}:${DESTINATION_PATH}"
          
          # Check if .env file exists
          if [ ! -f "$AREA_ENV_FILE" ]; then
            echo "❌ Error: $AREA_ENV_FILE file not found."
            exit 1
          fi
          
          # Create destination directory
          ssh -o StrictHostKeyChecking=no ${USER}@${REMOTE} "mkdir -p ${DESTINATION_PATH}"
          
          # Sync .env file
          echo "� Syncing environment file..."
          rsync -avz -e 'ssh -o StrictHostKeyChecking=no' ${AREA_ENV_FILE} ${USER}@${REMOTE}:${DESTINATION_PATH}/.env
          
          # Sync project files
          echo "� Syncing project files..."
          rsync -avz -e 'ssh -o StrictHostKeyChecking=no' docker* src services *.json ${USER}@${REMOTE}:${DESTINATION_PATH}/
          
          # Deploy with docker-compose
          echo "� Starting docker-compose..."
          ssh -o StrictHostKeyChecking=no ${USER}@${REMOTE} "cd ${DESTINATION_PATH} && docker compose -f ${DOCKER_COMPOSE_FILE} up -d --build"
          
          # Set permissions
          echo "🔐 Setting permissions..."
          ssh -o StrictHostKeyChecking=no ${USER}@${REMOTE} "sudo chmod 755 /home /home/${USER} /home/${USER}/${AREA}_${BASE_NAME}"
          
          echo "✅ Production deployment completed successfully!"

      - name: Deployment Summary
        run: |
          echo "## 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** ${{ github.event.inputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Server:** ${{ vars.PROD_SERVER_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- **User:** ${{ vars.PROD_SERVER_USER }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ✅ Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "## ❌ Production Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** ${{ github.event.inputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Server:** ${{ vars.PROD_SERVER_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
