import { QueueJob } from '../models/index';
import { QUEUE_CONFIG, JOB_TYPES, JOB_STATUS } from '../config/queue';
import { Op } from 'sequelize';

export interface JobPayload {
  userId: number;
  telegramId: number;
  photoId?: number;
  apiRequestId?: number;
  [key: string]: any;
}

export interface CreateJobOptions {
  jobType: string;
  payload: JobPayload;
  maxRetries?: number;
}

export class QueueService {
  private static processingJobs = new Set<number>();
  private static isProcessorRunning = false;

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
   */
  static async addJob(options: CreateJobOptions): Promise<QueueJob> {
    const job = await QueueJob.create({
      job_type: options.jobType,
      payload: JSON.stringify(options.payload),
      max_retries: options.maxRetries || QUEUE_CONFIG.MAX_RETRIES,
      status: JOB_STATUS.PENDING
    });

    console.log(`üìã [QUEUE] –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ #${job.id} —Ç–∏–ø–∞ ${options.jobType}`);
    return job;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  static async getNextJob(): Promise<QueueJob | null> {
    const now = new Date();
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º pending –∑–∞–¥–∞—á–∏
    let job = await QueueJob.findOne({
      where: {
        status: JOB_STATUS.PENDING,
        id: {
          [Op.notIn]: Array.from(this.processingJobs)
        }
      },
      order: [['created_at', 'ASC']]
    });

    // –ï—Å–ª–∏ pending –∑–∞–¥–∞—á –Ω–µ—Ç, –∏—â–µ–º retrying –∑–∞–¥–∞—á–∏, –≥–æ—Ç–æ–≤—ã–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
    if (!job) {
      job = await QueueJob.findOne({
        where: {
          status: JOB_STATUS.RETRYING,
          next_retry_at: {
            [Op.lte]: now
          },
          id: {
            [Op.notIn]: Array.from(this.processingJobs)
          }
        },
        order: [['next_retry_at', 'ASC']]
      });
    }

    return job;
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω—è–µ–º—É—é
   */
  static async markJobAsProcessing(jobId: number): Promise<void> {
    this.processingJobs.add(jobId);
    
    await QueueJob.update({
      status: JOB_STATUS.PROCESSING,
      started_at: new Date()
    }, {
      where: { id: jobId }
    });

    console.log(`üîÑ [QUEUE] –ó–∞–¥–∞—á–∞ #${jobId} –Ω–∞—á–∞—Ç–∞`);
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
   */
  static async markJobAsCompleted(jobId: number, result?: any): Promise<void> {
    this.processingJobs.delete(jobId);
    
    await QueueJob.update({
      status: JOB_STATUS.COMPLETED,
      completed_at: new Date(),
      error_message: undefined
    }, {
      where: { id: jobId }
    });

    console.log(`‚úÖ [QUEUE] –ó–∞–¥–∞—á–∞ #${jobId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—É—é –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä
   */
  static async markJobAsFailed(jobId: number, error: string): Promise<void> {
    this.processingJobs.delete(jobId);
    
    const job = await QueueJob.findByPk(jobId);
    if (!job) {
      console.error(`‚ùå [QUEUE] –ó–∞–¥–∞—á–∞ #${jobId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return;
    }

    const newRetryCount = job.retry_count + 1;
    
    if (newRetryCount >= job.max_retries) {
      // –ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏
      await job.update({
        status: JOB_STATUS.FAILED,
        retry_count: newRetryCount,
        error_message: error,
        completed_at: new Date()
      });
      
      console.log(`‚ùå [QUEUE] –ó–∞–¥–∞—á–∞ #${jobId} –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ ${newRetryCount} –ø–æ–ø—ã—Ç–æ–∫: ${error}`);
    } else {
      // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä
      const retryDelay = QUEUE_CONFIG.RETRY_DELAYS[newRetryCount - 1] || QUEUE_CONFIG.RETRY_DELAYS[QUEUE_CONFIG.RETRY_DELAYS.length - 1];
      const nextRetryAt = new Date(Date.now() + retryDelay);
      
      await job.update({
        status: JOB_STATUS.RETRYING,
        retry_count: newRetryCount,
        error_message: error,
        next_retry_at: nextRetryAt
      });
      
      console.log(`üîÑ [QUEUE] –ó–∞–¥–∞—á–∞ #${jobId} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä #${newRetryCount} —á–µ—Ä–µ–∑ ${retryDelay}ms: ${error}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
   */
  static async getJobStatus(jobId: number): Promise<QueueJob | null> {
    return await QueueJob.findByPk(jobId);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserJobs(userId: number, limit: number = 10): Promise<QueueJob[]> {
    return await QueueJob.findAll({
      where: {
        payload: {
          [Op.like]: `%"userId":${userId}%`
        }
      },
      order: [['created_at', 'DESC']],
      limit
    });
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
   */
  static async cleanupCompletedJobs(): Promise<void> {
    const cutoffDate = new Date(Date.now() - QUEUE_CONFIG.COMPLETED_JOB_TTL);
    
    const deletedCount = await QueueJob.destroy({
      where: {
        status: {
          [Op.in]: [JOB_STATUS.COMPLETED, JOB_STATUS.FAILED]
        },
        completed_at: {
          [Op.lt]: cutoffDate
        }
      }
    });

    if (deletedCount > 0) {
      console.log(`üßπ [QUEUE] –£–¥–∞–ª–µ–Ω–æ ${deletedCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á`);
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–µ–π
   */
  static startProcessor(): void {
    if (this.isProcessorRunning) {
      console.log('‚ö†Ô∏è [QUEUE] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–µ–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    this.isProcessorRunning = true;
    console.log('üöÄ [QUEUE] –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π...');

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const processLoop = async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        if (this.processingJobs.size >= QUEUE_CONFIG.CONCURRENT_JOBS) {
          return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
        const job = await this.getNextJob();
        if (!job) {
          return;
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        this.executeJob(job).catch(error => {
          console.error(`‚ùå [QUEUE] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ #${job.id}:`, error);
          this.markJobAsFailed(job.id, error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        });

      } catch (error) {
        console.error('‚ùå [QUEUE] –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    const interval = setInterval(processLoop, QUEUE_CONFIG.QUEUE_CHECK_INTERVAL);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –∫–∞–∂–¥—ã–π —á–∞—Å
    const cleanupInterval = setInterval(() => {
      this.cleanupCompletedJobs().catch(error => {
        console.error('‚ùå [QUEUE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á:', error);
      });
    }, 3600000); // 1 —á–∞—Å

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const shutdown = () => {
      console.log('üõë [QUEUE] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π...');
      clearInterval(interval);
      clearInterval(cleanupInterval);
      this.isProcessorRunning = false;
    };

    process.on('SIGINT', shutdown);
    process.on('SIGTERM', shutdown);
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É
   */
  private static async executeJob(job: QueueJob): Promise<void> {
    await this.markJobAsProcessing(job.id);
    
    try {
      const payload: JobPayload = JSON.parse(job.payload);
      console.log(`‚ö° [QUEUE] –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É #${job.id} —Ç–∏–ø–∞ ${job.job_type}`);

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      const { JobProcessor } = await import('./JobProcessor');
      
      const result = await JobProcessor.processJob(job.job_type, payload);
      await this.markJobAsCompleted(job.id, result);
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      console.error(`‚ùå [QUEUE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ #${job.id}:`, error);
      await this.markJobAsFailed(job.id, errorMessage);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏
   */
  static async getQueueStats(): Promise<any> {
    const stats = await QueueJob.findAll({
      attributes: [
        'status',
        [QueueJob.sequelize!.fn('COUNT', '*'), 'count']
      ],
      group: 'status',
      raw: true
    });

    const result = {
      pending: 0,
      processing: 0,
      completed: 0,
      failed: 0,
      retrying: 0,
      activeJobs: this.processingJobs.size
    };

    stats.forEach((stat: any) => {
      result[stat.status as keyof typeof result] = parseInt(stat.count);
    });

    return result;
  }
}
