import axios from 'axios';
import { v4 as uuidv4 } from 'uuid';

export interface ImageUpscaleRequest {
  image: string; // base64 encoded image or URL
  scale_factor: number; // 2, 4, etc.
  original_width: number;
  original_height: number;
}

export interface ImageUpscaleResponse {
  task_id: string;
  status: 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'FAILED';
  image_url?: string;
  error?: string;
}

export interface ImageUpscaleStatus {
  task_id: string;
  status: 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'FAILED';
  generated?: string[];
  error?: string;
}

export class ImageUpscaleService {
  private apiKey: string;
  private apiUrl: string;
  private requests: Map<string, any> = new Map();

  constructor() {
    this.apiKey = process.env.FREEPIK_API_KEY || '';
    this.apiUrl = process.env.FREEPIK_API_URL || 'https://api.freepik.com/v1/ai/upscaler';
    
    if (!this.apiKey) {
      console.warn('‚ö†Ô∏è FREEPIK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    if (!this.apiUrl) {
      console.warn('‚ö†Ô∏è FREEPIK_API_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async upscaleImage(request: ImageUpscaleRequest): Promise<ImageUpscaleResponse> {
    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', {
        scale_factor: request.scale_factor,
        original_width: request.original_width,
        original_height: request.original_height
      });

      const response = await axios.post<any>(this.apiUrl, {
        image: request.image,
        scale_factor: request.scale_factor
      }, {
        headers: {
          'Content-Type': 'application/json',
          'x-freepik-api-key': this.apiKey
        }
      });

      if (response.status === 200 && response.data?.data?.task_id) {
        const taskId = response.data.data.task_id;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        this.requests.set(taskId, {
          ...request,
          created_at: new Date(),
          status: 'PENDING'
        });

        console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, task_id:', taskId);
        
        return {
          task_id: taskId,
          status: 'PENDING'
        };
      } else {
        throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API');
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error.response?.data || error.message);
      
      return {
        task_id: '',
        status: 'FAILED',
        error: error.response?.data?.message || error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è
   */
  async checkUpscaleStatus(taskId: string): Promise<ImageUpscaleStatus> {
    try {
      console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:', taskId);

      const response = await axios.get<any>(`${this.apiUrl}/${taskId}`, {
        headers: {
          'Content-Type': 'application/json',
          'x-freepik-api-key': this.apiKey
        }
      });

      if (response.status === 200) {
        const data = response.data.data;
        const status = data.status;
        
        console.log('üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:', status);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        if (this.requests.has(taskId)) {
          const requestInfo = this.requests.get(taskId);
          this.requests.set(taskId, {
            ...requestInfo,
            status: status,
            updated_at: new Date()
          });
        }

        return {
          task_id: taskId,
          status: status,
          generated: status === 'COMPLETED' ? data.generated : undefined,
          error: status === 'FAILED' ? data.error : undefined
        };
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏');
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error.response?.data || error.message);
      
      return {
        task_id: taskId,
        status: 'FAILED',
        error: error.response?.data?.message || error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å'
      };
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ URL
   */
  async downloadImage(url: string): Promise<Buffer | null> {
    try {
      console.log('‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL:', url);
      
      const response = await axios.get(url, {
        responseType: 'arraybuffer',
        timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥
      });

      if (response.status === 200) {
        console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        return Buffer.from(response.data as ArrayBuffer);
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error.message);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–µ
   */
  getRequestInfo(taskId: string) {
    return this.requests.get(taskId) || null;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
   */
  cleanupOldRequests(maxAgeMinutes: number = 60) {
    const now = new Date();
    const cutoff = new Date(now.getTime() - maxAgeMinutes * 60 * 1000);
    
    for (const [taskId, request] of this.requests.entries()) {
      if (request.created_at < cutoff) {
        this.requests.delete(taskId);
        console.log('üßπ –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∑–∞–ø—Ä–æ—Å:', taskId);
      }
    }
  }
}

// Singleton instance
export const imageUpscaleService = new ImageUpscaleService();
