import { ApiRequest, User, Photo } from '../models/index';
import { PhotoStylizationService } from './PhotoStylizationService';
import { EraStyleService } from './EraStyleService';
import { PoetStyleService } from './PoetStyleService';
import { PhotoRestorationService } from './PhotoRestorationService';
import { ImageGenerationService } from './ImageGenerationService';
import { TelegramBotService } from './TelegramBotService';
import { BalanceService } from './BalanceService';
import { ErrorMessageTranslator } from '../utils/ErrorMessageTranslator';

export interface BackgroundTaskResult {
  success: boolean;
  error?: string;
  resultUrl?: string;
}

export class BackgroundTaskProcessor {
  private static readonly PROCESSING_INTERVAL = parseInt(process.env.BACKGROUND_PROCESSING_INTERVAL || '30000'); // 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  private static readonly MAX_CONCURRENT_TASKS = parseInt(process.env.MAX_CONCURRENT_BACKGROUND_TASKS || '3'); // –ú–∞–∫—Å–∏–º—É–º 3 –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
  private static readonly MAX_RETRY_AGE = parseInt(process.env.MAX_BACKGROUND_RETRY_AGE || '86400000'); // 24 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  private static readonly MAX_RETRY_ATTEMPTS = 3; // –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
  private static isProcessing = false;
  private static processingCount = 0;

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–¥–∞—á
   */
  static start(): void {
    console.log('üöÄ [BACKGROUND] –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∑–∞–¥–∞—á');
    console.log(`‚è∞ [BACKGROUND] –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${this.PROCESSING_INTERVAL}–º—Å`);
    console.log(`üî¢ [BACKGROUND] –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${this.MAX_CONCURRENT_TASKS}`);
    console.log(`‚è≥ [BACKGROUND] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∑–∞–¥–∞—á –¥–ª—è retry: ${this.MAX_RETRY_AGE}–º—Å`);

    setInterval(async () => {
      if (!this.isProcessing && this.processingCount < this.MAX_CONCURRENT_TASKS) {
        await this.processPendingTasks();
      }
    }, this.PROCESSING_INTERVAL);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ pending_background_retry
   */
  private static async processPendingTasks(): Promise<void> {
    try {
      this.isProcessing = true;
      console.log('üîç [BACKGROUND] –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...');

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ pending_background_retry –ò failed (–¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫)
      const pendingTasks = await ApiRequest.findAll({
        where: {
          status: {
            [require('sequelize').Op.in]: ['pending_background_retry', 'failed']
          },
          request_date: {
            [require('sequelize').Op.gte]: new Date(Date.now() - this.MAX_RETRY_AGE) // –¢–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –∑–∞–¥–∞—á–∏
          },
          retry_count: {
            [require('sequelize').Op.lt]: this.MAX_RETRY_ATTEMPTS // –ù–µ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
          },
          // –î–ª—è failed –∑–∞–¥–∞—á –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 10 –º–∏–Ω—É—Ç)
          [require('sequelize').Op.or]: [
            { status: 'pending_background_retry' },
            {
              status: 'failed',
              updatedAt: {
                [require('sequelize').Op.lt]: new Date(Date.now() - 10 * 60 * 1000) // 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
              }
            }
          ]
        },
        include: [{
          model: User,
          as: 'user',
          attributes: ['id', 'telegram_id', 'username', 'first_name', 'last_name']
        }],
        order: [['request_date', 'ASC']], // –°—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏
        limit: this.MAX_CONCURRENT_TASKS - this.processingCount
      });

      if (pendingTasks.length === 0) {
        console.log('‚úÖ [BACKGROUND] –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        return;
      }

      console.log(`üìã [BACKGROUND] –ù–∞–π–¥–µ–Ω–æ ${pendingTasks.length} –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const processingPromises = pendingTasks.map(task => this.processTask(task));
      await Promise.allSettled(processingPromises);

    } catch (error) {
      console.error('‚ùå [BACKGROUND] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á:', error);
    } finally {
      this.isProcessing = false;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É
   */
  private static async processTask(apiRequest: ApiRequest): Promise<void> {
    this.processingCount++;
    const taskId = apiRequest.id;
    const requestType = apiRequest.request_type;
    const currentRetryCount = apiRequest.retry_count || 0;

    try {
      console.log(`üîÑ [BACKGROUND] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ ${taskId} —Ç–∏–ø–∞ ${requestType} (–ø–æ–ø—ã—Ç–∫–∞ ${currentRetryCount + 1}/${this.MAX_RETRY_ATTEMPTS})`);

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
      await apiRequest.update({ 
        status: 'processing',
        retry_count: currentRetryCount + 1
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      const result = await this.executeTask(apiRequest);

      if (result.success) {
        // –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        await apiRequest.update({
          status: 'completed',
          response_data: JSON.stringify({
            resultUrl: result.resultUrl,
            processedAt: new Date().toISOString(),
            processedBy: 'background_processor'
          }),
          completed_date: new Date(),
          error_message: undefined
        });

        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á, –Ω–µ –¥–ª—è failed)
        if (apiRequest.status !== 'failed') {
          await this.deductBalance(apiRequest);
        } else {
          console.log(`üí∞ [BACKGROUND] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è failed –∑–∞–¥–∞—á–∏ ${taskId} (—É–∂–µ —Å–ø–∏—Å–∞–Ω–æ —Ä–∞–Ω–µ–µ)`);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¢–û–õ–¨–ö–û –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        await this.sendSuccessNotification(apiRequest, result.resultUrl!);

        console.log(`‚úÖ [BACKGROUND] –ó–∞–¥–∞—á–∞ ${taskId} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);

      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const isSafetyBlock = result.error === 'CONTENT_SAFETY_VIOLATION' || 
                             result.error === 'COPYRIGHT_VIOLATION' || 
                             result.error === 'SAFETY_AGREEMENT_REQUIRED';

        if (isSafetyBlock) {
          // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const friendlyErrorMessage = ErrorMessageTranslator.getFriendlyErrorMessage(result.error!);
          
          await apiRequest.update({
            status: 'completed',
            error_message: friendlyErrorMessage,
            completed_date: new Date(),
            response_data: JSON.stringify({
              blocked: true,
              reason: result.error,
              processedAt: new Date().toISOString(),
              processedBy: 'background_processor'
            })
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
          if (apiRequest.photo_id) {
            await Photo.update(
              { 
                status: 'completed',
                error_message: friendlyErrorMessage
              },
              { where: { id: apiRequest.photo_id } }
            );
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
          await this.sendSafetyBlockNotification(apiRequest, result.error!);

          console.log(`üö´ [BACKGROUND] –ó–∞–¥–∞—á–∞ ${taskId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${result.error}`);

        } else if (currentRetryCount + 1 >= this.MAX_RETRY_ATTEMPTS) {
          // –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
          const friendlyErrorMessage = ErrorMessageTranslator.getFriendlyErrorMessage(
            result.error || '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫'
          );
          
          await apiRequest.update({
            status: 'failed',
            error_message: friendlyErrorMessage,
            completed_date: new Date()
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
          if (apiRequest.photo_id) {
            await Photo.update(
              { 
                status: 'failed',
                error_message: friendlyErrorMessage
              },
              { where: { id: apiRequest.photo_id } }
            );
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          await this.sendErrorNotification(apiRequest, friendlyErrorMessage);

          console.log(`‚ùå [BACKGROUND] –ó–∞–¥–∞—á–∞ ${taskId} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π –ø–æ—Å–ª–µ ${this.MAX_RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫: ${result.error}`);

        } else {
          // –û–±—ã—á–Ω–∞—è –æ—à–∏–±–∫–∞ - –ø–æ–º–µ—á–∞–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
          const friendlyErrorMessage = ErrorMessageTranslator.getFriendlyErrorMessage(
            result.error || '–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏'
          );
          
          await apiRequest.update({
            status: 'pending_background_retry',
            error_message: friendlyErrorMessage
          });

          console.log(`üîÑ [BACKGROUND] –ó–∞–¥–∞—á–∞ ${taskId} –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: ${result.error}`);
        }
      }

    } catch (error) {
      console.error(`üí• [BACKGROUND] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ ${taskId}:`, error);

      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      const friendlyErrorMessage = ErrorMessageTranslator.getFriendlyErrorMessage(errorMessage);

      if (currentRetryCount + 1 >= this.MAX_RETRY_ATTEMPTS) {
        // –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        await apiRequest.update({
          status: 'failed',
          error_message: friendlyErrorMessage,
          completed_date: new Date()
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (apiRequest.photo_id) {
          await Photo.update(
            { 
              status: 'failed',
              error_message: friendlyErrorMessage
            },
            { where: { id: apiRequest.photo_id } }
          );
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await this.sendErrorNotification(apiRequest, friendlyErrorMessage);
      } else {
        // –ü–æ–º–µ—á–∞–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        await apiRequest.update({
          status: 'pending_background_retry',
          error_message: friendlyErrorMessage
        });
      }
    } finally {
      this.processingCount--;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
   */
  private static async executeTask(apiRequest: ApiRequest): Promise<BackgroundTaskResult> {
    const requestData = apiRequest.request_data ? JSON.parse(apiRequest.request_data) : {};
    const requestType = apiRequest.request_type;

    try {
      switch (requestType) {
        case 'photo_stylize':
          return await this.processPhotoStylization(apiRequest, requestData);

        case 'era_style':
          return await this.processEraStyle(apiRequest, requestData);

        case 'poet_style':
          return await this.processPoetStyle(apiRequest, requestData);

        case 'photo_restore':
          return await this.processPhotoRestoration(apiRequest, requestData);

        case 'image_generate':
          return await this.processImageGeneration(apiRequest, requestData);

        default:
          return {
            success: false,
            error: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: ${requestType}`
          };
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é —Ñ–æ—Ç–æ
   */
  private static async processPhotoStylization(apiRequest: ApiRequest, requestData: any): Promise<BackgroundTaskResult> {
    try {
      const result = await PhotoStylizationService.stylizePhoto({
        userId: apiRequest.user_id,
        telegramId: (apiRequest as any).user?.telegram_id || 0,
        imageUrl: requestData.imageUrl,
        localPath: requestData.localPath,
        styleId: requestData.styleId,
        prompt: apiRequest.prompt || '',
        originalFilename: requestData.originalFilename,
        adminRetry: apiRequest.status === 'failed' // –î–ª—è failed –∑–∞–¥–∞—á –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ
      });

      return {
        success: result.success,
        resultUrl: result.styledUrl,
        error: result.error
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∏–ª—å —ç–ø–æ—Ö–∏
   */
  private static async processEraStyle(apiRequest: ApiRequest, requestData: any): Promise<BackgroundTaskResult> {
    try {
      const result = await EraStyleService.stylePhotoByEra({
        userId: apiRequest.user_id,
        telegramId: (apiRequest as any).user?.telegram_id || 0,
        imageUrl: requestData.imageUrl,
        eraId: requestData.eraId,
        prompt: apiRequest.prompt || requestData.prompt || '',
        originalFilename: requestData.originalFilename,
        adminRetry: false, // –í —Ñ–æ–Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        existingApiRequestId: apiRequest.id // –ü–µ—Ä–µ–¥–∞–µ–º ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      });

      return {
        success: result.success,
        resultUrl: result.styledUrl,
        error: result.error
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∏–ª—å —Å –ø–æ—ç—Ç–æ–º
   */
  private static async processPoetStyle(apiRequest: ApiRequest, requestData: any): Promise<BackgroundTaskResult> {
    try {
      const result = await PoetStyleService.stylePhotoWithPoet({
        userId: apiRequest.user_id,
        telegramId: (apiRequest as any).user?.telegram_id || 0,
        imageUrl: requestData.imageUrl,
        localPath: requestData.localPath || requestData.imageUrl,
        poetId: requestData.poetId,
        prompt: apiRequest.prompt || requestData.prompt || '',
        originalFilename: requestData.originalFilename,
        adminRetry: false // –í —Ñ–æ–Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
      });

      return {
        success: result.success,
        resultUrl: result.processed_image_url,
        error: result.error
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ
   */
  private static async processPhotoRestoration(apiRequest: ApiRequest, requestData: any): Promise<BackgroundTaskResult> {
    try {
      const result = await PhotoRestorationService.restorePhoto({
        userId: apiRequest.user_id,
        telegramId: (apiRequest as any).user?.telegram_id || 0,
        imageUrl: requestData.imageUrl,
        moduleName: requestData.moduleName || 'photo_restore',
        options: requestData.options,
        adminRetry: false // –í —Ñ–æ–Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
      });

      return {
        success: result.success,
        resultUrl: result.restoredUrl,
        error: result.error
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private static async processImageGeneration(apiRequest: ApiRequest, requestData: any): Promise<BackgroundTaskResult> {
    try {
      const result = await ImageGenerationService.generateImage({
        userId: apiRequest.user_id,
        telegramId: (apiRequest as any).user?.telegram_id || 0,
        prompt: apiRequest.prompt || '',
        moduleName: requestData.moduleName || 'image_generation',
        options: requestData.options || {},
        adminRetry: false // –í —Ñ–æ–Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
      });

      return {
        success: result.success,
        resultUrl: result.processed_image_url,
        error: result.error
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * –°–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
   */
  private static async deductBalance(apiRequest: ApiRequest): Promise<void> {
    try {
      await BalanceService.debitBalance({
        userId: apiRequest.user_id,
        amount: apiRequest.cost,
        type: 'debit',
        description: `–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${apiRequest.request_type}`,
        referenceId: apiRequest.id.toString()
      });
      console.log(`üí∏ [BACKGROUND] –°–ø–∏—Å–∞–Ω–æ ${apiRequest.cost}‚ÇΩ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${apiRequest.user_id}`);
    } catch (error) {
      console.error('‚ùå [BACKGROUND] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
   */
  private static async sendSuccessNotification(apiRequest: ApiRequest, resultUrl: string): Promise<void> {
    try {
      const user = (apiRequest as any).user;
      if (user?.telegram_id) {
        await TelegramBotService.sendTaskCompletionNotification(
          user.telegram_id,
          apiRequest.request_type,
          resultUrl,
          true
        );
        console.log(`üì§ [BACKGROUND] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}`);
      }
    } catch (error) {
      console.error('‚ùå [BACKGROUND] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  private static async sendErrorNotification(apiRequest: ApiRequest, errorMessage: string): Promise<void> {
    try {
      const user = (apiRequest as any).user;
      if (user?.telegram_id) {
        await TelegramBotService.sendTaskCompletionNotification(
          user.telegram_id,
          apiRequest.request_type,
          undefined,
          false,
          errorMessage
        );
        console.log(`üì§ [BACKGROUND] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}`);
      }
    } catch (error) {
      console.error('‚ùå [BACKGROUND] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  private static async sendSafetyBlockNotification(apiRequest: ApiRequest, blockReason: string): Promise<void> {
    try {
      const user = (apiRequest as any).user;
      if (user?.telegram_id) {
        let message = '';
        
        switch (blockReason) {
          case 'CONTENT_SAFETY_VIOLATION':
            message = 'üö´ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.';
            break;
          case 'COPYRIGHT_VIOLATION':
            message = 'üö´ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑-–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.';
            break;
          case 'SAFETY_AGREEMENT_REQUIRED':
            message = 'üö´ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ.';
            break;
          default:
            message = 'üö´ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.';
        }

        await TelegramBotService.sendTaskCompletionNotification(
          user.telegram_id,
          apiRequest.request_type,
          undefined,
          false,
          message
        );
        console.log(`üì§ [BACKGROUND] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}`);
      }
    } catch (error) {
      console.error('‚ùå [BACKGROUND] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
   */
  static getStats(): {
    isProcessing: boolean;
    processingCount: number;
    maxConcurrentTasks: number;
    processingInterval: number;
  } {
    return {
      isProcessing: this.isProcessing,
      processingCount: this.processingCount,
      maxConcurrentTasks: this.MAX_CONCURRENT_TASKS,
      processingInterval: this.PROCESSING_INTERVAL
    };
  }
}
