import axios from 'axios';
import sharp from 'sharp';
import fs from 'fs';
import path from 'path';
import { GoogleGenAI } from '@google/genai';
import { Photo, ApiRequest, User } from '../models/index';
import { BalanceService } from './BalanceService';
import { PriceService } from './PriceService';
import { FileManagerService } from './FileManagerService';
import { PromptService } from './PromptService';

export interface EraStyleRequest {
  userId: number;
  telegramId: number;
  imageUrl: string;
  eraId: string;
  prompt: string;
  originalFilename: string;
}

export interface EraStyleResult {
  success: boolean;
  styledUrl?: string;
  cost?: number;
  eraId?: string;
  originalFilename?: string;
  error?: string;
}

export class EraStyleService {
  private static readonly GEMINI_API_KEY = process.env.GEMINI_API_KEY || 'test_key';
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è retry –º–µ—Ö–∞–Ω–∏–∑–º–∞
  private static readonly MAX_RETRY_DURATION = parseInt(process.env.GEMINI_MAX_RETRY_DURATION || '300000'); // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  private static readonly INITIAL_RETRY_DELAY = parseInt(process.env.GEMINI_INITIAL_RETRY_DELAY || '1000'); // 1 —Å–µ–∫—É–Ω–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  private static readonly MAX_RETRY_DELAY = parseInt(process.env.GEMINI_MAX_RETRY_DELAY || '30000'); // 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  private static readonly BACKOFF_MULTIPLIER = parseFloat(process.env.GEMINI_BACKOFF_MULTIPLIER || '2'); // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è —ç–ø–æ—Ö–∏
   */
  static async getEraStyleCost(): Promise<number> {
    return await PriceService.getServicePrice('era_style');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —ç–ø–æ—Ö–∏
   */
  static async getEraPrompt(eraId: string): Promise<string> {
    try {
      // –ï—Å–ª–∏ eraId —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ—Ñ–∏–∫—Å era_style_, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
      const promptKey = eraId.startsWith('era_style_') ? eraId : `era_style_${eraId}`;
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –±–∞–∑—ã
      const prompt = await PromptService.getPrompt(promptKey);
      return prompt;
    } catch (error) {
      console.error(`‚ùå [ERA_STYLE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —ç–ø–æ—Ö–∏ "${eraId}":`, error);
      
      // –†–µ–∑–µ—Ä–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ID)
      const fallbackPrompts: Record<string, string> = {
        'era_style_russia_early_20th': 'Redesign the uploaded image in the style of early 20th-century Russia: Art Nouveau influences, ornate wooden furniture, samovar on table, lace curtains, soft gas lamp lighting, imperial colors like deep red and gold, realistic historical accuracy, preserve original layout and main elements.',
        'era_style_russia_19th': 'Transform the uploaded photo to 19th-century Russian style: neoclassical architecture for rooms, elaborate ball gowns or military uniforms, candlelit ambiance, heavy velvet drapes, earthy tones with accents of emerald, detailed textures like brocade, keep the core subject intact in a romantic era setting.',
        'era_style_soviet_union': 'Edit the uploaded image into Soviet Union era style (1950s-1980s): functional communist design, wooden bookshelves with propaganda posters, simple upholstered furniture, warm bulb lighting, muted colors like beige and gray with red accents, realistic socialist realism vibe, maintain original composition.',
        'era_style_90s': 'Style the uploaded photo as 1990s aesthetic: grunge or minimalist vibe, bulky furniture like IKEA-inspired, neon posters or MTV influences, baggy clothes with plaid patterns, fluorescent lighting, vibrant yet faded colors like acid wash denim, high detail on retro textures, preserve the subject\'s pose and key features.',
        'russia_early_20': 'Redesign the uploaded image in the style of early 20th-century Russia: Art Nouveau influences, ornate wooden furniture, samovar on table, lace curtains, soft gas lamp lighting, imperial colors like deep red and gold, realistic historical accuracy, preserve original layout and main elements.',
        'russia_19': 'Transform the uploaded photo to 19th-century Russian style: neoclassical architecture for rooms, elaborate ball gowns or military uniforms, candlelit ambiance, heavy velvet drapes, earthy tones with accents of emerald, detailed textures like brocade, keep the core subject intact in a romantic era setting.',
        'soviet': 'Edit the uploaded image into Soviet Union era style (1950s-1980s): functional communist design, wooden bookshelves with propaganda posters, simple upholstered furniture, warm bulb lighting, muted colors like beige and gray with red accents, realistic socialist realism vibe, maintain original composition.',
        'nineties': 'Style the uploaded photo as 1990s aesthetic: grunge or minimalist vibe, bulky furniture like IKEA-inspired, neon posters or MTV influences, baggy clothes with plaid patterns, fluorescent lighting, vibrant yet faded colors like acid wash denim, high detail on retro textures, preserve the subject\'s pose and key features.'
      };
      
      return fallbackPrompts[eraId] || '';
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —ç–ø–æ—Ö—É
   */
  static async isValidEra(eraId: string): Promise<boolean> {
    try {
      // –ï—Å–ª–∏ eraId —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ—Ñ–∏–∫—Å era_style_, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
      const promptKey = eraId.startsWith('era_style_') ? eraId : `era_style_${eraId}`;
      const prompt = await PromptService.getRawPrompt(promptKey);
      return prompt !== null;
    } catch (error) {
      console.error(`‚ùå [ERA_STYLE] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —ç–ø–æ—Ö–∏ "${eraId}":`, error);
      
      // –†–µ–∑–µ—Ä–≤–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ ID
      const validEras = [
        'era_style_russia_early_20th',
        'era_style_russia_19th', 
        'era_style_soviet_union',
        'era_style_90s',
        'russia_early_20',
        'russia_19', 
        'soviet',
        'nineties'
      ];
      return validEras.includes(eraId);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–ø–æ—Ö
   */
  static getAvailableEras() {
    return [
      {
        id: 'russia_early_20',
        name: '–†–æ—Å—Å–∏—è –Ω–∞—á–∞–ª–∞ 20-–≥–æ –≤–µ–∫–∞',
        icon: 'üèõÔ∏è',
        description: '–°—Ç–∏–ª—å –º–æ–¥–µ—Ä–Ω–∞ –∏ –°–µ—Ä–µ–±—Ä—è–Ω–æ–≥–æ –≤–µ–∫–∞'
      },
      {
        id: 'russia_19',
        name: '–†–æ—Å—Å–∏—è 19 –≤–µ–∫',
        icon: 'üëë',
        description: '–≠–ø–æ—Ö–∞ –∫–ª–∞—Å—Å–∏—Ü–∏–∑–º–∞ –∏ —Ä–æ–º–∞–Ω—Ç–∏–∑–º–∞'
      },
      {
        id: 'soviet',
        name: '–°–æ–≤–µ—Ç—Å–∫–∏–π –°–æ—é–∑',
        icon: 'üö©',
        description: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –°–°–°–† 1950-1980'
      },
      {
        id: 'nineties',
        name: '90-–µ',
        icon: 'üìº',
        description: '–≠—Å—Ç–µ—Ç–∏–∫–∞ –¥–µ–≤—è–Ω–æ—Å—Ç—ã—Ö –∏ –ø–æ—Å—Ç—Å–æ–≤–µ—Ç—Å–∫–æ–µ –≤—Ä–µ–º—è'
      }
    ];
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è —ç–ø–æ—Ö–∏
   */
  static async stylePhotoByEra(request: EraStyleRequest): Promise<EraStyleResult> {
    try {
      console.log('üèõÔ∏è [ERA_STYLE] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è —ç–ø–æ—Ö–∏');
      console.log('üèõÔ∏è [ERA_STYLE] userId:', request.userId);
      console.log('üèõÔ∏è [ERA_STYLE] telegramId:', request.telegramId);
      console.log('üèõÔ∏è [ERA_STYLE] eraId:', request.eraId);
      console.log('üèõÔ∏è [ERA_STYLE] originalFilename:', request.originalFilename);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —ç–ø–æ—Ö–∏
      const isValid = await this.isValidEra(request.eraId);
      if (!isValid) {
        console.log('‚ùå [ERA_STYLE] –ù–µ–≤–µ—Ä–Ω–∞—è —ç–ø–æ—Ö–∞:', request.eraId);
        return {
          success: false,
          error: '–ù–µ–≤–µ—Ä–Ω–∞—è —ç–ø–æ—Ö–∞'
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ –ë–î
      const stylizationCost = await this.getEraStyleCost();
      console.log('üí∞ [ERA_STYLE] –°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏:', stylizationCost);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üí∞ [ERA_STYLE] –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const currentBalance = await BalanceService.getBalance(request.telegramId);
      console.log('üí∞ [ERA_STYLE] –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', currentBalance);
      
      if (currentBalance < stylizationCost) {
        console.log('‚ùå [ERA_STYLE] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
        return {
          success: false,
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${stylizationCost} ‚ÇΩ`
        };
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const apiRequest = await ApiRequest.create({
        user_id: request.userId,
        api_name: 'era_style',
        request_type: 'era_style',
        request_data: JSON.stringify({
          eraId: request.eraId,
          originalFilename: request.originalFilename,
          imageUrl: request.imageUrl,
          prompt: request.prompt
        }),
        prompt: request.prompt,
        cost: stylizationCost,
        status: 'pending'
      });

      console.log('üí≥ [ERA_STYLE] –°–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å API —Å ID:', apiRequest.id);
      
      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üí∞ [ERA_STYLE] –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞...');
      const balanceResult = await BalanceService.debit(request.userId, stylizationCost, `–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è —ç–ø–æ—Ö–∏: ${request.eraId}`);

      if (!balanceResult.success) {
        console.log('‚ùå [ERA_STYLE] –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤');
        await apiRequest.update({ status: 'failed', error_message: balanceResult.error });
        return {
          success: false,
          error: balanceResult.error || '–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤'
        };
      }

      console.log('‚úÖ [ERA_STYLE] –°—Ä–µ–¥—Å—Ç–≤–∞ —Å–ø–∏—Å–∞–Ω—ã, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:', balanceResult.balance);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "processing"
      await apiRequest.update({ status: 'processing' });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const processingResult = await this.processEraStyleImage(
        request.imageUrl,
        request.prompt,
        request.telegramId,
        request.eraId,
        request.originalFilename
      );

      if (!processingResult.success) {
        console.log('‚ùå [ERA_STYLE] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', processingResult.error);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await BalanceService.credit(request.userId, stylizationCost, `–í–æ–∑–≤—Ä–∞—Ç –∑–∞ –æ—à–∏–±–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è —ç–ø–æ—Ö–∏: ${request.eraId}`);

        await apiRequest.update({ 
          status: 'failed', 
          error_message: processingResult.error 
        });

        return {
          success: false,
          error: processingResult.error
        };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
      await apiRequest.update({
        status: 'completed',
        response_data: JSON.stringify({
          styledUrl: processingResult.styledUrl,
          eraId: request.eraId
        }),
        completed_date: new Date()
      });

      console.log('‚úÖ [ERA_STYLE] –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è —ç–ø–æ—Ö–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

      return {
        success: true,
        styledUrl: processingResult.styledUrl,
        cost: stylizationCost,
        eraId: request.eraId,
        originalFilename: request.originalFilename
      };

    } catch (error) {
      console.error('üí• [ERA_STYLE] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      return {
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è —ç–ø–æ—Ö–∏
   */
  private static async processEraStyleImage(
    imageUrl: string,
    prompt: string,
    telegramId: number,
    eraId: string,
    originalFilename: string
  ): Promise<{ success: boolean; styledUrl?: string; error?: string }> {
    try {
      console.log('üé® [ERA_STYLE] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
      console.log('üé® [ERA_STYLE] prompt –¥–ª–∏–Ω–∞:', prompt.length);

      // –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const imagePath = path.resolve(imageUrl);
      console.log('üìÅ [ERA_STYLE] –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', imagePath);

      if (!fs.existsSync(imagePath)) {
        return {
          success: false,
          error: '–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }

      const imageBuffer = fs.readFileSync(imagePath);
      console.log('üìä [ERA_STYLE] –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageBuffer.length, '–±–∞–π—Ç');

      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const metadata = await sharp(imageBuffer).metadata();
      console.log('üìä [ERA_STYLE] –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', metadata.width, 'x', metadata.height);

      // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ API
      let processedBuffer = imageBuffer;
      
      // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ, —É–º–µ–Ω—å—à–∞–µ–º –µ–≥–æ
      if (metadata.width && metadata.height && (metadata.width > 1024 || metadata.height > 1024)) {
        console.log('üîÑ [ERA_STYLE] –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
        const resizedBuffer = await sharp(imageBuffer)
          .resize(1024, 1024, { fit: 'inside', withoutEnlargement: false })
          .jpeg({ quality: 85 })
          .toBuffer();
        processedBuffer = Buffer.from(resizedBuffer);
        console.log('üîÑ [ERA_STYLE] –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞:', processedBuffer.length, '–±–∞–π—Ç');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
      console.log('ü§ñ [ERA_STYLE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API...');
      const styledImageBuffer = await this.executeWithRetry(
        () => this.callGeminiEraStyleAPI(processedBuffer, prompt),
        'era_style_api_call'
      );
      
      const processedDir = FileManagerService.createProcessedDirectory(telegramId, 'era-style');
      const outputFilename = `styled_${eraId}_${Date.now()}_${originalFilename}`;
      const outputPath = path.join(processedDir, outputFilename);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      fs.writeFileSync(outputPath, styledImageBuffer);
      console.log('üíæ [ERA_STYLE] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', outputPath);

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const styledUrl = FileManagerService.createFileUrl(
        telegramId,
        'era-style',
        outputFilename,
        'processed'
      );

      console.log('üåê [ERA_STYLE] URL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', styledUrl);

      return {
        success: true,
        styledUrl: styledUrl
      };

    } catch (error) {
      console.error('üí• [ERA_STYLE] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
      };
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
   */
  private static async executeWithRetry<T>(
    operation: () => Promise<T>,
    operationName: string
  ): Promise<T> {
    const startTime = Date.now();
    let attempt = 0;
    let lastError: Error | null = null;
    let totalDelayTime = 0;

    console.log(`üöÄ [RETRY] –ù–∞—á–∏–Ω–∞–µ–º ${operationName} —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º (–º–∞–∫—Å. –≤—Ä–µ–º—è: ${this.MAX_RETRY_DURATION}–º—Å)`);

    while (Date.now() - startTime < this.MAX_RETRY_DURATION) {
      attempt++;
      const attemptStartTime = Date.now();
      
      try {
        console.log(`üîÑ [RETRY] ${operationName} - –ø–æ–ø—ã—Ç–∫–∞ ${attempt} (–≤—Ä–µ–º—è —Å –Ω–∞—á–∞–ª–∞: ${Date.now() - startTime}–º—Å)`);
        const result = await operation();
        
        const attemptDuration = Date.now() - attemptStartTime;
        if (attempt > 1) {
          console.log(`‚úÖ [RETRY] ${operationName} - —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –ø–æ–ø—ã—Ç–∫–∏ ${attempt} –∑–∞ ${attemptDuration}–º—Å (–æ–±—â–µ–µ –≤—Ä–µ–º—è: ${Date.now() - startTime}–º—Å, –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–µ–∫: ${totalDelayTime}–º—Å)`);
        } else {
          console.log(`‚úÖ [RETRY] ${operationName} - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∑–∞ ${attemptDuration}–º—Å`);
        }
        
        return result;
      } catch (error) {
        lastError = error instanceof Error ? error : new Error(String(error));
        const attemptDuration = Date.now() - attemptStartTime;
        console.log(`‚ùå [RETRY] ${operationName} - –ø–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞ –∑–∞ ${attemptDuration}–º—Å:`, lastError.message);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–ø—ã—Ç–∫—É
        if (!this.isRetryableError(lastError)) {
          console.log(`üö´ [RETRY] ${operationName} - –æ—à–∏–±–∫–∞ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏`);
          throw lastError;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
        const delay = Math.min(
          this.INITIAL_RETRY_DELAY * Math.pow(this.BACKOFF_MULTIPLIER, attempt - 1),
          this.MAX_RETRY_DELAY
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–µ—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
        const remainingTime = this.MAX_RETRY_DURATION - (Date.now() - startTime);
        if (delay >= remainingTime) {
          console.log(`‚è∞ [RETRY] ${operationName} - –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ (–æ—Å—Ç–∞–ª–æ—Å—å ${remainingTime}–º—Å, –Ω—É–∂–Ω–æ ${delay}–º—Å)`);
          break;
        }

        console.log(`‚è≥ [RETRY] ${operationName} - –æ–∂–∏–¥–∞–Ω–∏–µ ${delay}–º—Å –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π ${attempt + 1} (–æ—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: ${remainingTime}–º—Å)`);
        await this.sleep(delay);
        totalDelayTime += delay;
      }
    }

    const totalDuration = Date.now() - startTime;
    console.log(`üí• [RETRY] ${operationName} - –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ–ø—ã—Ç–æ–∫: ${attempt}, –æ–±—â–µ–µ –≤—Ä–µ–º—è: ${totalDuration}–º—Å, –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–µ–∫: ${totalDelayTime}–º—Å`);
    throw lastError || new Error(`–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${operationName} –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∑–∞ ${totalDuration}–º—Å`);
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –ø–æ–¥–ª–µ–∂–∏—Ç –ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é
   */
  private static isRetryableError(error: Error): boolean {
    const retryableMessages = [
      'timeout',
      'network',
      'connection',
      'unavailable',
      'service unavailable',
      'internal server error',
      'bad gateway',
      'gateway timeout',
      'temporarily unavailable',
      'rate limit',
      'quota exceeded',
      'fetch failed',
      'socket hang up',
      'econnreset',
      'enotfound',
      'etimedout',
      'econnrefused',
      'server error',
      '503',
      '502',
      '504',
      '429', // Too Many Requests
      '500', // Internal Server Error
      'internal'  // –î–ª—è –æ—à–∏–±–æ–∫ —Ç–∏–ø–∞ "Internal error encountered"
    ];

    const errorMessage = error.message.toLowerCase();
    const isRetryable = retryableMessages.some(msg => errorMessage.includes(msg));
    
    console.log(`üîç [RETRY] –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏: "${error.message}" - –ø–æ–¥–ª–µ–∂–∏—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é: ${isRetryable}`);
    
    return isRetryable;
  }

  /**
   * –ü–∞—É–∑–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
   */
  private static sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –í—ã–∑–æ–≤ Gemini API –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç–∏–ª–µ —ç–ø–æ—Ö–∏
   */
  private static async callGeminiEraStyleAPI(imageBuffer: Buffer, prompt: string): Promise<Buffer> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google GenAI
    const genAI = new GoogleGenAI({ 
      apiKey: this.GEMINI_API_KEY
    });

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
    const imageBase64 = imageBuffer.toString('base64');

    const apiPrompt = [
      { text: prompt },
      {
        inlineData: {
          mimeType: 'image/jpeg',
          data: imageBase64,
        },
      },
    ];

    console.log('üì∏ [GEMINI] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...');
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Timeout: –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª 3 –º–∏–Ω—É—Ç—ã')), 180000);
    });

    const apiPromise = genAI.models.generateContent({
      model: "gemini-2.5-flash-image-preview",
      contents: apiPrompt,
    });

    const response = await Promise.race([apiPromise, timeoutPromise]) as any;

    console.log('‚úÖ [GEMINI] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini API');
    
    if (response.candidates && response.candidates.length > 0) {
      const candidate = response.candidates[0];
      if (candidate.content && candidate.content.parts) {
        for (const part of candidate.content.parts) {
          if (part.inlineData && part.inlineData.data) {
            console.log('‚úÖ [GEMINI] –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, MIME:', part.inlineData.mimeType);
            return Buffer.from(part.inlineData.data, 'base64');
          }
        }
      }
    }

    // –ï—Å–ª–∏ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ, —ç—Ç–æ –æ—à–∏–±–∫–∞ API
    console.log('‚ùå [GEMINI] –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç API');
    throw new Error('API –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
  }
}
