import axios from 'axios';
import sharp from 'sharp';
import fs from 'fs';
import path from 'path';
import { GoogleGenAI } from '@google/genai';
import { Photo, ApiRequest, User } from '../models/index';
import { BalanceService } from './BalanceService';
import { PriceService } from './PriceService';
import { FileManagerService } from './FileManagerService';

export interface StylizePhotoRequest {
  userId: number;
  telegramId: number;
  imageUrl: string;
  styleId: string;
  prompt: string;
  originalFilename: string;
}

export interface StylizePhotoResult {
  success: boolean;
  styledUrl?: string;
  cost?: number;
  styleId?: string;
  originalFilename?: string;
  error?: string;
}

export class PhotoStylizationService {
  private static readonly GEMINI_API_KEY = process.env.GEMINI_API_KEY || 'test_key';
  
  // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å –∏—Ö –ø—Ä–æ–º–ø—Ç–∞–º–∏
  private static readonly STYLE_PROMPTS = {
    'passport': 'Transform the uploaded photo into a professional passport-style portrait: neutral expression, direct gaze at camera, plain light gray background, even frontal lighting, high sharpness, no shadows or accessories, standard ID photo format, realistic and formal.',
    'glamour': 'Transform the uploaded photo into a glamorous fashion magazine cover: professional studio lighting with soft highlights, elegant pose like a high-fashion model, luxurious background with soft bokeh, flawless skin retouching, vibrant colors with magazine-style color grading, timeless style like fashion magazine cover.',
    'autumn': 'Convert the uploaded photo into an autumn forest photoshoot: person standing among golden and red fall leaves, misty atmosphere, warm sunlight filtering through trees, natural pose with wind-swept hair, realistic outdoor scene, vibrant seasonal colors, high resolution.',
    'cinema': 'Style the uploaded image as a cinematic movie still: dramatic lighting with lens flare, wide-angle composition like a Hollywood film scene, intense expression, subtle depth of field blur on background, noir or epic vibe, preserve original subject\'s features, 35mm film grain.',
    'poet': 'Modify the uploaded photo to include a famous poet (like Pushkin or Byron) beside the subject: intimate literary setting in a cozy library or garden, soft natural light, thoughtful poses as if in conversation, realistic historical attire for the poet, warm and inspirational atmosphere, high detail on faces and books.'
  };

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
   */
  static async getStylizationCost(): Promise<number> {
    return await PriceService.getServicePrice('photo_stylize');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è
   */
  static getStylePrompt(styleId: string): string {
    return this.STYLE_PROMPTS[styleId as keyof typeof this.STYLE_PROMPTS] || '';
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å
   */
  static isValidStyle(styleId: string): boolean {
    return Object.keys(this.STYLE_PROMPTS).includes(styleId);
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ
   */
  static async stylizePhoto(request: StylizePhotoRequest): Promise<StylizePhotoResult> {
    try {
      console.log('üé® [STYLIZE] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ');
      console.log('üé® [STYLIZE] userId:', request.userId);
      console.log('üé® [STYLIZE] telegramId:', request.telegramId);
      console.log('üé® [STYLIZE] styleId:', request.styleId);
      console.log('üé® [STYLIZE] originalFilename:', request.originalFilename);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∏–ª—è
      if (!this.isValidStyle(request.styleId)) {
        console.log('‚ùå [STYLIZE] –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∏–ª—å:', request.styleId);
        return {
          success: false,
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –ë–î
      const stylizationCost = await this.getStylizationCost();
      console.log('üí∞ [STYLIZE] –°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏:', stylizationCost);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üí∞ [STYLIZE] –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const currentBalance = await BalanceService.getBalance(request.telegramId);
      console.log('üí∞ [STYLIZE] –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', currentBalance);
      
      if (currentBalance < stylizationCost) {
        console.log('‚ùå [STYLIZE] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
        return {
          success: false,
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${stylizationCost} ‚ÇΩ`
        };
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const apiRequest = await ApiRequest.create({
        user_id: request.userId,
        api_name: 'gemini_stylize',
        request_type: 'photo_stylize',
        prompt: request.prompt,
        cost: stylizationCost,
        status: 'processing',
        request_data: JSON.stringify({
          styleId: request.styleId,
          originalFilename: request.originalFilename,
          imageUrl: request.imageUrl,
          operation: 'photo_stylize'
        })
      });

      console.log('üìù [STYLIZE] –°–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å –≤ –ë–î:', apiRequest.id);

      try {
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const processedDir = FileManagerService.createProcessedDirectory(request.telegramId, 'photo_stylize');
        const stylizedDir = path.join(processedDir, request.styleId);
        
        if (!fs.existsSync(stylizedDir)) {
          fs.mkdirSync(stylizedDir, { recursive: true });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const timestamp = Date.now();
        const extension = path.extname(request.originalFilename);
        const stylizedFilename = `stylized_${request.styleId}_${timestamp}${extension}`;
        const stylizedPath = path.join(stylizedDir, stylizedFilename);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        console.log('ü§ñ [STYLIZE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API...');
        const styledImageBuffer = await this.callGeminiStyleAPI(request.imageUrl, request.prompt);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        fs.writeFileSync(stylizedPath, styledImageBuffer);
        console.log('üíæ [STYLIZE] –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', stylizedPath);

        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∫ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        const relativePath = path.relative('uploads', stylizedPath);
        const styledUrl = `/api/uploads/${relativePath.replace(/\\/g, '/')}`;
        
        console.log('üîó [STYLIZE] URL —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', styledUrl);

        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('üí∏ [STYLIZE] –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞...');
        await BalanceService.debitBalance({
          userId: request.userId,
          amount: stylizationCost,
          type: 'debit',
          description: `–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ç–æ (${request.styleId})`,
          referenceId: apiRequest.id.toString()
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ completed
        await apiRequest.update({
          status: 'completed',
          completed_date: new Date(),
          response_data: JSON.stringify({
            styledUrl,
            stylizedFilename,
            cost: stylizationCost
          })
        });

        console.log('‚úÖ [STYLIZE] –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

        return {
          success: true,
          styledUrl,
          cost: stylizationCost,
          styleId: request.styleId,
          originalFilename: request.originalFilename
        };

      } catch (processingError) {
        console.error('‚ùå [STYLIZE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', processingError);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ failed
        await apiRequest.update({
          status: 'failed',
          error_message: processingError instanceof Error ? processingError.message : 'Unknown error',
          completed_date: new Date()
        });

        return {
          success: false,
          error: '–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
        };
      }

    } catch (error) {
      console.error('üí• [STYLIZE] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏:', error);
      return {
        success: false,
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
      };
    }
  }

  /**
   * –í—ã–∑–æ–≤ API Gemini –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private static async callGeminiStyleAPI(imageUrl: string, prompt: string): Promise<Buffer> {
    try {
      console.log('ü§ñ [GEMINI] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini AI...');
      const genAI = new GoogleGenAI({ 
        apiKey: this.GEMINI_API_KEY
      });

      // –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const imageBuffer = fs.readFileSync(imageUrl);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
      const imageBase64 = imageBuffer.toString('base64');
      const mimeType = this.getMimeTypeFromPath(imageUrl);

      console.log('üñºÔ∏è [GEMINI] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é...');
      console.log('üìù [GEMINI] –ü—Ä–æ–º–ø—Ç:', prompt.substring(0, 100) + '...');

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
      const apiPrompt = [
        { text: `${prompt}\n\nReturn only the stylized image without any text or explanations.` },
        {
          inlineData: {
            mimeType: mimeType,
            data: imageBase64,
          },
        },
      ];

      console.log('üì∏ [GEMINI] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...');
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout: –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª 3 –º–∏–Ω—É—Ç—ã')), 180000);
      });

      const apiPromise = genAI.models.generateContent({
        model: "gemini-2.5-flash-image-preview",
        contents: apiPrompt,
      });

      const response = await Promise.race([apiPromise, timeoutPromise]) as any;

      console.log('‚úÖ [GEMINI] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini API');
      
      if (response.candidates && response.candidates.length > 0) {
        const candidate = response.candidates[0];
        if (candidate.content && candidate.content.parts) {
          for (const part of candidate.content.parts) {
            if (part.inlineData && part.inlineData.data) {
              console.log('‚úÖ [GEMINI] –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, MIME:', part.inlineData.mimeType);
              return Buffer.from(part.inlineData.data, 'base64');
            }
          }
        }
      }

      // –ï—Å–ª–∏ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
      console.log('‚ö†Ô∏è [GEMINI] –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª');
      return imageBuffer;

    } catch (error) {
      console.error('‚ùå [GEMINI] –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Gemini API:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏');
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å MIME —Ç–∏–ø –ø–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
   */
  private static getMimeTypeFromPath(filePath: string): string {
    const ext = path.extname(filePath).toLowerCase();
    const mimeTypes: { [key: string]: string } = {
      '.jpg': 'image/jpeg',
      '.jpeg': 'image/jpeg',
      '.png': 'image/png',
      '.gif': 'image/gif',
      '.webp': 'image/webp'
    };
    return mimeTypes[ext] || 'image/jpeg';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
   */
  static getAvailableStyles(): { id: string; name: string; description: string }[] {
    return [
      {
        id: 'passport',
        name: '–ü–∞—Å–ø–æ—Ä—Ç',
        description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç –≤ —Å—Ç–∏–ª–µ –ø–∞—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Ñ–æ—Ç–æ'
      },
      {
        id: 'glamour',
        name: '–ì–ª–∞–º—É—Ä–Ω–∞—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è',
        description: '–°—Ç–∏–ª—å –æ–±–ª–æ–∂–∫–∏ –º–æ–¥–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞'
      },
      {
        id: 'autumn',
        name: '–û—Å–µ–Ω–Ω–∏–π –ª–µ—Å',
        description: '–§–æ—Ç–æ—Å–µ—Å—Å–∏—è –≤ –æ—Å–µ–Ω–Ω–µ–º –ª–µ—Å—É'
      },
      {
        id: 'cinema',
        name: '–ö–∞–¥—Ä –∏–∑ —Ñ–∏–ª—å–º–∞',
        description: '–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å'
      },
      {
        id: 'poet',
        name: '–§–æ—Ç–æ —Å –ø–æ—ç—Ç–æ–º',
        description: '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–æ—ç—Ç–æ–º'
      }
    ];
  }
}
