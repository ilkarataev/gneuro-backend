import fs from 'fs';
import path from 'path';

export class ImageCopyService {
  private static readonly SOURCE_DIR = 'images';
  private static readonly TARGET_DIR = 'uploads';

  /**
   * –ö–æ–ø–∏—Ä—É–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏ images –≤ uploads –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
   */
  static async copyImagesOnStartup(): Promise<void> {
    try {
      console.log('üìÅ [IMAGE_COPY] –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
      if (!fs.existsSync(this.SOURCE_DIR)) {
        console.log('üìÅ [IMAGE_COPY] –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ images –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!fs.existsSync(this.TARGET_DIR)) {
        fs.mkdirSync(this.TARGET_DIR, { recursive: true });
        console.log('üìÅ [IMAGE_COPY] –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ uploads');
      }

      // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–¥–ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã
      await this.copyDirectory(this.SOURCE_DIR, this.TARGET_DIR);
      
      console.log('‚úÖ [IMAGE_COPY] –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå [IMAGE_COPY] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
    }
  }

  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
   */
  private static async copyDirectory(sourceDir: string, targetDir: string): Promise<void> {
    const items = fs.readdirSync(sourceDir);

    for (const item of items) {
      const sourcePath = path.join(sourceDir, item);
      const targetPath = path.join(targetDir, item);
      const stat = fs.statSync(sourcePath);

      if (stat.isDirectory()) {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!fs.existsSync(targetPath)) {
          fs.mkdirSync(targetPath, { recursive: true });
          console.log(`üìÅ [IMAGE_COPY] –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${targetPath}`);
        }
        
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
        await this.copyDirectory(sourcePath, targetPath);
      } else if (this.isImageFile(item)) {
        // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await this.copyImageFile(sourcePath, targetPath);
      }
    }
  }

  /**
   * –ö–æ–ø–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private static async copyImageFile(sourcePath: string, targetPath: string): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª
      if (fs.existsSync(targetPath)) {
        const sourceStat = fs.statSync(sourcePath);
        const targetStat = fs.statSync(targetPath);
        
        // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç —Ç–æ—Ç –∂–µ —Ä–∞–∑–º–µ—Ä –∏ –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (sourceStat.size === targetStat.size && 
            sourceStat.mtime.getTime() === targetStat.mtime.getTime()) {
          return;
        }
      }

      // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
      fs.copyFileSync(sourcePath, targetPath);
      console.log(`üì∏ [IMAGE_COPY] –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: ${path.basename(sourcePath)}`);
    } catch (error) {
      console.error(`‚ùå [IMAGE_COPY] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${sourcePath}:`, error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
   */
  private static isImageFile(filename: string): boolean {
    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'];
    const ext = path.extname(filename).toLowerCase();
    return imageExtensions.includes(ext);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—ç—Ç–∞
   */
  static checkPoetImageExists(poetImagePath: string): boolean {
    const fullPath = path.join(this.TARGET_DIR, poetImagePath);
    return fs.existsSync(fullPath);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—ç—Ç–æ–≤
   */
  static getPoetImages(): string[] {
    const poetsDir = path.join(this.TARGET_DIR, 'poets');
    
    if (!fs.existsSync(poetsDir)) {
      return [];
    }

    try {
      const files = fs.readdirSync(poetsDir);
      return files.filter(file => this.isImageFile(file));
    } catch (error) {
      console.error('‚ùå [IMAGE_COPY] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –ø–æ—ç—Ç–æ–≤:', error);
      return [];
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—ç—Ç–∞
   */
  static getPoetImageUrl(poetImagePath: string): string {
    return `/api/uploads/${poetImagePath}`;
  }
}
