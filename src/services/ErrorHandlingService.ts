import { ERROR_MESSAGES } from '../config/queue';

export interface ErrorResponse {
  success: false;
  error: string;
  message?: string;
  code?: string;
}

export interface SuccessResponse {
  success: true;
  [key: string]: any;
}

export type ApiResponse = ErrorResponse | SuccessResponse;

export class ErrorHandlingService {
  private static readonly isProduction = process.env.NODE_ENV === 'production';

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –∏ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static handleError(error: Error | string, errorType?: string): ErrorResponse {
    const errorMessage = error instanceof Error ? error.message : error;
    
    console.error(`‚ùå [ERROR_HANDLER] ${errorType || '–û—à–∏–±–∫–∞'}:`, errorMessage);

    if (this.isProduction) {
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      return this.getProductionErrorResponse(errorMessage, errorType);
    } else {
      // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      return {
        success: false,
        error: errorMessage,
        message: errorMessage
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
   */
  private static getProductionErrorResponse(error: string, errorType?: string): ErrorResponse {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
    if (error.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤') || error.includes('insufficient')) {
      return {
        success: false,
        error: ERROR_MESSAGES.PRODUCTION.INSUFFICIENT_BALANCE,
        message: ERROR_MESSAGES.PRODUCTION.INSUFFICIENT_BALANCE,
        code: 'INSUFFICIENT_BALANCE'
      };
    }

    if (error.includes('–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω') || error.includes('required') || error.includes('invalid')) {
      return {
        success: false,
        error: ERROR_MESSAGES.PRODUCTION.INVALID_REQUEST,
        message: ERROR_MESSAGES.PRODUCTION.INVALID_REQUEST,
        code: 'INVALID_REQUEST'
      };
    }

    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return {
      success: false,
      error: ERROR_MESSAGES.PRODUCTION.GENERAL,
      message: ERROR_MESSAGES.PRODUCTION.GENERAL,
      code: 'SERVICE_UNAVAILABLE'
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É API –∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
   */
  static async handleApiError(
    error: Error | string, 
    userId: number, 
    telegramId: number, 
    jobType: string, 
    payload: any
  ): Promise<ErrorResponse> {
    console.log(`üìã [ERROR_HANDLER] –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: ${error}`);
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º QueueService –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    const { QueueService } = await import('./QueueService');
    
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await QueueService.addJob({
        jobType,
        payload: {
          userId,
          telegramId,
          ...payload
        }
      });

      if (this.isProduction) {
        return {
          success: false,
          error: ERROR_MESSAGES.PRODUCTION.GENERAL,
          message: ERROR_MESSAGES.PRODUCTION.GENERAL,
          code: 'QUEUED_FOR_RETRY'
        };
      } else {
        const errorMessage = error instanceof Error ? error.message : error;
        return {
          success: false,
          error: `–û—à–∏–±–∫–∞: ${errorMessage}. –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.`,
          message: `–û—à–∏–±–∫–∞: ${errorMessage}. –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.`
        };
      }
    } catch (queueError) {
      console.error('‚ùå [ERROR_HANDLER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å:', queueError);
      return this.handleError(error instanceof Error ? error : new Error(error));
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
   */
  static createSuccessResponse(data: any): SuccessResponse {
    return {
      success: true,
      ...data
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–∞)
   */
  static isCriticalError(error: Error | string): boolean {
    const errorMessage = error instanceof Error ? error.message : error;
    
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–∞
    const criticalErrors = [
      '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
      'insufficient balance',
      '–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
      'required',
      'invalid request',
      'unauthorized',
      'forbidden'
    ];

    return criticalErrors.some(criticalError => 
      errorMessage.toLowerCase().includes(criticalError.toLowerCase())
    );
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
   */
  static logError(error: Error | string, context: any = {}): void {
    const errorMessage = error instanceof Error ? error.message : error;
    const stack = error instanceof Error ? error.stack : undefined;
    
    console.error('‚ùå [ERROR_LOG]', {
      message: errorMessage,
      stack,
      context,
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV
    });
  }
}
