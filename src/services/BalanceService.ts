import { User, Payment } from '../models/index';
import { Op } from 'sequelize';
import { LeadTechService } from './LeadTechService';

export interface BalanceTransaction {
  userId: number;
  amount: number;
  type: 'credit' | 'debit';
  description: string;
  referenceId?: string;
}

export interface BalanceResult {
  success: boolean;
  balance?: number;
  error?: string;
}

export interface SyncResult {
  success: boolean;
  localBalance?: number;
  leadTechBalance?: number;
  synchronized?: boolean;
  error?: string;
}

export class BalanceService {
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ database id
   */
  static async getBalanceById(userId: number): Promise<number> {
    if (!userId || isNaN(userId)) {
      console.error('‚ùå [BalanceService] –ù–µ–≤–µ—Ä–Ω—ã–π userId:', userId);
      return 0;
    }
    
    const user = await User.findByPk(userId);
    return user?.balance || 0;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π LeadTech
   */
  static async getBalance(telegramUserId: number): Promise<number> {
    if (!telegramUserId || isNaN(telegramUserId)) {
      console.error('‚ùå [BalanceService] –ù–µ–≤–µ—Ä–Ω—ã–π telegramUserId –≤ getBalance:', telegramUserId);
      return 0;
    }
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å LeadTech
    await this.syncWithLeadTech(telegramUserId);
    
    // –ó–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const user = await User.findOne({ where: { telegram_id: telegramUserId } });
    return user?.balance || 0;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
   */
  static async getUser(telegramUserId: number): Promise<any> {
    if (!telegramUserId || isNaN(telegramUserId)) {
      console.error('‚ùå [BalanceService] –ù–µ–≤–µ—Ä–Ω—ã–π telegramUserId:', telegramUserId);
      return null;
    }
    
    const user = await User.findOne({ where: { telegram_id: telegramUserId } });
    return user;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async createUser(userData: any): Promise<any> {
    const user = await User.create({
      telegram_id: userData.id,
      username: userData.username,
      first_name: userData.firstName,
      last_name: userData.lastName,
      balance: 20, // –ù–∞—á–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å 20 —Ä—É–±–ª–µ–π –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      status: 'active'
    });
    
    await Payment.create({
      user_id: user.id,
      amount: 20,
      payment_method: 'card',
      transaction_type: 'credit',
      status: 'completed',
      description: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      reference_id: `welcome_bonus_${user.id}`
    });
    return user;
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π—Ç–∏ –∏ —Å–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å LeadTech –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
   */
  static async autoLinkWithLeadTech(telegramUserId: number): Promise<boolean> {
    try {
      const user = await User.findOne({ where: { telegram_id: telegramUserId } });
      if (!user) {
        return false;
      }

      // –ï—Å–ª–∏ —É–∂–µ —Å–≤—è–∑–∞–Ω, –Ω–µ –¥–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É
      if (user.leadtech_contact_id) {
        return true;
      }

      return false;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–∏–≤—è–∑–∫–µ –∫ LeadTech:', error);
      return false;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å —Å LeadTech
   */
  static async syncWithLeadTech(telegramUserId: number): Promise<SyncResult> {
    try {
      const user = await User.findOne({ where: { telegram_id: telegramUserId } });
      if (!user) {
        return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      // –ï—Å–ª–∏ LeadTech ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π—Ç–∏ –∏ —Å–≤—è–∑–∞—Ç—å
      if (!user.leadtech_contact_id) {
        console.log('üîç –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –≤ LeadTech...');
        const linked = await this.autoLinkWithLeadTech(telegramUserId);
        
        if (!linked) {
          return { 
            success: true, 
            localBalance: user.balance, 
            synchronized: false,
            error: 'LeadTech –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
          };
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º user –ø–æ—Å–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–∏–≤—è–∑–∫–∏
        await user.reload();
      }

      // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ LeadTech
      if (!user.leadtech_contact_id) {
        return { 
          success: false, 
          error: 'LeadTech contact ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–∏–≤—è–∑–∫–∏' 
        };
      }
      
      const leadTechAccount = await LeadTechService.getPrimaryAccount(user.leadtech_contact_id);
      if (!leadTechAccount) {
        return { 
          success: false, 
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ –∏–∑ LeadTech' 
        };
      }

      const leadTechBalance = LeadTechService.convertFromMinimalUnit(leadTechAccount.amount);
      console.log('üí∞ [BalanceService] –¢–µ–∫—É—â–∏–π –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:', user.balance);
      console.log('üí∞ [BalanceService] –ë–∞–ª–∞–Ω—Å –≤ LeadTech:', leadTechBalance);
      console.log('üí∞ [BalanceService] leadTechAccount.amount (—Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ):', leadTechAccount.amount);
      
      // –ï—Å–ª–∏ –≤ LeadTech –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –µ–≥–æ –∫ –Ω–∞–º
      if (leadTechBalance > 0) {
        console.log('üí∏ [BalanceService] –ü–µ—Ä–µ–Ω–æ—Å–∏–º –±–∞–ª–∞–Ω—Å –∏–∑ LeadTech –≤ –ª–æ–∫–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞
        const originalBalance = Number(user.balance); // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —á–∏—Å–ª—É
        
        // 1. –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ LeadTech –∫ –Ω–∞—à–µ–º—É –ª–æ–∫–∞–ª—å–Ω–æ–º—É –±–∞–ª–∞–Ω—Å—É
        console.log('üîç [BalanceService] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤:', `originalBalance=${originalBalance} (—Ç–∏–ø: ${typeof originalBalance}), leadTechBalance=${leadTechBalance} (—Ç–∏–ø: ${typeof leadTechBalance})`);
        const simpleSum = originalBalance + leadTechBalance;
        console.log('üîç [BalanceService] –ü—Ä–æ—Å—Ç–æ–µ —Å–ª–æ–∂–µ–Ω–∏–µ:', `${originalBalance} + ${leadTechBalance} = ${simpleSum}`);
        const newLocalBalance = Math.round(simpleSum * 100) / 100; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –∫–æ–ø–µ–µ–∫
        console.log('üí∞ [BalanceService] –†–∞—Å—á–µ—Ç –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:', `${originalBalance} + ${leadTechBalance} = ${newLocalBalance}`);
        await user.update({ balance: newLocalBalance });
        
        // 2. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        await Payment.create({
          user_id: user.id,
          amount: leadTechBalance,
          payment_method: 'card', // –ò—Å–ø–æ–ª—å–∑—É–µ–º card –∫–∞–∫ –±–∞–∑–æ–≤—ã–π —Ç–∏–ø
          transaction_type: 'credit',
          status: 'completed',
          description: '–ü–µ—Ä–µ–Ω–æ—Å –±–∞–ª–∞–Ω—Å–∞ –∏–∑ LeadTech',
          reference_id: `leadtech_transfer_${leadTechAccount.id}`
        });
        
        // 3. –°–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Å—å –±–∞–ª–∞–Ω—Å –∏–∑ LeadTech
        try {
          const withdrawSuccess = await LeadTechService.withdrawFunds({
            account_id: leadTechAccount.id.toString(),
            amount: leadTechAccount.amount, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
            description: '–ü–µ—Ä–µ–Ω–æ—Å –±–∞–ª–∞–Ω—Å–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É'
          });
          
          if (!withdrawSuccess) {
            console.error('‚ùå [BalanceService] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –±–∞–ª–∞–Ω—Å –∏–∑ LeadTech –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞');
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
            await user.update({ balance: originalBalance });
            return { 
              success: false, 
              error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –±–∞–ª–∞–Ω—Å –∏–∑ LeadTech –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞' 
            };
          }
          
          console.log('‚úÖ [BalanceService] –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –∏–∑ LeadTech');
          
          return {
            success: true,
            localBalance: newLocalBalance,
            leadTechBalance: 0, // –ü–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤ LeadTech –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0
            synchronized: true
          };
        } catch (error) {
          console.error('‚ùå [BalanceService] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∏–∑ LeadTech:', error);
          // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
          await user.update({ balance: originalBalance });
          return { 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ LeadTech' 
          };
        }
      }

      // –ï—Å–ª–∏ –≤ LeadTech –±–∞–ª–∞–Ω—Å 0, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
      return {
        success: true,
        localBalance: user.balance,
        leadTechBalance: 0,
        synchronized: true
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å LeadTech:', error);
      return { success: false, error: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å LeadTech' };
    }
  }
  static async setLeadTechContactId(telegramUserId: number, contactId: number): Promise<boolean> {
    try {
      const user = await User.findOne({ where: { telegram_id: telegramUserId } });
      if (!user) {
        return false;
      }

      await user.update({ leadtech_contact_id: contactId });
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ LeadTech contact ID:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async creditBalance(transaction: BalanceTransaction): Promise<BalanceResult> {
    try {
      const user = await User.findByPk(transaction.userId);
      if (!user) {
        return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å LeadTech ID, —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ LeadTech –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫ –Ω–∞–º
      if (user.leadtech_contact_id) {
        try {
          const leadTechAccount = await LeadTechService.getPrimaryAccount(user.leadtech_contact_id);
          if (leadTechAccount) {
            console.log('üí∞ [BalanceService] –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ LeadTech –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞');
            const success = await LeadTechService.withdrawFunds({
              account_id: leadTechAccount.id.toString(),
              amount: LeadTechService.convertToMinimalUnit(transaction.amount),
              description: `–ü–µ—Ä–µ–≤–æ–¥ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${transaction.description}`
            });

            if (!success) {
              return { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ LeadTech –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏' };
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∏–∑ LeadTech –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏:', error);
          return { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∏–∑ LeadTech –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏' };
        }
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
      const newBalance = user.balance + transaction.amount;
      await user.update({ balance: newBalance });

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await Payment.create({
        user_id: transaction.userId,
        amount: transaction.amount,
        payment_method: 'card', // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        transaction_type: 'credit',
        status: 'completed',
        description: transaction.description,
        reference_id: transaction.referenceId
      });

      return { success: true, balance: newBalance };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
      return { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' };
    }
  }

  /**
   * –°–ø–∏—Å–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å)
   */
  static async debitBalance(transaction: BalanceTransaction): Promise<BalanceResult> {
    try {
      const user = await User.findByPk(transaction.userId);
      if (!user) {
        return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ
      if (user.balance < transaction.amount) {
        return { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ' };
      }

      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
      const newBalance = user.balance - transaction.amount;
      await user.update({ balance: newBalance });

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await Payment.create({
        user_id: transaction.userId,
        amount: transaction.amount,
        payment_method: 'card',
        transaction_type: 'debit',
        status: 'completed',
        description: transaction.description,
        reference_id: transaction.referenceId
      });

      console.log(`üí∞ [BalanceService] –°–ø–∏—Å–∞–Ω–æ ${transaction.amount} RUB, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance} RUB`);
      return { success: true, balance: newBalance };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å –±–∞–ª–∞–Ω—Å–∞:', error);
      return { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getPaymentHistory(userId: number, limit: number = 50): Promise<Payment[]> {
    return await Payment.findAll({
      where: { user_id: userId },
      order: [['createdAt', 'DESC']],
      limit
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∞–Ω–∏—è —Å—É–º–º—ã –ø–æ database id
   */
  static async canDebitById(userId: number, amount: number): Promise<boolean> {
    if (!userId || isNaN(userId)) {
      console.error('‚ùå [BalanceService] –ù–µ–≤–µ—Ä–Ω—ã–π userId –≤ canDebitById:', userId);
      return false;
    }
    
    const balance = await this.getBalanceById(userId);
    return balance >= amount;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∞–Ω–∏—è —Å—É–º–º—ã –ø–æ telegram_id
   */
  static async canDebit(telegramUserId: number, amount: number): Promise<boolean> {
    const balance = await this.getBalance(telegramUserId);
    return balance >= amount;
  }

  /**
   * –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  static async credit(userId: number, amount: number, description: string): Promise<BalanceResult> {
    return await this.creditBalance({
      userId,
      amount,
      type: 'credit',
      description
    });
  }

  /**
   * –°–ø–∏—Å–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥) —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π LeadTech
   */
  static async debit(userId: number, amount: number, description: string): Promise<BalanceResult> {
    return await this.debitBalance({
      userId,
      amount,
      type: 'debit',
      description
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π LeadTech
   */
  static async getBalanceWithSync(telegramUserId: number): Promise<number> {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    const syncResult = await this.syncWithLeadTech(telegramUserId);
    
    if (syncResult.success && syncResult.localBalance !== undefined) {
      return syncResult.localBalance;
    }
    
    // –ï—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    return await this.getBalance(telegramUserId);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  static async onAppLoad(telegramUserId: number): Promise<SyncResult> {
    return await this.syncWithLeadTech(telegramUserId);
  }
}
