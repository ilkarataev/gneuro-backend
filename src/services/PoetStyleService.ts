import { GoogleGenAI } from '@google/genai';
import { Photo, ApiRequest, Poet } from '../models/index';
import { BalanceService } from './BalanceService';
import { PriceService } from './PriceService';
import { FileManagerService } from './FileManagerService';
import { PromptService } from './PromptService';
import { PhotoRestorationService } from './PhotoRestorationService';
import { ImageCopyService } from './ImageCopyService';

export interface PoetStyleRequest {
  userId: number;
  telegramId: number;
  imageUrl: string;
  localPath: string;
  poetId: number;
  prompt?: string;
  originalFilename?: string;
  adminRetry?: boolean; // –§–ª–∞–≥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –∞–¥–º–∏–Ω—Å–∫–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
}

export interface PoetStyleResult {
  success: boolean;
  photo_id?: number;
  processed_image_url?: string;
  original_prompt?: string;
  error?: string;
  message?: string;
  cost?: number;
}

export class PoetStyleService {
  private static readonly GEMINI_API_KEY = process.env.GEMINI_API_KEY || 'test_key';
  private static readonly MODULE_NAME = 'poet_style';
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è retry –º–µ—Ö–∞–Ω–∏–∑–º–∞
  private static readonly MAX_RETRY_DURATION = parseInt(process.env.GEMINI_MAX_RETRY_DURATION || '300000'); // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  private static readonly INITIAL_RETRY_DELAY = parseInt(process.env.GEMINI_INITIAL_RETRY_DELAY || '1000'); // 1 —Å–µ–∫—É–Ω–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  private static readonly MAX_RETRY_DELAY = parseInt(process.env.GEMINI_MAX_RETRY_DELAY || '30000'); // 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  private static readonly BACKOFF_MULTIPLIER = parseFloat(process.env.GEMINI_BACKOFF_MULTIPLIER || '2'); // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Å –ø–æ—ç—Ç–æ–º
   */
  static async getPoetStyleCost(): Promise<number> {
    return await PriceService.getServicePrice('poet_style');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—ç—Ç–æ–≤
   */
  static async getAvailablePoets(): Promise<Poet[]> {
    try {
      const poets = await Poet.findAll({
        where: { is_active: true },
        order: [['name', 'ASC']]
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö –ø–æ—ç—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const poetsWithImages = poets.filter(poet => {
        const hasImage = ImageCopyService.checkPoetImageExists(poet.image_path);
        if (!hasImage) {
          console.warn(`‚ö†Ô∏è [POET_STYLE] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ—ç—Ç–∞ ${poet.name}: ${poet.image_path}`);
        }
        return hasImage;
      });

      return poetsWithImages;
    } catch (error) {
      console.error('‚ùå [POET_STYLE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—ç—Ç–æ–≤:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—ç—Ç–æ–≤');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—ç—Ç–∞ –ø–æ ID
   */
  static async getPoetById(poetId: number): Promise<Poet | null> {
    return await Poet.findByPk(poetId);
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
   */
  private static async executeWithRetry<T>(
    operation: () => Promise<T>,
    operationName: string
  ): Promise<T> {
    const startTime = Date.now();
    let attempt = 0;
    let lastError: Error | null = null;
    let totalDelayTime = 0;

    console.log(`üöÄ [RETRY] –ù–∞—á–∏–Ω–∞–µ–º ${operationName} —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º (–º–∞–∫—Å. –≤—Ä–µ–º—è: ${this.MAX_RETRY_DURATION}–º—Å)`);

    while (Date.now() - startTime < this.MAX_RETRY_DURATION) {
      attempt++;
      const attemptStartTime = Date.now();
      
      try {
        console.log(`üîÑ [RETRY] ${operationName} - –ø–æ–ø—ã—Ç–∫–∞ ${attempt} (–≤—Ä–µ–º—è —Å –Ω–∞—á–∞–ª–∞: ${Date.now() - startTime}–º—Å)`);
        const result = await operation();
        
        const attemptDuration = Date.now() - attemptStartTime;
        if (attempt > 1) {
          console.log(`‚úÖ [RETRY] ${operationName} - —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –ø–æ–ø—ã—Ç–∫–∏ ${attempt} –∑–∞ ${attemptDuration}–º—Å (–æ–±—â–µ–µ –≤—Ä–µ–º—è: ${Date.now() - startTime}–º—Å, –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–µ–∫: ${totalDelayTime}–º—Å)`);
        } else {
          console.log(`‚úÖ [RETRY] ${operationName} - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∑–∞ ${attemptDuration}–º—Å`);
        }
        
        return result;
      } catch (error) {
        lastError = error instanceof Error ? error : new Error(String(error));
        const attemptDuration = Date.now() - attemptStartTime;
        console.log(`‚ùå [RETRY] ${operationName} - –ø–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞ –∑–∞ ${attemptDuration}–º—Å:`, lastError.message);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–ø—ã—Ç–∫—É
        if (!this.isRetryableError(lastError)) {
          console.log(`üö´ [RETRY] ${operationName} - –æ—à–∏–±–∫–∞ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏`);
          throw lastError;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
        const delay = Math.min(
          this.INITIAL_RETRY_DELAY * Math.pow(this.BACKOFF_MULTIPLIER, attempt - 1),
          this.MAX_RETRY_DELAY
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–µ—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
        const remainingTime = this.MAX_RETRY_DURATION - (Date.now() - startTime);
        if (delay >= remainingTime) {
          console.log(`‚è∞ [RETRY] ${operationName} - –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ (–æ—Å—Ç–∞–ª–æ—Å—å ${remainingTime}–º—Å, –Ω—É–∂–Ω–æ ${delay}–º—Å)`);
          break;
        }

        console.log(`‚è≥ [RETRY] ${operationName} - –æ–∂–∏–¥–∞–Ω–∏–µ ${delay}–º—Å –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π ${attempt + 1} (–æ—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: ${remainingTime}–º—Å)`);
        await this.sleep(delay);
        totalDelayTime += delay;
      }
    }

    const totalDuration = Date.now() - startTime;
    console.log(`üí• [RETRY] ${operationName} - –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ–ø—ã—Ç–æ–∫: ${attempt}, –æ–±—â–µ–µ –≤—Ä–µ–º—è: ${totalDuration}–º—Å, –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–µ–∫: ${totalDelayTime}–º—Å`);
    throw lastError || new Error(`–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${operationName} –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∑–∞ ${totalDuration}–º—Å`);
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –ø–æ–¥–ª–µ–∂–∏—Ç –ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é
   */
  private static isRetryableError(error: Error): boolean {
    const retryableMessages = [
      'timeout',
      'network',
      'connection',
      'unavailable',
      'service unavailable',
      'internal server error',
      'bad gateway',
      'gateway timeout',
      'temporarily unavailable',
      'rate limit',
      'quota exceeded',
      'fetch failed',
      'socket hang up',
      'econnreset',
      'enotfound',
      'etimedout',
      'econnrefused',
      'server error',
      '503',
      '502',
      '504',
      '429', // Too Many Requests
      '500' // Internal Server Error
    ];

    const errorMessage = error.message.toLowerCase();
    const isRetryable = retryableMessages.some(msg => errorMessage.includes(msg));
    
    console.log(`üîç [RETRY] –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏: "${error.message}" - –ø–æ–¥–ª–µ–∂–∏—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é: ${isRetryable}`);
    
    return isRetryable;
  }

  /**
   * –ü–∞—É–∑–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
   */
  private static sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Å –ø–æ—ç—Ç–æ–º
   */
  static async stylePhotoWithPoet(request: PoetStyleRequest): Promise<PoetStyleResult> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –ë–î
      const styleCost = await this.getPoetStyleCost();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const canPay = await BalanceService.canDebitById(request.userId, styleCost);
      if (!canPay) {
        return { 
          success: false, 
          error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ',
          message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ',
          cost: styleCost
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—ç—Ç–µ
      const poet = await this.getPoetById(request.poetId);
      if (!poet) {
        return {
          success: false,
          error: '–ü–æ—ç—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
          message: '–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ—ç—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ
      const photo = await Photo.create({
        user_id: request.userId,
        original_url: request.imageUrl,
        status: 'processing',
        request_params: JSON.stringify({
          poetId: request.poetId,
          poetName: poet.name,
          prompt: request.prompt
        })
      });

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º API –∑–∞–ø—Ä–æ—Å
      const apiRequest = await ApiRequest.create({
        user_id: request.userId,
        photo_id: photo.id,
        api_name: 'poet_style',
        request_type: 'poet_style',
        prompt: request.prompt || `–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤ —Å—Ç–∏–ª–µ ${poet.name}`,
        request_data: JSON.stringify({
          ...request,
          poet: {
            id: poet.id,
            name: poet.name,
            full_name: poet.full_name,
            era: poet.era
          }
        }),
        status: 'processing',
        cost: styleCost
      });

      try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        console.log('üé≠ [POET_STYLE] –í—ã–∑—ã–≤–∞–µ–º Gemini API...');
        const response = await this.callGeminiAPIWithPoet(
          request.localPath,
          poet,
          request.prompt || `–°–µ–ª—Ñ–∏ —Å ${poet.name}`,
          request.telegramId
        );
        
        if (response.success && response.imageUrl) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Ñ–æ—Ç–æ
          await photo.update({
            restored_url: response.imageUrl,
            status: 'completed',
            processing_time: new Date().getTime() - photo.createdAt.getTime()
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º API –∑–∞–ø—Ä–æ—Å
          await apiRequest.update({
            response_data: JSON.stringify(response),
            status: 'completed'
          });

          // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ –∞–¥–º–∏–Ω—Å–∫–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
          if (!request.adminRetry) {
            await BalanceService.debitBalance({
              userId: request.userId,
              amount: styleCost,
              type: 'debit',
              description: `–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤ —Å—Ç–∏–ª–µ ${poet.name}`,
              referenceId: `photo_${photo.id}`
            });
          } else {
            console.log('üîß [POET_STYLE] –ê–¥–º–∏–Ω—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞');
          }

          return {
            success: true,
            photo_id: photo.id,
            processed_image_url: response.imageUrl,
            original_prompt: request.prompt || `–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤ —Å—Ç–∏–ª–µ ${poet.name}`,
            cost: styleCost
          };
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
          await photo.update({
            status: 'failed',
            error_message: response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏'
          });

          await apiRequest.update({
            status: 'failed',
            response_data: JSON.stringify(response)
          });

          return { 
            success: false, 
            error: response.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ',
            message: response.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ'
          };
        }
      } catch (error) {
        console.error('‚ùå [POET_STYLE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API:', error);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
        await photo.update({
          status: 'failed',
          error_message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        });

        await apiRequest.update({
          status: 'failed',
          response_data: JSON.stringify({ error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' })
        });

        return { 
          success: false, 
          error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ',
          message: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ'
        };
      }
    } catch (error) {
      console.error('‚ùå [POET_STYLE] –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: error instanceof Error ? error.message : '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      };
    }
  }

  /**
   * –í—ã–∑–æ–≤ Gemini API –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Å –ø–æ—ç—Ç–æ–º
   */
  private static async callGeminiAPIWithPoet(
    userImagePath: string,
    poet: Poet,
    prompt: string,
    telegramId: number
  ): Promise<{ success: boolean; imageUrl?: string; error?: string }> {
    try {
      const result = await this.executeWithRetry(async () => {
        return await this.performGeminiAPICallWithPoet(userImagePath, poet, prompt, telegramId);
      }, 'Gemini API Poet Style');

      return result;
    } catch (error) {
      console.error('‚ùå [POET_STYLE] –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API'
      };
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ Gemini API –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Å –ø–æ—ç—Ç–æ–º
   */
  private static async performGeminiAPICallWithPoet(
    userImagePath: string,
    poet: Poet,
    prompt: string,
    telegramId: number
  ): Promise<{ success: boolean; imageUrl?: string; error?: string }> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google GenAI
    const genai = new GoogleGenAI({ 
      apiKey: this.GEMINI_API_KEY
    });

    console.log('üé≠ [POET_STYLE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API...');
    console.log('üé≠ [POET_STYLE] –ü–æ—ç—Ç:', poet.name);
    console.log('üé≠ [POET_STYLE] –ü—Ä–æ–º–ø—Ç:', prompt.substring(0, 100) + '...');
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (3 –º–∏–Ω—É—Ç—ã)
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Timeout: –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª 3 –º–∏–Ω—É—Ç—ã')), 180000);
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–µ–ª—Ñ–∏ —Å –ø–æ—ç—Ç–æ–º
    const enhancedPrompt = await this.enhancePoetPrompt(prompt, poet, 'selfie');

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    const fs = require('fs');
    const contents: any[] = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—ç—Ç–∞
    const poetImagePath = `uploads/${poet.image_path}`;
    if (ImageCopyService.checkPoetImageExists(poet.image_path)) {
      const poetImageData = fs.readFileSync(poetImagePath);
      const base64PoetImage = poetImageData.toString('base64');
      
      contents.push({
        inlineData: {
          data: base64PoetImage,
          mimeType: 'image/jpeg'
        }
      });
    } else {
      throw new Error(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—ç—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${poetImagePath}`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userImageData = fs.readFileSync(userImagePath);
    const base64UserImage = userImageData.toString('base64');
    
    contents.push({
      inlineData: {
        data: base64UserImage,
        mimeType: 'image/jpeg'
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
    contents.push({ text: enhancedPrompt });

    const apiPromise = genai.models.generateContent({
      model: "gemini-2.5-flash-image-preview", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      contents: [{ parts: contents }],
    });

    const response = await Promise.race([apiPromise, timeoutPromise]) as any;

    console.log('üé≠ [POET_STYLE] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API');
    console.log('üé≠ [POET_STYLE] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:', response.candidates?.length || 0);

    if (response.candidates && response.candidates.length > 0) {
      const candidate = response.candidates[0];
      if (!candidate.content || !candidate.content.parts) {
        console.log('‚ùå [POET_STYLE] –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç content.parts');
        throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API');
      }

      console.log('üé≠ [POET_STYLE] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', candidate.content.parts.length);

      for (const part of candidate.content.parts) {
        if (part.inlineData && part.inlineData.data) {
          console.log('‚úÖ [POET_STYLE] –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, MIME:', part.inlineData.mimeType);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é FileManagerService
          const savedFile = FileManagerService.saveBase64File(
            part.inlineData.data,
            part.inlineData.mimeType || 'image/jpeg',
            telegramId,
            this.MODULE_NAME,
            'poet_style'
          );
          
          return {
            success: true,
            imageUrl: savedFile.url
          };
        }
      }

      // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ
      console.log('‚ùå [POET_STYLE] –í –æ—Ç–≤–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      throw new Error('API –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    } else {
      console.log('‚ùå [POET_STYLE] API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤');
      throw new Error('API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
    }
  }

  /**
   * –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Å –ø–æ—ç—Ç–æ–º
   */
  private static async enhancePoetPrompt(originalPrompt: string, poet: Poet, styleType: 'transform' | 'selfie' = 'transform'): Promise<string> {
    try {
      // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
      const promptKey = styleType === 'selfie' ? 'poet_style_selfie' : 'poet_style_base';
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const enhancedPrompt = await PromptService.getPrompt(promptKey, {
        originalPrompt,
        poetName: poet.name,
        poetFullName: poet.full_name,
        poetEra: poet.era || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —ç–ø–æ—Ö–∞',
        poetDescription: poet.description || ''
      });

      return enhancedPrompt;
    } catch (error) {
      console.error('‚ùå [POET_STYLE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π:', error);
      
      // –†–µ–∑–µ—Ä–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π
      if (styleType === 'selfie') {
        let enhancedPrompt = `Create a single selfie photo featuring the person from [image 1] and the person from [image 2]. They should be standing next to each other. Preserve the original appearance, including clothing and hairstyle, for both individuals. `;
        enhancedPrompt += `The first image shows ${poet.full_name} (${poet.name}), and the second image shows the user. `;
        enhancedPrompt += `Create a realistic photo where both people are standing together as if taking a selfie. `;
        
        if (poet.era) {
          enhancedPrompt += `The photo should reflect the ${poet.era} era aesthetic. `;
        }
        
        enhancedPrompt += `Make sure both faces are clearly visible and the photo looks natural and high-quality.`;
        
        return enhancedPrompt;
      } else {
        let enhancedPrompt = `Transform the second uploaded image (user photo) to match the style and appearance of the first uploaded image (${poet.name}). `;
        enhancedPrompt += `Apply the visual characteristics, facial features, clothing style, and overall aesthetic of ${poet.full_name} to the user's photo. `;
        enhancedPrompt += `Maintain the user's basic facial structure while incorporating ${poet.name}'s distinctive style. `;
        
        if (poet.era) {
          enhancedPrompt += `Capture the essence of the ${poet.era} era. `;
        }
        
        enhancedPrompt += `The result should look like the user transformed into ${poet.name} while maintaining their identity. `;
        enhancedPrompt += `Make it realistic and high-quality.`;
        
        return enhancedPrompt;
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–π —Å –ø–æ—ç—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserPoetStyleHistory(userId: number, limit: number = 50): Promise<Photo[]> {
    return await Photo.findAll({
      include: [{
        model: ApiRequest,
        as: 'requests',
        where: { request_type: 'poet_style' }
      }],
      where: { user_id: userId },
      order: [['createdAt', 'DESC']],
      limit
    });
  }
}
