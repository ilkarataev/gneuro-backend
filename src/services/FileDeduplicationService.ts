import { Photo, User } from '../models';
import { MD5Utils } from '../utils/md5Utils';
import fs from 'fs';
import path from 'path';

export interface DeduplicationResult {
  isDuplicate: boolean;
  existingPhoto?: Photo;
  md5Hash: string;
  shouldUseExisting: boolean;
}

export class FileDeduplicationService {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –¥—É–±–ª–∏–∫–∞—Ç–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
   */
  static async checkForDuplicates(filePath: string): Promise<DeduplicationResult> {
    try {
      console.log('üîç [DEDUP] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã:', filePath);
      
      // –í—ã—á–∏—Å–ª—è–µ–º MD5 —Ö–µ—à —Ñ–∞–π–ª–∞
      const md5Hash = MD5Utils.calculateFileMD5(filePath);
      console.log('üîç [DEDUP] MD5 —Ö–µ—à —Ñ–∞–π–ª–∞:', md5Hash);
      
      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∂–µ MD5 —Ö–µ—à–µ–º
      console.log('üîç [DEDUP] –ò—â–µ–º –≤ –ë–î –∑–∞–ø–∏—Å–∏ —Å MD5:', md5Hash);
      
      // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å MD5 —Ö–µ—à–∞–º–∏
      const allPhotosWithMD5 = await Photo.findAll({
        where: { md5_hash: { [require('sequelize').Op.ne]: null } },
        attributes: ['id', 'md5_hash', 'original_url']
      });
      console.log('üîç [DEDUP] –í—Å–µ –∑–∞–ø–∏—Å–∏ —Å MD5 –≤ –ë–î:', allPhotosWithMD5.map(p => ({ id: p.id, md5: p.md5_hash, url: p.original_url })));
      
      const existingPhoto = await Photo.findOne({
        where: { md5_hash: md5Hash }
      });
      console.log('üîç [DEDUP] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ –ë–î:', existingPhoto ? `–Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å ID: ${existingPhoto.id}` : '–∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      
      if (existingPhoto) {
        console.log('üîç [DEDUP] –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç! ID —Ñ–æ—Ç–æ:', existingPhoto.id);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ –¥–∏—Å–∫–µ
        const fileExists = fs.existsSync(existingPhoto.original_url);
        
        if (fileExists) {
          console.log('‚úÖ [DEDUP] –î—É–±–ª–∏–∫–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ –¥–∏—Å–∫–µ');
          return {
            isDuplicate: true,
            existingPhoto,
            md5Hash,
            shouldUseExisting: true
          };
        } else {
          console.log('‚ö†Ô∏è [DEDUP] –§–∞–π–ª –≤ –ë–î –µ—Å—Ç—å, –Ω–æ –Ω–∞ –¥–∏—Å–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å.');
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –ë–î
          await existingPhoto.update({ original_url: filePath });
          return {
            isDuplicate: true,
            existingPhoto,
            md5Hash,
            shouldUseExisting: true
          };
        }
      }
      
      console.log('‚úÖ [DEDUP] –î—É–±–ª–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ñ–∞–π–ª —É–Ω–∏–∫–∞–ª–µ–Ω');
      return {
        isDuplicate: false,
        md5Hash,
        shouldUseExisting: false
      };
      
    } catch (error) {
      console.error('‚ùå [DEDUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ —Ñ–æ—Ç–æ —Å MD5 —Ö–µ—à–µ–º
   */
  static async createPhotoRecord(
    userId: number,
    filePath: string,
    md5Hash: string,
    additionalData: {
      originalWidth?: number;
      originalHeight?: number;
      fileSize?: number;
      mimeType?: string;
      requestParams?: string;
    } = {}
  ): Promise<Photo> {
    try {
      console.log('üíæ [DEDUP] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ —Ñ–æ—Ç–æ —Å MD5:', md5Hash);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findByPk(userId);
      if (!user) {
        throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      }
      
      const photo = await Photo.create({
        user_id: userId,
        original_url: filePath,
        md5_hash: md5Hash,
        original_width: additionalData.originalWidth,
        original_height: additionalData.originalHeight,
        file_size: additionalData.fileSize,
        mime_type: additionalData.mimeType,
        request_params: additionalData.requestParams,
        status: 'pending'
      });
      
      console.log('‚úÖ [DEDUP] –ó–∞–ø–∏—Å—å –æ —Ñ–æ—Ç–æ —Å–æ–∑–¥–∞–Ω–∞, ID:', photo.id);
      return photo;
      
    } catch (error) {
      console.error('‚ùå [DEDUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —Ñ–æ—Ç–æ:', error);
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —Ñ–æ—Ç–æ: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π
   */
  static async processFileUpload(
    tempFilePath: string,
    userId: number,
    telegramId: number,
    moduleName: string,
    additionalData: {
      originalWidth?: number;
      originalHeight?: number;
      fileSize?: number;
      mimeType?: string;
      requestParams?: string;
    } = {}
  ): Promise<{ photo: Photo; isNewFile: boolean; finalPath: string }> {
    try {
      console.log('üìÅ [DEDUP] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
      const dedupResult = await this.checkForDuplicates(tempFilePath);
      
      if (dedupResult.isDuplicate && dedupResult.shouldUseExisting) {
        console.log('‚ôªÔ∏è [DEDUP] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª');
        return {
          photo: dedupResult.existingPhoto!,
          isNewFile: false,
          finalPath: dedupResult.existingPhoto!.original_url
        };
      }
      
      // –§–∞–π–ª —É–Ω–∏–∫–∞–ª–µ–Ω, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
      const { FileManagerService } = await import('./FileManagerService');
      const filename = path.basename(tempFilePath);
      const finalPath = FileManagerService.moveFileToUserDirectory(
        tempFilePath,
        telegramId,
        moduleName,
        filename
      );
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î
      const photo = await this.createPhotoRecord(userId, finalPath, dedupResult.md5Hash, additionalData);
      
      console.log('‚úÖ [DEDUP] –ù–æ–≤—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
      return {
        photo,
        isNewFile: true,
        finalPath
      };
      
    } catch (error) {
      console.error('‚ùå [DEDUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
      throw error;
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã (—É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
   */
  static async cleanupDuplicates(): Promise<{ removedFiles: number; freedSpace: number }> {
    try {
      console.log('üßπ [DEDUP] –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤');
      
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ MD5 —Ö–µ—à–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –±–æ–ª–µ–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
      const duplicateHashes = await Photo.findAll({
        attributes: ['md5_hash'],
        group: ['md5_hash'],
        having: Photo.sequelize!.literal('COUNT(*) > 1')
      });
      
      let removedFiles = 0;
      let freedSpace = 0;
      
      for (const duplicate of duplicateHashes) {
        const photos = await Photo.findAll({
          where: { md5_hash: duplicate.md5_hash },
          order: [['createdAt', 'ASC']] // –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
        });
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π
        for (let i = 1; i < photos.length; i++) {
          const photo = photos[i];
          
          // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
          if (fs.existsSync(photo.original_url)) {
            const stats = fs.statSync(photo.original_url);
            freedSpace += stats.size;
            fs.unlinkSync(photo.original_url);
          }
          
          // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
          await photo.destroy();
          removedFiles++;
        }
      }
      
      console.log(`‚úÖ [DEDUP] –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${removedFiles}, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: ${freedSpace} –±–∞–π—Ç`);
      
      return { removedFiles, freedSpace };
      
    } catch (error) {
      console.error('‚ùå [DEDUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
      throw error;
    }
  }
}
