import axios from 'axios';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è Telegram Bot API
 */
interface TelegramBotResponse<T = any> {
  ok: boolean;
  result?: T;
  error_code?: number;
  description?: string;
}

interface PreparedMessageResult {
  id: string;
}

interface BotInfo {
  id: number;
  is_bot: boolean;
  first_name: string;
  username: string;
  can_join_groups: boolean;
  can_read_all_group_messages: boolean;
  supports_inline_queries: boolean;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
 * –í–∫–ª—é—á–∞–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (savePreparedInlineMessage)
 */
export class TelegramBotService {
  private static BOT_TOKEN = process.env.BOT_TOKEN;
  private static BASE_URL = `https://api.telegram.org/bot${TelegramBotService.BOT_TOKEN}`;

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
   */
  private static checkBotToken(): void {
    if (!TelegramBotService.BOT_TOKEN || TelegramBotService.BOT_TOKEN === 'test') {
      throw new Error('Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL
   */
  private static async checkImageAvailability(imageUrl: string): Promise<boolean> {
    try {
      console.log('üîç [TelegramBot] –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageUrl);
      
      const response = await axios.head(imageUrl, {
        timeout: 5000, // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        headers: {
          'User-Agent': 'Telegram Bot'
        }
      });
      
      const isImageContent = response.headers['content-type']?.startsWith('image/');
      const isSuccess = response.status === 200;
      
      console.log('üîç [TelegramBot] –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏:', {
        status: response.status,
        contentType: response.headers['content-type'],
        isImageContent,
        isSuccess: isSuccess && isImageContent
      });
      
      return isSuccess && isImageContent;
    } catch (error) {
      console.warn('‚ö†Ô∏è [TelegramBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error instanceof Error ? error.message : error);
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Mini App
   * @param photoUrl - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param caption - –ø–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
   * @returns ID –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
   */
  static async createPreparedPhotoMessage(
    photoUrl: string, 
    caption?: string, 
    userId?: number
  ): Promise<string | null> {
    try {
      TelegramBotService.checkBotToken();

      console.log('üì§ [TelegramBot] –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ');
      console.log('üì§ [TelegramBot] URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', photoUrl);
      console.log('üì§ [TelegramBot] –ü–æ–¥–ø–∏—Å—å:', caption);
      console.log('üì§ [TelegramBot] userId:', userId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram API
      const imageAvailable = await TelegramBotService.checkImageAvailability(photoUrl);
      if (!imageAvailable) {
        console.warn('‚ö†Ô∏è [TelegramBot] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');
        // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø–æ–∑–∂–µ
      }

      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è savePreparedInlineMessage —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Mini Apps
      // https://core.telegram.org/bots/api#savepreparedinlinemessage
      const payload = {
        user_id: userId,
        result: {
          type: 'photo',
          id: `photo_${Date.now()}`, // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
          photo_url: photoUrl,
          thumb_url: photoUrl, // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ URL –∫–∞–∫ thumbnail
          ...(caption && { caption })
        },
        allow_user_chats: true,
        allow_bot_chats: true,
        allow_group_chats: true,
        allow_channel_chats: true
      };

      console.log('üì§ [TelegramBot] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ savePreparedInlineMessage');
      console.log('üì§ [TelegramBot] Payload:', JSON.stringify(payload, null, 2));

      const response = await axios.post<TelegramBotResponse<PreparedMessageResult>>(
        `${TelegramBotService.BASE_URL}/savePreparedInlineMessage`,
        payload,
        {
          headers: {
            'Content-Type': 'application/json'
          },
          timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        }
      );

      console.log('üì§ [TelegramBot] –û—Ç–≤–µ—Ç –æ—Ç Telegram API:', response.data);

      if (response.data?.ok && response.data?.result?.id) {
        const preparedMessageId = response.data.result.id;
        console.log('‚úÖ [TelegramBot] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, ID:', preparedMessageId);
        return preparedMessageId;
      } else {
        console.error('‚ùå [TelegramBot] Telegram API –≤–µ—Ä–Ω—É–ª –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:', response.data);
        return null;
      }

    } catch (error: any) {
      console.error('‚ùå [TelegramBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      
      if (error.response) {
        console.error('‚ùå [TelegramBot] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
        console.error('‚ùå [TelegramBot] –°—Ç–∞—Ç—É—Å:', error.response.status);
      }
      
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞
   * @returns –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
   */
  static async getBotInfo(): Promise<BotInfo | null> {
    try {
      TelegramBotService.checkBotToken();

      console.log('ü§ñ [TelegramBot] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ');

      const response = await axios.get<TelegramBotResponse<BotInfo>>(
        `${TelegramBotService.BASE_URL}/getMe`,
        { timeout: 5000 }
      );

      if (response.data?.ok && response.data?.result) {
        console.log('‚úÖ [TelegramBot] –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω:', response.data.result.username);
        return response.data.result;
      } else {
        console.error('‚ùå [TelegramBot] –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', response.data);
        return null;
      }

    } catch (error: any) {
      console.error('‚ùå [TelegramBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ—Ç–∞:', error);
      return null;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param url - URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns true –µ—Å–ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–π
   */
  static isValidImageUrl(url: string): boolean {
    try {
      const parsedUrl = new URL(url);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å https –¥–ª—è Telegram)
      if (parsedUrl.protocol !== 'https:') {
        console.warn('‚ö†Ô∏è [TelegramBot] URL –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS –ø—Ä–æ—Ç–æ–∫–æ–ª:', url);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –Ω–µ –ø—É—Å—Ç–æ–π
      if (!url.trim()) {
        console.warn('‚ö†Ô∏è [TelegramBot] URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
        return false;
      }

      return true;
    } catch (error) {
      console.warn('‚ö†Ô∏è [TelegramBot] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL:', url, error);
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π Telegram
   * @param baseUrl - –±–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞
   * @param telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param moduleName - –∏–º—è –º–æ–¥—É–ª—è
   * @param filename - –∏–º—è —Ñ–∞–π–ª–∞
   * @returns –ø–æ–ª–Ω—ã–π HTTPS URL
   */
  static createTelegramCompatibleImageUrl(
    baseUrl: string, 
    telegramId: number, 
    moduleName: string, 
    filename: string
  ): string {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –±–∞–∑–æ–≤—ã–π URL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS
    const httpsBaseUrl = baseUrl.replace(/^http:/, 'https:');
    
    const url = `${httpsBaseUrl}/uploads/${telegramId}/${moduleName}/${filename}`;
    
    console.log('üîó [TelegramBot] –°–æ–∑–¥–∞–Ω URL –¥–ª—è Telegram:', url);
    return url;
  }
}
