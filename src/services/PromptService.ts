import { Prompt } from '../models/index';

export interface PromptVariables {
  [key: string]: string | number | boolean;
}

export interface GetPromptOptions {
  cache?: boolean;
  version?: number;
}

export class PromptService {
  // –ö—ç—à –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
  private static promptCache = new Map<string, string>();
  private static cacheTimestamp = new Map<string, number>();
  private static readonly CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç –ø–æ –∫–ª—é—á—É –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
   */
  static async getPrompt(key: string, variables: PromptVariables = {}, options: GetPromptOptions = {}): Promise<string> {
    try {
      console.log(`üîç [PROMPT] –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫–ª—é—á–∞: "${key}"`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à, –µ—Å–ª–∏ –æ–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω
      if (options.cache !== false) {
        const cachedPrompt = this.getCachedPrompt(key);
        if (cachedPrompt) {
          console.log(`üíæ [PROMPT] –ü—Ä–æ–º–ø—Ç "${key}" –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ`);
          return this.fillVariables(cachedPrompt, variables);
        }
      }

      console.log(`üóÑÔ∏è [PROMPT] –ò—â–µ–º –ø—Ä–æ–º–ø—Ç "${key}" –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...`);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –±–∞–∑—ã
      const whereClause: any = {
        key,
        is_active: true
      };

      if (options.version) {
        whereClause.version = options.version;
        console.log(`üî¢ [PROMPT] –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é: ${options.version}`);
      }

      const prompt = await Prompt.findOne({
        where: whereClause,
        order: [['version', 'DESC']] // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞
      });

      if (!prompt) {
        console.error(`‚ùå [PROMPT] –ü—Ä–æ–º–ø—Ç —Å –∫–ª—é—á–æ–º "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        throw new Error(`–ü—Ä–æ–º–ø—Ç —Å –∫–ª—é—á–æ–º "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.setCachedPrompt(key, prompt.content);

      console.log(`‚úÖ [PROMPT] –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–º–ø—Ç "${key}" –≤–µ—Ä—Å–∏–∏ ${prompt.version}, –¥–ª–∏–Ω–∞: ${prompt.content.length}`);
      console.log(`üìù [PROMPT] –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞: ${prompt.content.substring(0, 100)}...`);
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
      return this.fillVariables(prompt.content, variables);
    } catch (error) {
      console.error(`‚ùå [PROMPT] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ "${key}":`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—ã—Ä–æ–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
   */
  static async getRawPrompt(key: string, options: GetPromptOptions = {}): Promise<Prompt | null> {
    try {
      console.log(`üîç [PROMPT] –ó–∞–ø—Ä–æ—Å —Å—ã—Ä–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫–ª—é—á–∞: "${key}"`);
      
      const whereClause: any = {
        key,
        is_active: true
      };

      if (options.version) {
        whereClause.version = options.version;
        console.log(`üî¢ [PROMPT] –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é: ${options.version}`);
      }

      const prompt = await Prompt.findOne({
        where: whereClause,
        order: [['version', 'DESC']]
      });
      
      if (prompt) {
        console.log(`‚úÖ [PROMPT] –°—ã—Ä–æ–π –ø—Ä–æ–º–ø—Ç "${key}" –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä—Å–∏—è: ${prompt.version}`);
      } else {
        console.log(`‚ùå [PROMPT] –°—ã—Ä–æ–π –ø—Ä–æ–º–ø—Ç "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      
      return prompt;
    } catch (error) {
      console.error(`‚ùå [PROMPT] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ "${key}":`, error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  static async getPromptsByCategory(category: string): Promise<Prompt[]> {
    try {
      return await Prompt.findAll({
        where: {
          category,
          is_active: true
        },
        order: [['name', 'ASC']]
      });
    } catch (error) {
      console.error(`‚ùå [PROMPT] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}":`, error);
      return [];
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
   */
  static async createPrompt(data: {
    key: string;
    name: string;
    description?: string;
    content: string;
    category: string;
    variables?: Record<string, any>;
    created_by?: number;
  }): Promise<Prompt> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –µ—â–µ –Ω–µ—Ç
      const existing = await Prompt.findOne({ where: { key: data.key } });
      if (existing) {
        throw new Error(`–ü—Ä–æ–º–ø—Ç —Å –∫–ª—é—á–æ–º "${data.key}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }

      const prompt = await Prompt.create({
        ...data,
        is_active: true,
        version: 1
      });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞
      this.clearCachedPrompt(data.key);
      
      console.log(`‚úÖ [PROMPT] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç "${data.key}"`);
      return prompt;
    } catch (error) {
      console.error(`‚ùå [PROMPT] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞:`, error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç (—Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é)
   */
  static async updatePrompt(key: string, updates: {
    name?: string;
    description?: string;
    content?: string;
    category?: string;
    variables?: Record<string, any>;
    created_by?: number;
  }): Promise<Prompt> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
      const currentPrompt = await Prompt.findOne({
        where: { key, is_active: true },
        order: [['version', 'DESC']]
      });

      if (!currentPrompt) {
        throw new Error(`–ü—Ä–æ–º–ø—Ç —Å –∫–ª—é—á–æ–º "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
      const newVersion = currentPrompt.version + 1;
      const newPrompt = await Prompt.create({
        key,
        name: updates.name || currentPrompt.name,
        description: updates.description !== undefined ? updates.description : currentPrompt.description,
        content: updates.content || currentPrompt.content,
        category: updates.category || currentPrompt.category,
        variables: updates.variables !== undefined ? updates.variables : currentPrompt.variables,
        created_by: updates.created_by,
        version: newVersion,
        is_active: true
      });

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
      this.clearCachedPrompt(key);

      console.log(`‚úÖ [PROMPT] –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–º–ø—Ç "${key}" –¥–æ –≤–µ—Ä—Å–∏–∏ ${newVersion}`);
      return newPrompt;
    } catch (error) {
      console.error(`‚ùå [PROMPT] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ "${key}":`, error);
      throw error;
    }
  }

  /**
   * –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç
   */
  static async deactivatePrompt(key: string): Promise<boolean> {
    try {
      const [updatedRows] = await Prompt.update(
        { is_active: false },
        { where: { key } }
      );

      if (updatedRows > 0) {
        this.clearCachedPrompt(key);
        console.log(`‚úÖ [PROMPT] –ü—Ä–æ–º–ø—Ç "${key}" –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
        return true;
      }

      return false;
    } catch (error) {
      console.error(`‚ùå [PROMPT] –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ "${key}":`, error);
      return false;
    }
  }

  /**
   * –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –ø—Ä–æ–º–ø—Ç–µ
   */
  private static fillVariables(template: string, variables: PromptVariables): string {
    let result = template;

    // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {variableName}
    for (const [key, value] of Object.entries(variables)) {
      const placeholder = `{${key}}`;
      result = result.replace(new RegExp(placeholder, 'g'), String(value));
    }

    // –£–¥–∞–ª—è–µ–º –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É)
    result = result.replace(/\{[^}]+\}/g, '');

    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    result = result.replace(/\s+/g, ' ').trim();

    return result;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∏–∑ –∫—ç—à–∞
   */
  private static getCachedPrompt(key: string): string | null {
    const cached = this.promptCache.get(key);
    const timestamp = this.cacheTimestamp.get(key);

    if (cached && timestamp && (Date.now() - timestamp) < this.CACHE_TTL) {
      return cached;
    }

    // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
    this.promptCache.delete(key);
    this.cacheTimestamp.delete(key);
    
    return null;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç –≤ –∫—ç—à
   */
  private static setCachedPrompt(key: string, content: string): void {
    this.promptCache.set(key, content);
    this.cacheTimestamp.set(key, Date.now());
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∏–∑ –∫—ç—à–∞
   */
  private static clearCachedPrompt(key: string): void {
    this.promptCache.delete(key);
    this.cacheTimestamp.delete(key);
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
   */
  static clearCache(): void {
    this.promptCache.clear();
    this.cacheTimestamp.clear();
    console.log('üßπ [PROMPT] –ö—ç—à –ø—Ä–æ–º–ø—Ç–æ–≤ –æ—á–∏—â–µ–Ω');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
   */
  static getCacheStats(): { size: number; keys: string[] } {
    return {
      size: this.promptCache.size,
      keys: Array.from(this.promptCache.keys())
    };
  }
}
