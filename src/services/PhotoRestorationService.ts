import axios from 'axios';
import sharp from 'sharp';
import fs from 'fs';
import path from 'path';
import { GoogleGenAI } from '@google/genai';
import { Photo, ApiRequest, User } from '../models/index';
import { BalanceService } from './BalanceService';
import { PriceService } from './PriceService';
import { FileManagerService } from './FileManagerService';

export interface RestorePhotoRequest {
  userId: number;
  telegramId?: number; // –î–æ–±–∞–≤–ª—è–µ–º telegramId
  moduleName?: string; // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –º–æ–¥—É–ª—è –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–ø–æ–∫
  imageUrl: string;
  options?: {
    enhance_face?: boolean;
    scratch_removal?: boolean;
    color_correction?: boolean;
  };
}

export interface RestorePhotoResult {
  success: boolean;
  photoId?: number;
  restoredUrl?: string;
  error?: string;
  cost?: number;
}

export class PhotoRestorationService {
  private static readonly GEMINI_API_KEY = process.env.GEMINI_API_KEY || 'test_key';
  private static readonly RESTORATION_PROMPT = `Restore this old, faded black-and-white photograph by removing scratches, tears, dust, and any damage. Enhance sharpness, contrast, and details for a clear, high-resolution look. Add realistic, natural colors: warm skin tones, vibrant clothing and objects as appropriate to the era, and a balanced, lifelike color palette throughout the scene.`;

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏
   */
  static async getRestorationCost(): Promise<number> {
    return await PriceService.getServicePrice('photo_restore');
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ
   */
  static async restorePhoto(request: RestorePhotoRequest): Promise<RestorePhotoResult> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î
      const restorationCost = await this.getRestorationCost();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const canPay = await BalanceService.canDebitById(request.userId, restorationCost);
      if (!canPay) {
        return { 
          success: false, 
          error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ',
          cost: restorationCost
        };
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ
      const photo = await Photo.create({
        user_id: request.userId,
        original_url: request.imageUrl,
        status: 'processing',
        request_params: JSON.stringify(request.options || {})
      });

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º API –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Ñ–æ—Ç–æ
      const apiRequest = await ApiRequest.create({
        user_id: request.userId,
        photo_id: photo.id, // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        api_name: 'photo_restoration',
        request_type: 'photo_restore',
        request_data: JSON.stringify(request),
        status: 'processing',
        cost: restorationCost
      });

      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API
        const response = await this.callGeminiAPI(request.imageUrl, request.options, request.userId, request.telegramId, request.moduleName);
        
        if (response.success && response.restoredUrl) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Ñ–æ—Ç–æ
          await photo.update({
            restored_url: response.restoredUrl,
            status: 'completed',
            processing_time: new Date().getTime() - photo.createdAt.getTime()
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º API –∑–∞–ø—Ä–æ—Å
          await apiRequest.update({
            response_data: JSON.stringify(response),
            status: 'completed'
          });

          // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞
          await BalanceService.debitBalance({
            userId: request.userId,
            amount: restorationCost,
            type: 'debit',
            description: '–†–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏',
            referenceId: `photo_${photo.id}`
          });

          return {
            success: true,
            photoId: photo.id,
            restoredUrl: response.restoredUrl,
            cost: restorationCost
          };
        } else {
          // –û—à–∏–±–∫–∞ API
          await photo.update({
            status: 'failed',
            error_message: response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API'
          });

          await apiRequest.update({
            response_data: JSON.stringify(response),
            status: 'failed',
            error_message: response.error
          });

          return { 
            success: false, 
            error: response.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
          };
        }

      } catch (apiError) {
        // –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API
        const errorMessage = apiError instanceof Error ? apiError.message : '–û—à–∏–±–∫–∞ API';
        
        await photo.update({
          status: 'failed',
          error_message: errorMessage
        });

        await apiRequest.update({
          status: 'failed',
          error_message: errorMessage
        });

        return { 
          success: false, 
          error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏'
        };
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ restorePhoto:', error);
      return { 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ –ø–æ ID
   */
  static async getPhotoById(photoId: number): Promise<Photo | null> {
    return await Photo.findByPk(photoId);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserPhotos(userId: number, limit: number = 50): Promise<Photo[]> {
    return await Photo.findAll({
      where: { user_id: userId },
      order: [['createdAt', 'DESC']],
      limit
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
   */
  static async checkPhotoStatus(photoId: number): Promise<Photo | null> {
    return await Photo.findByPk(photoId);
  }

  /**
   * –í—ã–∑–æ–≤ Gemini API –¥–ª—è —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ
   */
  private static async callGeminiAPI(imageUrl: string, options?: any, userId?: number, telegramId?: number, moduleName?: string): Promise<{ success: boolean; restoredUrl?: string; error?: string }> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
      const imageBase64 = await this.getImageAsBase64(imageUrl);
      if (!imageBase64) {
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
        };
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google GenAI
      const genai = new GoogleGenAI({ 
        apiKey: this.GEMINI_API_KEY
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏
      const prompt = [
        { text: this.RESTORATION_PROMPT },
        {
          inlineData: {
            mimeType: 'image/jpeg',
            data: imageBase64,
          },
        },
      ];

      console.log('üì∏ [GEMINI] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...');
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout: –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª 3 –º–∏–Ω—É—Ç—ã')), 180000);
      });

      const apiPromise = genai.models.generateContent({
        model: "gemini-2.5-flash-image-preview",
        contents: prompt,
      });

      const response = await Promise.race([apiPromise, timeoutPromise]) as any;

      console.log('üì∏ [GEMINI] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API');
      console.log('üì∏ [GEMINI] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:', response.candidates?.length || 0);

      if (response.candidates && response.candidates.length > 0) {
        const candidate = response.candidates[0];
        if (!candidate.content || !candidate.content.parts) {
          console.log('‚ùå [GEMINI] –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç content.parts');
          return {
            success: false,
            error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API'
          };
        }

        console.log('üì∏ [GEMINI] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', candidate.content.parts.length);

        for (const part of candidate.content.parts) {
          if (part.text) {
            console.log('üì∏ [GEMINI] –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç:', part.text.substring(0, 100) + '...');
          } else if (part.inlineData && part.inlineData.data) {
            console.log('‚úÖ [GEMINI] –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, MIME:', part.inlineData.mimeType);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–æ–¥—É–ª—è
            const restoredImagePath = await this.saveBase64Image(
              part.inlineData.data, 
              part.inlineData.mimeType || 'image/jpeg', 
              telegramId,
              moduleName
            );
            
            return {
              success: true,
              restoredUrl: restoredImagePath
            };
          }
        }

        // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ
        console.log('‚ùå [GEMINI] –í –æ—Ç–≤–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
        return {
          success: false,
          error: 'API –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
        };
      } else {
        console.log('‚ùå [GEMINI] API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤');
        return {
          success: false,
          error: 'API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
        };
      }
    } catch (error) {
      console.error('‚ùå [GEMINI] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ base64
   */
  private static async getImageAsBase64(imageUrl: string): Promise<string | null> {
    try {
      if (imageUrl.startsWith('http')) {
        console.log('üì∏ [GET_IMAGE] –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ URL:', imageUrl);
        const response = await axios.get(imageUrl, { responseType: 'arraybuffer' });
        const buffer = Buffer.from(response.data as ArrayBuffer);
        return buffer.toString('base64');
      } else {
        // –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        console.log('üì∏ [GET_IMAGE] –ß–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª:', imageUrl);
        const filePath = path.resolve(process.cwd(), imageUrl);
        console.log('üì∏ [GET_IMAGE] –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É:', filePath);
        
        if (fs.existsSync(filePath)) {
          const buffer = fs.readFileSync(filePath);
          console.log('‚úÖ [GET_IMAGE] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä:', buffer.length, '–±–∞–π—Ç');
          return buffer.toString('base64');
        } else {
          console.error('‚ùå [GET_IMAGE] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', filePath);
          return null;
        }
      }
    } catch (error) {
      console.error('‚ùå [GET_IMAGE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      return null;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ —Ñ–∞–π–ª
   */
  private static async saveBase64Image(base64Data: string, mimeType: string, telegramId?: number, moduleName?: string): Promise<string> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é photo_restore
    const module = moduleName || 'photo_restore';
    
    if (!telegramId) {
      // Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ telegramId (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π)
      const extension = mimeType.includes('png') ? 'png' : 'jpg';
      const filename = `processed_${Date.now()}.${extension}`;
      const fallbackDir = `uploads/${module}/processed/`;
      
      if (!fs.existsSync(fallbackDir)) {
        fs.mkdirSync(fallbackDir, { recursive: true });
      }
      
      const filePath = path.join(process.cwd(), fallbackDir, filename);
      const buffer = Buffer.from(base64Data, 'base64');
      fs.writeFileSync(filePath, buffer);
      
      const baseUrl = process.env.BASE_URL || 'https://suno.ilkarvet.ru';
      return `${baseUrl}/uploads/${module}/processed/${filename}`;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π FileManagerService –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
    const savedFile = FileManagerService.saveBase64File(
      base64Data,
      mimeType,
      telegramId,
      module,
      'processed' // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'processed' –≤–º–µ—Å—Ç–æ 'restored'
    );
    
    return savedFile.url;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–æ—Ç–æ
   */
  static async getPhotoStatus(photoId: number): Promise<{ success: boolean; photo?: Photo; error?: string }> {
    try {
      const photo = await Photo.findByPk(photoId);
      
      if (!photo) {
        return {
          success: false,
          error: '–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        };
      }

      return {
        success: true,
        photo
      };
    } catch (error) {
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–æ—Ç–æ'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  static async getUserPhotoHistory(userId: number, page: number = 1, limit: number = 10): Promise<{
    photos: Photo[];
    total: number;
    page: number;
    totalPages: number;
  }> {
    const offset = (page - 1) * limit;
    
    const { count, rows } = await Photo.findAndCountAll({
      where: { user_id: userId },
      order: [['createdAt', 'DESC']],
      limit,
      offset
    });

    return {
      photos: rows,
      total: count,
      page,
      totalPages: Math.ceil(count / limit)
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–∏–ø—É –º–æ–¥—É–ª—è (restore/stylize)
   */
  static async getUserPhotoHistoryByModule(
    userId: number, 
    moduleType: 'photo_restore' | 'photo_stylize',
    page: number = 1, 
    limit: number = 10
  ): Promise<{
    photos: Photo[];
    total: number;
    page: number;
    totalPages: number;
  }> {
    const offset = (page - 1) * limit;
    
    console.log(`üîç [DEBUG] –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Ç–∏–ø: ${moduleType}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${page}, –ª–∏–º–∏—Ç: ${limit}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userPhotos = await Photo.findAll({
      where: { user_id: userId },
      limit: 5
    });
    console.log(`üì∏ [DEBUG] –í—Å–µ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, userPhotos.length);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º ApiRequest –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRequests = await ApiRequest.findAll({
      where: { user_id: userId },
      limit: 5
    });
    console.log(`üìã [DEBUG] –í—Å–µ–≥–æ API –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, userRequests.length);
    console.log(`üìã [DEBUG] –¢–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤:`, userRequests.map(r => r.request_type));
    console.log(`üìã [DEBUG] photo_id –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö:`, userRequests.map(r => ({ id: r.id, photo_id: r.photo_id, type: r.request_type })));
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ - —á–µ—Ä–µ–∑ ApiRequest
    const requestsOfType = await ApiRequest.findAll({
      where: { 
        user_id: userId,
        request_type: moduleType 
      },
      include: [{
        model: Photo,
        as: 'photo',
        required: false
      }],
      limit: 5
    });
    console.log(`üîÑ [DEBUG] –ó–∞–ø—Ä–æ—Å—ã —Ç–∏–ø–∞ ${moduleType}:`, requestsOfType.length);
    console.log(`üîÑ [DEBUG] –° —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏:`, requestsOfType.filter(r => (r as any).photo).length);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ ApiRequest —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ request_type
    const { count, rows } = await Photo.findAndCountAll({
      where: { user_id: userId },
      include: [{
        model: ApiRequest,
        as: 'requests',
        where: { request_type: moduleType },
        required: true
      }],
      order: [['createdAt', 'DESC']],
      limit,
      offset,
      distinct: true
    });

    console.log(`‚úÖ [DEBUG] –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${count}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º: ${rows.length}`);
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ ApiRequest
    if (count === 0) {
      console.log(`üîÑ [DEBUG] –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ ApiRequest...`);
      
      const alternativeRequests = await ApiRequest.findAndCountAll({
        where: { 
          user_id: userId,
          request_type: moduleType 
        },
        order: [['createdAt', 'DESC']],
        limit,
        offset,
        include: [{
          model: Photo,
          as: 'photo',
          required: false
        }]
      });
      
      console.log(`üîÑ [DEBUG] –ù–∞–π–¥–µ–Ω–æ API –∑–∞–ø—Ä–æ—Å–æ–≤: ${alternativeRequests.count}`);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å API –∑–∞–ø—Ä–æ—Å—ã –Ω–æ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, —Å–æ–∑–¥–∞–¥–∏–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (alternativeRequests.count > 0) {
        const alternativePhotos = alternativeRequests.rows.map(req => {
          if ((req as any).photo) {
            return (req as any).photo;
          } else {
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Photo –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            return {
              id: req.id,
              user_id: req.user_id,
              original_url: req.request_data ? JSON.parse(req.request_data).imageUrl || 'unknown' : 'unknown',
              restored_url: req.response_data ? JSON.parse(req.response_data).styledUrl || null : null,
              status: req.status,
              createdAt: req.createdAt,
              updatedAt: req.updatedAt,
              request_params: req.request_data,
              processing_time: null,
              error_message: req.error_message,
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
              original_width: 0,
              original_height: 0,
              file_size: 0,
              mime_type: 'image/jpeg'
            };
          }
        }).filter(Boolean);
        
        return {
          photos: alternativePhotos,
          total: alternativeRequests.count,
          page,
          totalPages: Math.ceil(alternativeRequests.count / limit)
        };
      }
    }
    
    return {
      photos: rows,
      total: count,
      page,
      totalPages: Math.ceil(count / limit)
    };
  }
}
