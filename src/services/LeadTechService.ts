// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è LeadTech Service
// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å LeadTech API

import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

export interface LeadTechAccount {
  id: number;
  currency: string;
  amount: number;
  amount_note: string;
  created_at: string;
  updated_at: string;
}

export interface LeadTechContact {
  id: number;
  telegram_id?: number;
  username?: string;
  first_name?: string;
  last_name?: string;
}

export interface LeadTechContactSearch {
  telegram_id?: number;
  username?: string;
  first_name?: string;
  last_name?: string;
}

export interface LeadTechAccountsResponse {
  data: LeadTechAccount[];
}


export class LeadTechService {
  private static readonly BASE_URL = 'https://app.leadteh.ru/api/v1';
  private static readonly API_TOKEN = process.env.LEADTECH_API_TOKEN;

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞
   */
  static async getContactAccounts(contactId: number): Promise<LeadTechAccount[]> {
    console.log('üí∞ [LeadTechService] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:', contactId);
    
    try {
      if (!this.API_TOKEN) {
        console.error('‚ùå LEADTECH_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã');
        return [];
      }

      const response = await axios.get<LeadTechAccountsResponse>(
        `${this.BASE_URL}/getContactAccounts`,
        {
          params: {
            contact_id: contactId
          },
          headers: {
            'Authorization': `Bearer ${this.API_TOKEN}`,
            'Content-Type': 'application/json'
          },
          timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        }
      );

      console.log('‚úÖ [LeadTechService] –ü–æ–ª—É—á–µ–Ω—ã —Å—á–µ—Ç–∞:', response.data.data);
      return response.data.data || [];
    } catch (error) {
      console.error('‚ùå [LeadTechService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤:', error);
      
      if (error instanceof Error && 'response' in error) {
        const axiosError = error as any;
        console.error('–°—Ç–∞—Ç—É—Å:', axiosError.response?.status);
        console.error('–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', axiosError.response?.data);
      }
      
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ)
   */
  static async getPrimaryAccount(contactId: number): Promise<LeadTechAccount | null> {
    console.log('üéØ [LeadTechService] –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:', contactId);
    
    const accounts = await this.getContactAccounts(contactId);
    
    if (accounts.length === 0) {
      console.log('‚ùå [LeadTechService] –°—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return null;
    }

    const primaryAccount = accounts[0];
    console.log('‚úÖ [LeadTechService] –û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç –Ω–∞–π–¥–µ–Ω:', primaryAccount);
    
    return primaryAccount;
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã –≤–∞–ª—é—Ç—ã (–∫–æ–ø–µ–π–∫–∏ -> —Ä—É–±–ª–∏)
   */
  static convertFromMinimalUnit(amount: number): number {
    return amount / 100;
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –µ–¥–∏–Ω–∏—Ü—É –≤–∞–ª—é—Ç—ã (—Ä—É–±–ª–∏ -> –∫–æ–ø–µ–π–∫–∏)
   */
  static convertToMinimalUnit(amount: number): number {
    return Math.round(amount * 100);
  }

  /**
   * –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —Å–æ —Å—á–µ—Ç–∞
   */
  static async withdrawFunds(params: {
    account_id: string;
    amount: number;
    description: string;
  }): Promise<boolean> {
    console.log('üí∏ [LeadTechService] –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤:', params);
    
    try {
      if (!this.API_TOKEN) {
        console.error('‚ùå LEADTECH_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã');
        return false;
      }

      const response = await axios.post(
        `${this.BASE_URL}/withdrawFundsFromContactAccount`,
        {
          account_id: params.account_id,
          amount: params.amount.toString(),
          description: params.description
        },
        {
          headers: {
            'Authorization': `Bearer ${this.API_TOKEN}`,
            'Content-Type': 'application/json'
          },
          timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        }
      );

      console.log('‚úÖ [LeadTechService] –°—Ä–µ–¥—Å—Ç–≤–∞ —Å–ø–∏—Å–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ:', response.data);
      return true;
    } catch (error) {
      console.error('‚ùå [LeadTechService] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤:', error);
      
      if (error instanceof Error && 'response' in error) {
        const axiosError = error as any;
        console.error('–°—Ç–∞—Ç—É—Å:', axiosError.response?.status);
        console.error('–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', axiosError.response?.data);
      }
      
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
   */
  static async getAccountBalance(contactId: number): Promise<number> {
    console.log('üí∞ [LeadTechService] –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:', contactId);
    
    const account = await this.getPrimaryAccount(contactId);
    
    if (!account) {
      console.log('‚ùå [LeadTechService] –û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return 0;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã –≤–∞–ª—é—Ç—ã
    const balance = this.convertFromMinimalUnit(account.amount);
    console.log('‚úÖ [LeadTechService] –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω:', balance);
    
    return balance;
  }
}
