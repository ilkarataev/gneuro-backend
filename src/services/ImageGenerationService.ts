import { GoogleGenAI } from '@google/genai';
import { Photo, ApiRequest } from '../models/index';
import { BalanceService } from './BalanceService';
import { PriceService } from './PriceService';
import { FileManagerService } from './FileManagerService';

export interface GenerateImageRequest {
  userId: number;
  telegramId: number;
  prompt: string;
  options?: {
    style?: string;
    size?: string;
    quality?: string;
  };
}

export interface GenerateImageResult {
  success: boolean;
  photoId?: number;
  imageUrl?: string;
  error?: string;
  cost?: number;
}

export class ImageGenerationService {
  private static readonly GEMINI_API_KEY = process.env.GEMINI_API_KEY || 'test_key';
  private static readonly MODULE_NAME = 'image_generate';

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  static async getGenerationCost(): Promise<number> {
    return await PriceService.getServicePrice('image_generate');
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  static async generateImage(request: GenerateImageRequest): Promise<GenerateImageResult> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î
      const generationCost = await this.getGenerationCost();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const canPay = await BalanceService.canDebitById(request.userId, generationCost);
      if (!canPay) {
        return { 
          success: false, 
          error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ',
          cost: generationCost
        };
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º Photo –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      const photo = await Photo.create({
        user_id: request.userId,
        original_url: '', // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        status: 'processing',
        request_params: JSON.stringify({
          prompt: request.prompt,
          ...request.options
        })
      });

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º API –∑–∞–ø—Ä–æ—Å
      const apiRequest = await ApiRequest.create({
        user_id: request.userId,
        api_name: 'image_generation',
        request_type: 'image_generate',
        prompt: request.prompt,
        request_data: JSON.stringify(request),
        status: 'processing',
        cost: generationCost
      });

      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const response = await this.callGeminiAPI(request.prompt, request.options, request.telegramId);
        
        if (response.success && response.imageUrl) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Ñ–æ—Ç–æ
          await photo.update({
            restored_url: response.imageUrl, // –í —Å–ª—É—á–∞–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º restored_url –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            status: 'completed',
            processing_time: new Date().getTime() - photo.createdAt.getTime()
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º API –∑–∞–ø—Ä–æ—Å
          await apiRequest.update({
            response_data: JSON.stringify(response),
            status: 'completed'
          });

          // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞
          await BalanceService.debitBalance({
            userId: request.userId,
            amount: generationCost,
            type: 'debit',
            description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
            referenceId: `photo_${photo.id}`
          });

          return {
            success: true,
            photoId: photo.id,
            imageUrl: response.imageUrl,
            cost: generationCost
          };
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
          await photo.update({
            status: 'failed',
            error_message: response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
          });

          await apiRequest.update({
            status: 'failed',
            response_data: JSON.stringify(response)
          });

          return { 
            success: false, 
            error: response.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
          };
        }
      } catch (error) {
        console.error('‚ùå [IMAGE_GEN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API:', error);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
        await photo.update({
          status: 'failed',
          error_message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        });

        await apiRequest.update({
          status: 'failed',
          response_data: JSON.stringify({ error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' })
        });

        return { 
          success: false, 
          error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
        };
      }
    } catch (error) {
      console.error('‚ùå [IMAGE_GEN] –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      };
    }
  }

  /**
   * –í—ã–∑–æ–≤ Gemini API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private static async callGeminiAPI(prompt: string, options?: any, telegramId?: number): Promise<{ success: boolean; imageUrl?: string; error?: string }> {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google GenAI
      const genai = new GoogleGenAI({ 
        apiKey: this.GEMINI_API_KEY
      });

      console.log('üé® [IMAGE_GEN] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API...');
      console.log('üé® [IMAGE_GEN] –ü—Ä–æ–º–ø—Ç:', prompt.substring(0, 100) + '...');
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout: –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª 3 –º–∏–Ω—É—Ç—ã')), 180000);
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const enhancedPrompt = this.enhancePrompt(prompt, options);

      const apiPromise = genai.models.generateContent({
        model: "gemini-2.5-flash-image-preview", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        contents: [{ text: enhancedPrompt }],
      });

      const response = await Promise.race([apiPromise, timeoutPromise]) as any;

      console.log('üé® [IMAGE_GEN] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API');
      console.log('üé® [IMAGE_GEN] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:', response.candidates?.length || 0);

      if (response.candidates && response.candidates.length > 0) {
        const candidate = response.candidates[0];
        if (!candidate.content || !candidate.content.parts) {
          console.log('‚ùå [IMAGE_GEN] –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç content.parts');
          return {
            success: false,
            error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API'
          };
        }

        console.log('üé® [IMAGE_GEN] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', candidate.content.parts.length);

        for (const part of candidate.content.parts) {
          if (part.inlineData && part.inlineData.data) {
            console.log('‚úÖ [IMAGE_GEN] –ù–∞–π–¥–µ–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, MIME:', part.inlineData.mimeType);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é FileManagerService
            if (telegramId) {
              const savedFile = FileManagerService.saveBase64File(
                part.inlineData.data,
                part.inlineData.mimeType || 'image/jpeg',
                telegramId,
                this.MODULE_NAME,
                'generated'
              );
              
              return {
                success: true,
                imageUrl: savedFile.url
              };
            }
            
            return {
              success: false,
              error: 'telegramId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
            };
          }
        }

        // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ
        console.log('‚ùå [IMAGE_GEN] –í –æ—Ç–≤–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
        return {
          success: false,
          error: 'API –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
        };
      } else {
        console.log('‚ùå [IMAGE_GEN] API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤');
        return {
          success: false,
          error: 'API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
        };
      }
    } catch (error) {
      console.error('‚ùå [IMAGE_GEN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API'
      };
    }
  }

  /**
   * –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  private static enhancePrompt(originalPrompt: string, options?: any): string {
    let enhancedPrompt = `Create a high-quality digital image: ${originalPrompt}`;
    
    if (options?.style) {
      enhancedPrompt += ` Style: ${options.style}.`;
    }
    
    if (options?.quality) {
      enhancedPrompt += ` Quality: ${options.quality}.`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
    enhancedPrompt += ' The image should be detailed, visually appealing, and professionally crafted.';
    
    return enhancedPrompt;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ –ø–æ ID
   */
  static async getImageById(photoId: number): Promise<Photo | null> {
    return await Photo.findByPk(photoId);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserImages(userId: number, limit: number = 50): Promise<Photo[]> {
    return await Photo.findAll({
      include: [{
        model: ApiRequest,
        where: { request_type: 'image_generate' }
      }],
      where: { user_id: userId },
      order: [['createdAt', 'DESC']],
      limit
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  static async checkImageStatus(photoId: number): Promise<Photo | null> {
    return await Photo.findByPk(photoId);
  }
}
