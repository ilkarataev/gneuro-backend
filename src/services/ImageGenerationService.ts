import { GoogleGenAI } from '@google/genai';
import { Photo, ApiRequest } from '../models/index';
import { BalanceService } from './BalanceService';
import { PriceService } from './PriceService';
import { FileManagerService } from './FileManagerService';
import { PromptService } from './PromptService';

export interface GenerateImageRequest {
  userId: number;
  telegramId: number;
  prompt: string;
  moduleName?: string;
  options?: {
    style?: string;
    size?: string;
    quality?: string;
  };
  adminRetry?: boolean; // –§–ª–∞–≥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –∞–¥–º–∏–Ω—Å–∫–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
}

export interface GenerateImageWithReferenceRequest {
  userId: number;
  telegramId: number;
  prompt: string;
  referenceImages: Express.Multer.File[];
  moduleName?: string;
  options?: {
    style?: string;
    size?: string;
    quality?: string;
  };
  adminRetry?: boolean; // –§–ª–∞–≥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –∞–¥–º–∏–Ω—Å–∫–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
}

export interface GenerateImageResult {
  success: boolean;
  photo_id?: number;
  processed_image_url?: string;
  original_prompt?: string;
  error?: string;
  message?: string;
  cost?: number;
}

export class ImageGenerationService {
  private static readonly GEMINI_API_KEY = process.env.GEMINI_API_KEY || 'test_key';
  private static readonly MODULE_NAME = 'image_generation';
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è retry –º–µ—Ö–∞–Ω–∏–∑–º–∞
  private static readonly MAX_RETRY_DURATION = parseInt(process.env.GEMINI_MAX_RETRY_DURATION || '180000'); // 3 –º–∏–Ω—É—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è UX)
  private static readonly INITIAL_RETRY_DELAY = parseInt(process.env.GEMINI_INITIAL_RETRY_DELAY || '1000'); // 1 —Å–µ–∫—É–Ω–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  private static readonly MAX_RETRY_DELAY = parseInt(process.env.GEMINI_MAX_RETRY_DELAY || '30000'); // 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  private static readonly BACKOFF_MULTIPLIER = parseFloat(process.env.GEMINI_BACKOFF_MULTIPLIER || '2'); // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  static async getGenerationCost(): Promise<number> {
    return await PriceService.getServicePrice('image_generate');
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
   */
  private static async executeWithRetry<T>(
    operation: () => Promise<T>,
    operationName: string
  ): Promise<T> {
    const startTime = Date.now();
    let attempt = 0;
    let lastError: Error | null = null;
    let totalDelayTime = 0;

    console.log(`üöÄ [RETRY] –ù–∞—á–∏–Ω–∞–µ–º ${operationName} —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º (–º–∞–∫—Å. –≤—Ä–µ–º—è: ${this.MAX_RETRY_DURATION}–º—Å)`);

    while (Date.now() - startTime < this.MAX_RETRY_DURATION) {
      attempt++;
      const attemptStartTime = Date.now();
      
      try {
        console.log(`üîÑ [RETRY] ${operationName} - –ø–æ–ø—ã—Ç–∫–∞ ${attempt} (–≤—Ä–µ–º—è —Å –Ω–∞—á–∞–ª–∞: ${Date.now() - startTime}–º—Å)`);
        const result = await operation();
        
        const attemptDuration = Date.now() - attemptStartTime;
        if (attempt > 1) {
          console.log(`‚úÖ [RETRY] ${operationName} - —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –ø–æ–ø—ã—Ç–∫–∏ ${attempt} –∑–∞ ${attemptDuration}–º—Å (–æ–±—â–µ–µ –≤—Ä–µ–º—è: ${Date.now() - startTime}–º—Å, –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–µ–∫: ${totalDelayTime}–º—Å)`);
        } else {
          console.log(`‚úÖ [RETRY] ${operationName} - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∑–∞ ${attemptDuration}–º—Å`);
        }
        
        return result;
      } catch (error) {
        lastError = error instanceof Error ? error : new Error(String(error));
        const attemptDuration = Date.now() - attemptStartTime;
        console.log(`‚ùå [RETRY] ${operationName} - –ø–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞ –∑–∞ ${attemptDuration}–º—Å:`, lastError.message);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–ø—ã—Ç–∫—É
        if (!this.isRetryableError(lastError)) {
          console.log(`üö´ [RETRY] ${operationName} - –æ—à–∏–±–∫–∞ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏`);
          throw lastError;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
        const delay = Math.min(
          this.INITIAL_RETRY_DELAY * Math.pow(this.BACKOFF_MULTIPLIER, attempt - 1),
          this.MAX_RETRY_DELAY
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–µ—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
        const remainingTime = this.MAX_RETRY_DURATION - (Date.now() - startTime);
        if (delay >= remainingTime) {
          console.log(`‚è∞ [RETRY] ${operationName} - –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ (–æ—Å—Ç–∞–ª–æ—Å—å ${remainingTime}–º—Å, –Ω—É–∂–Ω–æ ${delay}–º—Å)`);
          break;
        }

        console.log(`‚è≥ [RETRY] ${operationName} - –æ–∂–∏–¥–∞–Ω–∏–µ ${delay}–º—Å –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π ${attempt + 1} (–æ—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: ${remainingTime}–º—Å)`);
        await this.sleep(delay);
        totalDelayTime += delay;
      }
    }

    const totalDuration = Date.now() - startTime;
    console.log(`üí• [RETRY] ${operationName} - –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ–ø—ã—Ç–æ–∫: ${attempt}, –æ–±—â–µ–µ –≤—Ä–µ–º—è: ${totalDuration}–º—Å, –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–µ–∫: ${totalDelayTime}–º—Å`);
    throw lastError || new Error(`–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${operationName} –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∑–∞ ${totalDuration}–º—Å`);
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –ø–æ–¥–ª–µ–∂–∏—Ç –ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é
   */
  private static isRetryableError(error: Error): boolean {
    const retryableMessages = [
      'timeout',
      'network',
      'connection',
      'unavailable',
      'service unavailable',
      'internal server error',
      'bad gateway',
      'gateway timeout',
      'temporarily unavailable',
      'rate limit',
      'quota exceeded',
      'fetch failed',
      'socket hang up',
      'econnreset',
      'enotfound',
      'etimedout',
      'econnrefused',
      'server error',
      '503',
      '502',
      '504',
      '429', // Too Many Requests
      '500' // Internal Server Error
    ];

    const errorMessage = error.message.toLowerCase();
    const isRetryable = retryableMessages.some(msg => errorMessage.includes(msg));
    
    console.log(`üîç [RETRY] –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏: "${error.message}" - –ø–æ–¥–ª–µ–∂–∏—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é: ${isRetryable}`);
    
    return isRetryable;
  }

  /**
   * –ü–∞—É–∑–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
   */
  private static sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  static async generateImage(request: GenerateImageRequest): Promise<GenerateImageResult> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î
      const generationCost = await this.getGenerationCost();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const canPay = await BalanceService.canDebitById(request.userId, generationCost);
      if (!canPay) {
        return { 
          success: false, 
          error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ',
          cost: generationCost
        };
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º Photo –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      const photo = await Photo.create({
        user_id: request.userId,
        original_url: '', // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        status: 'processing',
        request_params: JSON.stringify({
          prompt: request.prompt,
          ...request.options
        })
      });

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º API –∑–∞–ø—Ä–æ—Å
      const apiRequest = await ApiRequest.create({
        user_id: request.userId,
        photo_id: photo.id, // –°–≤—è–∑—ã–≤–∞–µ–º —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Ñ–æ—Ç–æ
        api_name: 'image_generation',
        request_type: 'image_generate',
        prompt: request.prompt,
        request_data: JSON.stringify(request),
        status: 'processing',
        cost: generationCost
      });

      try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        console.log('üì∏ [IMAGE_GEN] –í—ã–∑—ã–≤–∞–µ–º Gemini API...');
        const moduleName = request.moduleName || this.MODULE_NAME;
        const response = await this.callGeminiAPI(request.prompt, request.options, request.telegramId, moduleName);
        
        if (response.success && response.imageUrl) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Ñ–æ—Ç–æ
          await photo.update({
            restored_url: response.imageUrl, // –í —Å–ª—É—á–∞–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º restored_url –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            status: 'completed',
            processing_time: new Date().getTime() - photo.createdAt.getTime()
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º API –∑–∞–ø—Ä–æ—Å
          await apiRequest.update({
            response_data: JSON.stringify(response),
            status: 'completed'
          });

          // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ –∞–¥–º–∏–Ω—Å–∫–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
          if (!request.adminRetry) {
            await BalanceService.debitBalance({
              userId: request.userId,
              amount: generationCost,
              type: 'debit',
              description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
              referenceId: `photo_${photo.id}`
            });
          } else {
            console.log('üîß [IMAGE_GEN] –ê–¥–º–∏–Ω—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞');
          }

          return {
            success: true,
            photo_id: photo.id,
            processed_image_url: response.imageUrl,
            original_prompt: request.prompt,
            cost: generationCost
          };
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
          await photo.update({
            status: 'failed',
            error_message: response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
          });

          await apiRequest.update({
            status: 'failed',
            response_data: JSON.stringify(response)
          });

          return { 
            success: false, 
            error: response.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
          };
        }
      } catch (error) {
        console.error('‚ùå [IMAGE_GEN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API:', error);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
        await photo.update({
          status: 'failed',
          error_message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        });

        await apiRequest.update({
          status: 'failed',
          response_data: JSON.stringify({ error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' })
        });

        return { 
          success: false, 
          error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
        };
      }
    } catch (error) {
      console.error('‚ùå [IMAGE_GEN] –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      };
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (img2img)
   */
  static async generateImageWithReference(request: GenerateImageWithReferenceRequest): Promise<GenerateImageResult> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î
      const generationCost = await this.getGenerationCost();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const canPay = await BalanceService.canDebitById(request.userId, generationCost);
      if (!canPay) {
        return { 
          success: false, 
          error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ',
          message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ',
          cost: generationCost
        };
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º Photo –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      const photo = await Photo.create({
        user_id: request.userId,
        original_url: '', // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        status: 'processing',
        request_params: JSON.stringify({
          prompt: request.prompt,
          referenceImagesCount: request.referenceImages.length,
          ...request.options
        })
      });

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º API –∑–∞–ø—Ä–æ—Å
      const apiRequest = await ApiRequest.create({
        user_id: request.userId,
        photo_id: photo.id, // –°–≤—è–∑—ã–≤–∞–µ–º —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Ñ–æ—Ç–æ
        api_name: 'image_generation_img2img',
        request_type: 'image_generate',
        prompt: request.prompt,
        request_data: JSON.stringify({
          ...request,
          referenceImages: request.referenceImages.map(f => f.filename) // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        }),
        status: 'processing',
        cost: generationCost
      });

      try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        console.log('üì∏ [IMAGE_GEN_IMG2IMG] –í—ã–∑—ã–≤–∞–µ–º Gemini API...');
        const moduleName = request.moduleName || 'image_generation_img2img';
        const response = await this.callGeminiAPIWithReference(
          request.prompt, 
          request.referenceImages, 
          request.options, 
          request.telegramId, 
          moduleName
        );
        
        if (response.success && response.imageUrl) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Ñ–æ—Ç–æ
          await photo.update({
            restored_url: response.imageUrl, // –í —Å–ª—É—á–∞–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º restored_url –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            status: 'completed',
            processing_time: new Date().getTime() - photo.createdAt.getTime()
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º API –∑–∞–ø—Ä–æ—Å
          await apiRequest.update({
            response_data: JSON.stringify(response),
            status: 'completed'
          });

          // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ –∞–¥–º–∏–Ω—Å–∫–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
          if (!request.adminRetry) {
            await BalanceService.debitBalance({
              userId: request.userId,
              amount: generationCost,
              type: 'debit',
              description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º',
              referenceId: `photo_${photo.id}`
            });
          } else {
            console.log('üîß [IMAGE_GEN_REF] –ê–¥–º–∏–Ω—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞');
          }

          return {
            success: true,
            photo_id: photo.id,
            processed_image_url: response.imageUrl,
            original_prompt: request.prompt,
            cost: generationCost
          };
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
          await photo.update({
            status: 'failed',
            error_message: response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
          });

          await apiRequest.update({
            status: 'failed',
            response_data: JSON.stringify(response)
          });

          return { 
            success: false, 
            error: response.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
            message: response.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
          };
        }
      } catch (error) {
        console.error('‚ùå [IMAGE_GEN_IMG2IMG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API:', error);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
        await photo.update({
          status: 'failed',
          error_message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        });

        await apiRequest.update({
          status: 'failed',
          response_data: JSON.stringify({ error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' })
        });

        return { 
          success: false, 
          error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
          message: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
        };
      }
    } catch (error) {
      console.error('‚ùå [IMAGE_GEN_IMG2IMG] –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: error instanceof Error ? error.message : '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      };
    }
  }

  /**
   * –í—ã–∑–æ–≤ Gemini API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private static async callGeminiAPI(prompt: string, options?: any, telegramId?: number, moduleName?: string): Promise<{ success: boolean; imageUrl?: string; error?: string }> {
    try {
      const result = await this.executeWithRetry(async () => {
        return await this.performGeminiAPICall(prompt, options, telegramId, moduleName);
      }, 'Gemini API Image Generation');

      return result;
    } catch (error) {
      console.error('‚ùå [IMAGE_GEN] –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API'
      };
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ Gemini API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private static async performGeminiAPICall(prompt: string, options?: any, telegramId?: number, moduleName?: string): Promise<{ success: boolean; imageUrl?: string; error?: string }> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google GenAI
    const genai = new GoogleGenAI({ 
      apiKey: this.GEMINI_API_KEY
    });

    console.log('üé® [IMAGE_GEN] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API...');
    console.log('üé® [IMAGE_GEN] –ü—Ä–æ–º–ø—Ç:', prompt.substring(0, 100) + '...');
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (3 –º–∏–Ω—É—Ç—ã)
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Timeout: –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª 3 –º–∏–Ω—É—Ç—ã')), 180000);
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const enhancedPrompt = await this.enhancePrompt(prompt, options);

    const apiPromise = genai.models.generateContent({
      model: "gemini-2.5-flash-image-preview", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      contents: [{ text: enhancedPrompt }],
    });

    const response = await Promise.race([apiPromise, timeoutPromise]) as any;

    console.log('üé® [IMAGE_GEN] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API');
    console.log('üé® [IMAGE_GEN] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:', response.candidates?.length || 0);

    if (response.candidates && response.candidates.length > 0) {
      const candidate = response.candidates[0];
      if (!candidate.content || !candidate.content.parts) {
        console.log('‚ùå [IMAGE_GEN] –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç content.parts');
        throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API');
      }

      console.log('üé® [IMAGE_GEN] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', candidate.content.parts.length);

      for (const part of candidate.content.parts) {
        if (part.inlineData && part.inlineData.data) {
          console.log('‚úÖ [IMAGE_GEN] –ù–∞–π–¥–µ–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, MIME:', part.inlineData.mimeType);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é FileManagerService
          if (telegramId) {
            const finalModuleName = moduleName || this.MODULE_NAME;
            const savedFile = FileManagerService.saveBase64File(
              part.inlineData.data,
              part.inlineData.mimeType || 'image/jpeg',
              telegramId,
              finalModuleName,
              'generated'
            );
            
            return {
              success: true,
              imageUrl: savedFile.url
            };
          }
          
          throw new Error('telegramId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        }
      }

      // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ
      console.log('‚ùå [IMAGE_GEN] –í –æ—Ç–≤–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      throw new Error('API –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    } else {
      console.log('‚ùå [IMAGE_GEN] API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤');
      throw new Error('API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
    }
  }

  /**
   * –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  private static async enhancePrompt(originalPrompt: string, options?: any): Promise<string> {
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∏–ª—è –∏ –∫–∞—á–µ—Å—Ç–≤–∞
      let styleModifier = '';
      let qualityModifier = '';

      if (options?.style) {
        styleModifier = `Style: ${options.style}.`;
      }
      
      if (options?.quality) {
        qualityModifier = `Quality: ${options.quality}.`;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const enhancedPrompt = await PromptService.getPrompt('image_generation_base', {
        originalPrompt,
        styleModifier,
        qualityModifier
      });

      return enhancedPrompt;
    } catch (error) {
      console.error('‚ùå [IMAGE_GEN] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π:', error);
      
      // –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π
      let enhancedPrompt = `Create a high-quality digital image: ${originalPrompt}`;
      
      if (options?.style) {
        enhancedPrompt += ` Style: ${options.style}.`;
      }
      
      if (options?.quality) {
        enhancedPrompt += ` Quality: ${options.quality}.`;
      }
      
      enhancedPrompt += ' The image should be detailed, visually appealing, and professionally crafted.';
      
      return enhancedPrompt;
    }
  }

  /**
   * –í—ã–∑–æ–≤ Gemini API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (img2img)
   */
  private static async callGeminiAPIWithReference(
    prompt: string, 
    referenceImages: Express.Multer.File[], 
    options?: any, 
    telegramId?: number, 
    moduleName?: string
  ): Promise<{ success: boolean; imageUrl?: string; error?: string }> {
    try {
      const result = await this.executeWithRetry(async () => {
        return await this.performGeminiAPICallWithReference(prompt, referenceImages, options, telegramId, moduleName);
      }, 'Gemini API Image Generation with Reference');

      return result;
    } catch (error) {
      console.error('‚ùå [IMAGE_GEN_IMG2IMG] –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API'
      };
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ Gemini API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º
   */
  private static async performGeminiAPICallWithReference(
    prompt: string, 
    referenceImages: Express.Multer.File[], 
    options?: any, 
    telegramId?: number, 
    moduleName?: string
  ): Promise<{ success: boolean; imageUrl?: string; error?: string }> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google GenAI
    const genai = new GoogleGenAI({ 
      apiKey: this.GEMINI_API_KEY
    });

    console.log('üé® [IMAGE_GEN_IMG2IMG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API...');
    console.log('üé® [IMAGE_GEN_IMG2IMG] –ü—Ä–æ–º–ø—Ç:', prompt.substring(0, 100) + '...');
    console.log('üé® [IMAGE_GEN_IMG2IMG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', referenceImages.length);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (3 –º–∏–Ω—É—Ç—ã)
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Timeout: –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª 3 –º–∏–Ω—É—Ç—ã')), 180000);
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è img2img –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const enhancedPrompt = await this.enhanceImg2ImgPrompt(prompt, options);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    const fs = require('fs');
    const contents: any[] = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º referencer –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for (const refImage of referenceImages) {
      const imageData = fs.readFileSync(refImage.path);
      const base64Image = imageData.toString('base64');
      
      contents.push({
        inlineData: {
          data: base64Image,
          mimeType: refImage.mimetype
        }
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
    contents.push({ text: enhancedPrompt });

    const apiPromise = genai.models.generateContent({
      model: "gemini-2.5-flash-image-preview", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      contents: [{ parts: contents }],
    });

    const response = await Promise.race([apiPromise, timeoutPromise]) as any;

    console.log('üé® [IMAGE_GEN_IMG2IMG] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API');
    console.log('üé® [IMAGE_GEN_IMG2IMG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:', response.candidates?.length || 0);

    if (response.candidates && response.candidates.length > 0) {
      const candidate = response.candidates[0];
      if (!candidate.content || !candidate.content.parts) {
        console.log('‚ùå [IMAGE_GEN_IMG2IMG] –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç content.parts');
        throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API');
      }

      console.log('üé® [IMAGE_GEN_IMG2IMG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', candidate.content.parts.length);

      for (const part of candidate.content.parts) {
        if (part.inlineData && part.inlineData.data) {
          console.log('‚úÖ [IMAGE_GEN_IMG2IMG] –ù–∞–π–¥–µ–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, MIME:', part.inlineData.mimeType);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é FileManagerService
          if (telegramId) {
            const finalModuleName = moduleName || 'image_generation_img2img';
            const savedFile = FileManagerService.saveBase64File(
              part.inlineData.data,
              part.inlineData.mimeType || 'image/jpeg',
              telegramId,
              finalModuleName,
              'generated'
            );
            
            return {
              success: true,
              imageUrl: savedFile.url
            };
          }
          
          throw new Error('telegramId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        }
      }

      // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ
      console.log('‚ùå [IMAGE_GEN_IMG2IMG] –í –æ—Ç–≤–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      throw new Error('API –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    } else {
      console.log('‚ùå [IMAGE_GEN_IMG2IMG] API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤');
      throw new Error('API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
    }
  }

  /**
   * –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è img2img –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  private static async enhanceImg2ImgPrompt(originalPrompt: string, options?: any): Promise<string> {
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∏–ª—è –∏ –∫–∞—á–µ—Å—Ç–≤–∞
      let styleModifier = '';
      let qualityModifier = '';

      if (options?.style) {
        styleModifier = `Apply style: ${options.style}.`;
      }
      
      if (options?.quality) {
        qualityModifier = `Quality: ${options.quality}.`;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const enhancedPrompt = await PromptService.getPrompt('image_generation_img2img', {
        originalPrompt,
        styleModifier,
        qualityModifier
      });

      return enhancedPrompt;
    } catch (error) {
      console.error('‚ùå [IMAGE_GEN_IMG2IMG] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π:', error);
      
      // –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π
      let enhancedPrompt = `Transform the uploaded image(s) as follows: ${originalPrompt}`;
      
      if (options?.style) {
        enhancedPrompt += ` Apply style: ${options.style}.`;
      }
      
      if (options?.quality) {
        enhancedPrompt += ` Quality: ${options.quality}.`;
      }
      
      enhancedPrompt += ' Maintain the original composition and key elements while applying the requested changes. The result should be detailed, visually appealing, and professionally crafted.';
      
      return enhancedPrompt;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ –ø–æ ID
   */
  static async getImageById(photoId: number): Promise<Photo | null> {
    return await Photo.findByPk(photoId);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserImages(userId: number, limit: number = 50): Promise<Photo[]> {
    return await Photo.findAll({
      include: [{
        model: ApiRequest,
        as: 'requests',
        where: { request_type: 'image_generate' }
      }],
      where: { user_id: userId },
      order: [['createdAt', 'DESC']],
      limit
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  static async checkImageStatus(photoId: number): Promise<Photo | null> {
    return await Photo.findByPk(photoId);
  }
}
