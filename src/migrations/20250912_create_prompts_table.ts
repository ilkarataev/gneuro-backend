import { QueryInterface, DataTypes } from 'sequelize';

export const up = async (queryInterface: QueryInterface): Promise<void> => {
  console.log('üîÑ [MIGRATION] –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É prompts...');
  
  await queryInterface.createTable('prompts', {
    id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true,
    },
    key: {
      type: DataTypes.STRING(100),
      allowNull: false,
      unique: true,
      comment: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ'
    },
    name: {
      type: DataTypes.STRING(255),
      allowNull: false,
      comment: '–ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞'
    },
    description: {
      type: DataTypes.TEXT,
      allowNull: true,
      comment: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞'
    },
    content: {
      type: DataTypes.TEXT,
      allowNull: false,
      comment: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞'
    },
    category: {
      type: DataTypes.STRING(50),
      allowNull: false,
      defaultValue: 'general',
      comment: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–º–ø—Ç–∞ (image_generation, restoration, stylization, etc.)'
    },
    variables: {
      type: DataTypes.JSON,
      allowNull: true,
      comment: 'JSON –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–º–ø—Ç–µ: {"originalPrompt": "string", "style": "string"}'
    },
    is_active: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: true,
      comment: '–ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ–º–ø—Ç'
    },
    created_by: {
      type: DataTypes.INTEGER,
      allowNull: true,
      comment: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –ø—Ä–æ–º–ø—Ç'
    },
    version: {
      type: DataTypes.INTEGER,
      allowNull: false,
      defaultValue: 1,
      comment: '–í–µ—Ä—Å–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π'
    },
    createdAt: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    updatedAt: {
      type: DataTypes.DATE,
      allowNull: false,
    },
  });

  // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
  await queryInterface.addIndex('prompts', ['key'], {
    name: 'idx_prompts_key'
  });
  
  await queryInterface.addIndex('prompts', ['category'], {
    name: 'idx_prompts_category'
  });
  
  await queryInterface.addIndex('prompts', ['is_active'], {
    name: 'idx_prompts_is_active'
  });

  console.log('‚úÖ [MIGRATION] –¢–∞–±–ª–∏—Ü–∞ prompts —Å–æ–∑–¥–∞–Ω–∞');
};

export const down = async (queryInterface: QueryInterface): Promise<void> => {
  console.log('üîÑ [MIGRATION] –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É prompts...');
  await queryInterface.dropTable('prompts');
  console.log('‚úÖ [MIGRATION] –¢–∞–±–ª–∏—Ü–∞ prompts —É–¥–∞–ª–µ–Ω–∞');
};
