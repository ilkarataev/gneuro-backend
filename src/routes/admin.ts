import express, { Request, Response } from 'express';
import { Op } from 'sequelize';
import { ApiRequest, Photo, User } from '../models/index';
import { PhotoRestorationService } from '../services/PhotoRestorationService';
import { PhotoStylizationService } from '../services/PhotoStylizationService';
import { EraStyleService } from '../services/EraStyleService';
import { PoetStyleService } from '../services/PoetStyleService';
import { ImageGenerationService } from '../services/ImageGenerationService';

const router = express.Router();

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
const requireAdmin = async (req: Request, res: Response, next: Function) => {
  try {
    // –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ userId –≤ query, –¥–ª—è POST - –≤ body
    const userId = req.method === 'GET' ? req.query.userId : req.body.userId;
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }

    const user = await User.findByPk(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    if (!user.is_admin) {
      return res.status(403).json({
        success: false,
        error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
      });
    }

    next();
  } catch (error) {
    console.error('‚ùå [ADMIN] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
router.get('/api-requests', requireAdmin, async (req: Request, res: Response) => {
  try {
    const { page = 1, limit = 20, status, request_type } = req.query;
    const offset = (Number(page) - 1) * Number(limit);

    const whereClause: any = {};
    if (status) whereClause.status = status;
    if (request_type) whereClause.request_type = request_type;

    const { count, rows } = await ApiRequest.findAndCountAll({
      where: whereClause,
      order: [['createdAt', 'DESC']],
      limit: Number(limit),
      offset,
      include: [{
        model: Photo,
        as: 'photo',
        required: false
      }]
    });

    res.json({
      success: true,
      data: {
        requests: rows,
        pagination: {
          total: count,
          page: Number(page),
          limit: Number(limit),
          totalPages: Math.ceil(count / Number(limit))
        }
      }
    });
  } catch (error) {
    console.error('‚ùå [ADMIN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ API –∑–∞–ø—Ä–æ—Å–∞
 */
router.get('/api-requests/:id', requireAdmin, async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    
    const apiRequest = await ApiRequest.findByPk(id, {
      include: [{
        model: Photo,
        as: 'photo',
        required: false
      }]
    });

    if (!apiRequest) {
      return res.status(404).json({
        success: false,
        error: 'API –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.json({
      success: true,
      data: apiRequest
    });
  } catch (error) {
    console.error('‚ùå [ADMIN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π API –∑–∞–ø—Ä–æ—Å–∞:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–≤–∏—Å—à—É—é –∑–∞–¥–∞—á—É
 */
router.post('/stuck-tasks/:id/restart', requireAdmin, async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000);
    
    const stuckTask = await ApiRequest.findOne({
      where: {
        id: id,
        status: 'processing',
        updatedAt: {
          [Op.lt]: tenMinutesAgo
        }
      }
    });

    if (!stuckTask) {
      return res.status(404).json({
        success: false,
        error: '–ó–∞–≤–∏—Å—à–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º (processing –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç)'
      });
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed
    await stuckTask.update({
      status: 'failed',
      error_message: '–ó–∞–¥–∞—á–∞ –∑–∞–≤–∏—Å–ª–∞ –∏ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
      completed_date: new Date()
    });

    // –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º retry
    const requestData = JSON.parse(stuckTask.request_data || '{}');
    const user = await User.findByPk(stuckTask.user_id);
    const telegramId = user?.telegram_id || requestData.telegramId;

    let result;
    const adminRetry = true;

    switch (stuckTask.request_type) {
      case 'photo_restore':
        result = await PhotoRestorationService.restorePhoto({
          userId: stuckTask.user_id,
          telegramId: telegramId,
          moduleName: requestData.moduleName,
          imageUrl: requestData.imageUrl,
          options: requestData.options,
          adminRetry
        });
        break;

      case 'photo_stylize':
        result = await PhotoStylizationService.stylizePhoto({
          userId: stuckTask.user_id,
          telegramId: telegramId,
          imageUrl: requestData.imageUrl,
          localPath: requestData.localPath,
          styleId: requestData.styleId,
          prompt: requestData.prompt,
          originalFilename: requestData.originalFilename,
          adminRetry
        });
        break;

      case 'era_style':
        result = await EraStyleService.stylePhotoByEra({
          userId: stuckTask.user_id,
          telegramId: telegramId,
          imageUrl: requestData.imageUrl,
          eraId: requestData.eraId,
          prompt: requestData.prompt,
          originalFilename: requestData.originalFilename,
          adminRetry
        });
        break;

      case 'poet_style':
        result = await PoetStyleService.stylePhotoWithPoet({
          userId: stuckTask.user_id,
          telegramId: telegramId,
          imageUrl: requestData.imageUrl,
          localPath: requestData.localPath,
          poetId: requestData.poetId,
          prompt: requestData.prompt,
          originalFilename: requestData.originalFilename,
          adminRetry
        });
        break;

      case 'image_generate':
        result = await ImageGenerationService.generateImage({
          userId: stuckTask.user_id,
          telegramId: telegramId,
          prompt: requestData.prompt,
          moduleName: requestData.moduleName,
          options: requestData.options || {},
          adminRetry
        });
        break;

      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: ${stuckTask.request_type}`);
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π API –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    const newApiRequest = await ApiRequest.create({
      user_id: stuckTask.user_id,
      photo_id: stuckTask.photo_id,
      api_name: stuckTask.api_name,
      request_type: stuckTask.request_type,
      request_data: stuckTask.request_data,
      prompt: stuckTask.prompt,
      status: 'completed',
      cost: stuckTask.cost,
      response_data: JSON.stringify(result),
      completed_date: new Date()
    });

    res.json({
      success: true,
      message: '–ó–∞–≤–∏—Å—à–∞—è –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      data: {
        oldTaskId: stuckTask.id,
        newTaskId: newApiRequest.id,
        result
      }
    });

  } catch (error) {
    console.error('‚ùå [ADMIN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∑–∞–≤–∏—Å—à–µ–π –∑–∞–¥–∞—á–∏:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É API –∑–∞–ø—Ä–æ—Å–∞
 */
router.post('/api-requests/:id/retry', requireAdmin, async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    
    const apiRequest = await ApiRequest.findByPk(id);
    if (!apiRequest) {
      return res.status(404).json({
        success: false,
        error: 'API –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ processing
    await apiRequest.update({
      status: 'processing',
      error_message: undefined,
      completed_date: undefined
    });

    console.log(`üîÑ [ADMIN] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ ${id} —Ç–∏–ø–∞ ${apiRequest.request_type}`);

    try {
      let result;
      const requestData = JSON.parse(apiRequest.request_data || '{}');
      
      // –ü–æ–ª—É—á–∞–µ–º telegramId –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findByPk(apiRequest.user_id);
      const telegramId = user?.telegram_id || requestData.telegramId;

      // –§–ª–∞–≥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –∞–¥–º–∏–Ω—Å–∫–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
      const adminRetry = true;

      switch (apiRequest.request_type) {
        case 'photo_restore':
          result = await PhotoRestorationService.restorePhoto({
            userId: apiRequest.user_id,
            telegramId: telegramId,
            moduleName: requestData.moduleName,
            imageUrl: requestData.imageUrl,
            options: requestData.options,
            adminRetry
          });
          break;

        case 'photo_stylize':
          result = await PhotoStylizationService.stylizePhoto({
            userId: apiRequest.user_id,
            telegramId: telegramId,
            imageUrl: requestData.imageUrl,
            localPath: requestData.localPath,
            styleId: requestData.styleId,
            prompt: requestData.prompt,
            originalFilename: requestData.originalFilename,
            adminRetry
          });
          break;

        case 'era_style':
          result = await EraStyleService.stylePhotoByEra({
            userId: apiRequest.user_id,
            telegramId: telegramId,
            imageUrl: requestData.imageUrl,
            eraId: requestData.eraId,
            prompt: requestData.prompt,
            originalFilename: requestData.originalFilename,
            adminRetry
          });
          break;

        case 'poet_style':
          result = await PoetStyleService.stylePhotoWithPoet({
            userId: apiRequest.user_id,
            telegramId: telegramId,
            imageUrl: requestData.imageUrl,
            localPath: requestData.localPath,
            poetId: requestData.poetId,
            prompt: requestData.prompt,
            originalFilename: requestData.originalFilename,
            adminRetry
          });
          break;

        case 'image_generate':
          result = await ImageGenerationService.generateImage({
            userId: apiRequest.user_id,
            telegramId: telegramId,
            prompt: requestData.prompt,
            moduleName: requestData.moduleName,
            options: requestData.options || {},
            adminRetry
          });
          break;

        default:
          throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: ${apiRequest.request_type}`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ completed
      await apiRequest.update({
        status: 'completed',
        response_data: JSON.stringify(result),
        completed_date: new Date()
      });

      res.json({
        success: true,
        message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        result
      });

    } catch (processingError) {
      const errorMessage = processingError instanceof Error ? processingError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      
      await apiRequest.update({
        status: 'failed',
        error_message: errorMessage,
        completed_date: new Date()
      });

      res.json({
        success: false,
        error: errorMessage
      });
    }

  } catch (error) {
    console.error('‚ùå [ADMIN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á (processing –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç)
 */
router.get('/stuck-tasks', requireAdmin, async (req: Request, res: Response) => {
  try {
    const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000);
    
    const stuckTasks = await ApiRequest.findAll({
      where: {
        status: 'processing',
        updatedAt: {
          [Op.lt]: tenMinutesAgo
        }
      },
      order: [['updatedAt', 'ASC']],
      include: [{
        model: Photo,
        as: 'photo',
        required: false
      }]
    });

    res.json({
      success: true,
      data: {
        stuckTasks,
        count: stuckTasks.length,
        threshold: '10 –º–∏–Ω—É—Ç'
      }
    });
  } catch (error) {
    console.error('‚ùå [ADMIN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á (–ø–æ–º–µ—á–∞–µ—Ç –∫–∞–∫ failed)
 */
router.post('/stuck-tasks/auto-cleanup', requireAdmin, async (req: Request, res: Response) => {
  try {
    const { thresholdMinutes = 10 } = req.body;
    const thresholdTime = new Date(Date.now() - thresholdMinutes * 60 * 1000);
    
    const stuckTasks = await ApiRequest.findAll({
      where: {
        status: 'processing',
        updatedAt: {
          [Op.lt]: thresholdTime
        }
      }
    });

    if (stuckTasks.length === 0) {
      return res.json({
        success: true,
        message: '–ó–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        cleaned: 0
      });
    }

    const results = [];
    let successCount = 0;
    let errorCount = 0;

    for (const task of stuckTasks) {
      try {
        await task.update({
          status: 'failed',
          error_message: `–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª–µ–µ ${thresholdMinutes} –º–∏–Ω—É—Ç)`,
          completed_date: new Date()
        });

        results.push({
          id: task.id,
          request_type: task.request_type,
          updatedAt: task.updatedAt,
          status: 'cleaned'
        });
        successCount++;
      } catch (error) {
        console.error(`‚ùå [ADMIN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–≤–∏—Å—à–µ–π –∑–∞–¥–∞—á–∏ ${task.id}:`, error);
        results.push({
          id: task.id,
          request_type: task.request_type,
          status: 'error',
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        });
        errorCount++;
      }
    }

    console.log(`üßπ [ADMIN] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${stuckTasks.length} –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á`);

    res.json({
      success: true,
      message: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω–æ ${successCount} –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á`,
      data: {
        total: stuckTasks.length,
        cleaned: successCount,
        errors: errorCount,
        thresholdMinutes,
        results
      }
    });

  } catch (error) {
    console.error('‚ùå [ADMIN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–≤–∏—Å—à–∏–µ –∑–∞–¥–∞—á–∏
 */
router.post('/stuck-tasks/restart-all', requireAdmin, async (req: Request, res: Response) => {
  try {
    const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000);
    
    const stuckTasks = await ApiRequest.findAll({
      where: {
        status: 'processing',
        updatedAt: {
          [Op.lt]: tenMinutesAgo
        }
      }
    });

    if (stuckTasks.length === 0) {
      return res.json({
        success: true,
        message: '–ó–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        restarted: 0
      });
    }

    const results = [];
    let successCount = 0;
    let errorCount = 0;

    for (const task of stuckTasks) {
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed —Å –ø–æ–º–µ—Ç–∫–æ–π –æ –∑–∞–≤–∏—Å–∞–Ω–∏–∏
        await task.update({
          status: 'failed',
          error_message: '–ó–∞–¥–∞—á–∞ –∑–∞–≤–∏—Å–ª–∞ –∏ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç)',
          completed_date: new Date()
        });

        results.push({
          id: task.id,
          request_type: task.request_type,
          status: 'marked_as_failed',
          message: '–ó–∞–¥–∞—á–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ failed'
        });
        successCount++;
      } catch (error) {
        console.error(`‚ùå [ADMIN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≤–∏—Å—à–µ–π –∑–∞–¥–∞—á–∏ ${task.id}:`, error);
        results.push({
          id: task.id,
          request_type: task.request_type,
          status: 'error',
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        });
        errorCount++;
      }
    }

    res.json({
      success: true,
      message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${stuckTasks.length} –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á`,
      data: {
        total: stuckTasks.length,
        success: successCount,
        errors: errorCount,
        results
      }
    });

  } catch (error) {
    console.error('‚ùå [ADMIN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É API –∑–∞–ø—Ä–æ—Å–æ–≤
 */
router.get('/stats', requireAdmin, async (req: Request, res: Response) => {
  try {
    const totalRequests = await ApiRequest.count();
    const completedRequests = await ApiRequest.count({ where: { status: 'completed' } });
    const failedRequests = await ApiRequest.count({ where: { status: 'failed' } });
    const processingRequests = await ApiRequest.count({ where: { status: 'processing' } });
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ –∑–∞–¥–∞—á–∏ (processing –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç)
    const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000);
    const stuckRequests = await ApiRequest.count({
      where: {
        status: 'processing',
        updatedAt: {
          [Op.lt]: tenMinutesAgo
        }
      }
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤
    const requestsByType = await ApiRequest.findAll({
      attributes: [
        'request_type',
        [ApiRequest.sequelize!.fn('COUNT', ApiRequest.sequelize!.col('id')), 'count']
      ],
      group: ['request_type'],
      raw: true
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const requestsByStatus = await ApiRequest.findAll({
      attributes: [
        'status',
        [ApiRequest.sequelize!.fn('COUNT', ApiRequest.sequelize!.col('id')), 'count']
      ],
      group: ['status'],
      raw: true
    });

    res.json({
      success: true,
      data: {
        total: totalRequests,
        completed: completedRequests,
        failed: failedRequests,
        processing: processingRequests,
        stuck: stuckRequests,
        byType: requestsByType,
        byStatus: requestsByStatus
      }
    });
  } catch (error) {
    console.error('‚ùå [ADMIN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

export default router;
