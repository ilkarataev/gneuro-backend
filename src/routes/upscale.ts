import express, { Request, Response } from 'express';
import { imageUpscaleService, ImageUpscaleRequest } from '../services/ImageUpscaleService';
import { PriceService } from '../services/PriceService';
import { BalanceService } from '../services/BalanceService';
import fs from 'fs';
import path from 'path';

const router = express.Router();

interface UpscaleRequestBody {
  image: string; // base64 –∏–ª–∏ URL
  scale_factor: number;
  original_width: number;
  original_height: number;
  user_id: number;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
router.get('/price', async (req: Request, res: Response) => {
  try {
    const { original_width, original_height, scale_factor } = req.query;

    if (!original_width || !original_height || !scale_factor) {
      return res.status(400).json({
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: original_width, original_height, scale_factor'
      });
    }

    const width = parseInt(original_width as string);
    const height = parseInt(original_height as string);
    const factor = parseFloat(scale_factor as string);

    const priceService = new PriceService();
    const price = await PriceService.getUpscalePrice(width, height, factor);

    if (price !== null) {
      res.json({ price });
    } else {
      res.status(404).json({ error: '–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤' });
    }
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message 
    });
  }
});

/**
 * –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
router.post('/upscale', async (req: Request, res: Response) => {
  try {
    const { image, scale_factor, original_width, original_height, user_id }: UpscaleRequestBody = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!image || !scale_factor || !original_width || !original_height || !user_id) {
      return res.status(400).json({
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: image, scale_factor, original_width, original_height, user_id'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const priceService = new PriceService();
    const price = await PriceService.getUpscalePrice(original_width, original_height, scale_factor);

    if (price === null) {
      return res.status(400).json({
        error: '–¶–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const balanceService = new BalanceService();
    const balance = await BalanceService.getBalance(user_id);

    if (balance < price) {
      return res.status(400).json({
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ',
        required: price,
        current: balance
      });
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–≤–µ–ª–∏—á–µ–Ω–∏—è
    const request: ImageUpscaleRequest = {
      image,
      scale_factor,
      original_width,
      original_height
    };

    const result = await imageUpscaleService.upscaleImage(request);

    if (result.status === 'FAILED') {
      return res.status(500).json({
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–≤–µ–ª–∏—á–µ–Ω–∏—è',
        details: result.error
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    // TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î:', {
      user_id,
      task_id: result.task_id,
      original_width,
      original_height,
      scale_factor,
      price
    });

    res.json({
      task_id: result.task_id,
      status: result.status,
      price: price
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message 
    });
  }
});

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è
 */
router.get('/status/:taskId', async (req: Request, res: Response) => {
  try {
    const { taskId } = req.params;

    if (!taskId) {
      return res.status(400).json({ error: 'task_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const status = await imageUpscaleService.checkUpscaleStatus(taskId);

    if (status.status === 'COMPLETED' && status.generated && status.generated.length > 0) {
      // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞
      // TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î
      const imageUrl = status.generated[0];
      
      res.json({
        status: status.status,
        image_url: `/api/upscale/download?url=${encodeURIComponent(imageUrl)}`,
        task_id: taskId
      });
    } else {
      res.json({
        status: status.status,
        task_id: taskId,
        error: status.error
      });
    }

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message 
    });
  }
});

/**
 * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
router.get('/download', async (req: Request, res: Response) => {
  try {
    const { url } = req.query;

    if (!url || typeof url !== 'string') {
      return res.status(400).json({ error: 'URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const imageBuffer = await imageUpscaleService.downloadImage(url);

    if (!imageBuffer) {
      return res.status(404).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const contentType = url.includes('.png') ? 'image/png' : 
                       url.includes('.jpg') || url.includes('.jpeg') ? 'image/jpeg' : 
                       'image/png';

    res.set({
      'Content-Type': contentType,
      'Content-Length': imageBuffer.length.toString(),
      'Cache-Control': 'public, max-age=31536000' // –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ –≥–æ–¥
    });

    res.send(imageBuffer);

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
      details: error.message 
    });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.get('/history/:userId', async (req: Request, res: Response) => {
  try {
    const { userId } = req.params;

    if (!userId) {
      return res.status(400).json({ error: 'user_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    // TODO: –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î
    console.log('üìã –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    res.json({
      user_id: parseInt(userId),
      images: []
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message 
    });
  }
});

export default router;
