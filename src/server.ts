import express, { Request, Response, NextFunction } from 'express';
import cors from 'cors';
import multer, { MulterError } from 'multer';
import path from 'path';
import { validate, parse } from '@telegram-apps/init-data-node';
import { PhotoRestorationService } from './services/PhotoRestorationService';
import { BalanceService } from './services/BalanceService';
import pricesRouter from './routes/prices';
import webhookRouter from './routes/webhook';

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø Request –¥–ª—è multer
interface MulterRequest extends Request {
  file?: Express.Multer.File;
}

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É uploads
    const uploadDir = 'uploads/temp/';
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!require('fs').existsSync(uploadDir)) {
      require('fs').mkdirSync(uploadDir, { recursive: true });
      console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞:', uploadDir);
    }
    
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ 
  storage: storage,
  fileFilter: (req, file, cb) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(null, false); // –û—Ç–∫–ª–æ–Ω—è–µ–º —Ñ–∞–π–ª –±–µ–∑ –æ—à–∏–±–∫–∏
    }
  },
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB –º–∞–∫—Å–∏–º—É–º
  }
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã - –æ—Ç–¥–∞–µ–º —á–µ—Ä–µ–∑ /api/uploads/
app.use('/api/uploads', express.static('uploads'));

// Health check endpoint
app.get('/health', (req: Request, res: Response) => {
  res.status(200).json({ 
    status: 'OK', 
    message: 'Server is healthy',
    timestamp: new Date().toISOString() 
  });
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã
app.use('/api/prices', pricesRouter);
app.use('/api/webhook', webhookRouter);

// –ú–∞—Ä—à—Ä—É—Ç—ã

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Mini App
 */
app.post('/api/auth/telegram', async (req, res) => {
  console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  console.log('üì® –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(req.body, null, 2));
  
  try {
    const { initData } = req.body;
    
    if (!initData) {
      console.log('‚ùå initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      return res.status(400).json({ error: 'initData –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    console.log('üìã initData –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞:', initData.length);
    console.log('üìã initData —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:', initData);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º initData —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    const BOT_TOKEN = process.env.BOT_TOKEN || 'test';
    console.log('ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º BOT_TOKEN:', BOT_TOKEN.substring(0, 10) + '...');
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (process.env.NODE_ENV !== 'production' && initData.includes('test_signature_for_development')) {
      console.log('üîß –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
    } else {
      try {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é initData...');
        validate(initData, BOT_TOKEN);
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è initData —É—Å–ø–µ—à–Ω–∞');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ initData:', error instanceof Error ? error.message : String(error));
        console.error('üìú –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
        return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
      }
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData
    console.log('üìä –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const parsed = parse(initData);
    console.log('üìä –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(parsed, null, 2));
    
    const user = parsed.user;
    
    if (!user) {
      console.log('‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ initData');
      return res.status(400).json({ error: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
    }

    const userId = user.id;
    console.log('üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    console.log('üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.first_name);
    console.log('üë§ –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.last_name);
    console.log('üë§ Username:', user.username);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...');
    let existingUser = await BalanceService.getUser(userId);
    
    if (!existingUser) {
      console.log('‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ...');
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
      existingUser = await BalanceService.createUser({
        id: userId,
        username: user.username || null,
        firstName: user.first_name || null,
        lastName: user.last_name || null,
        languageCode: user.language_code || 'ru'
      });
      
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', JSON.stringify(existingUser, null, 2));
    } else {
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î:', JSON.stringify(existingUser, null, 2));
    }

    console.log('üí∞ –ü–æ–ª—É—á–∞–µ–º –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å LeadTech –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const syncResult = await BalanceService.onAppLoad(userId);
    console.log('üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', syncResult);
    
    const balance = await BalanceService.getBalance(userId);
    console.log('üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', balance);
    
    const responseData = {
      success: true,
      user: {
        id: existingUser.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º database id, –∞ –Ω–µ telegram_id
        telegramId: userId, // –î–æ–±–∞–≤–ª—è–µ–º telegram_id –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
        username: user.username,
        firstName: user.first_name,
        lastName: user.last_name,
        languageCode: user.language_code
      },
      balance
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç:', JSON.stringify(responseData, null, 2));
    res.json(responseData);
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram:', error instanceof Error ? error.message : String(error));
    console.error('üìú –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error instanceof Error ? error.stack : 'Stack –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ
 */
app.get('/api/photos/restoration-cost', async (req, res) => {
  try {
    const cost = await PhotoRestorationService.getRestorationCost();
    res.json({
      success: true,
      cost: cost,
      currency: 'RUB'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ
 */
app.post('/api/photos/restore', upload.single('photo'), async (req: MulterRequest, res: Response) => {
  try {
    const { userId, telegramId, options } = req.body;
    
    console.log('üì∏ [RESTORE] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ');
    console.log('üì∏ [RESTORE] userId (database):', userId);
    console.log('üì∏ [RESTORE] telegramId:', telegramId);
    console.log('üì∏ [RESTORE] options:', options);
    console.log('üì∏ [RESTORE] file:', req.file ? req.file.filename : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    if (!userId) {
      return res.status(400).json({ error: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    if (!telegramId) {
      return res.status(400).json({ error: 'telegramId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º telegramId –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏
    const fs = require('fs');
    const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
    const userDir = `uploads/${telegramId}/${today}/`;
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(userDir)) {
      fs.mkdirSync(userDir, { recursive: true });
      console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userDir);
    }
    
    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
    const tempPath = req.file.path;
    const finalPath = `${userDir}${req.file.filename}`;
    fs.renameSync(tempPath, finalPath);
    console.log('üì∏ [RESTORE] –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω:', tempPath, '->', finalPath);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∏ –ø–æ–ª–Ω—ã–π URL –∫ —Ñ–∞–π–ª—É
    const imageLocalPath = `uploads/${telegramId}/${today}/${req.file.filename}`;
    const baseUrl = process.env.BASE_URL || 'http://localhost:3001/api';
    // –ï—Å–ª–∏ BASE_URL —Å–æ–¥–µ—Ä–∂–∏—Ç /api, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ /api/uploads, –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º /uploads
    let imageFullUrl;
    if (baseUrl.endsWith('/api')) {
      imageFullUrl = baseUrl.replace('/api', '') + `/api/uploads/${telegramId}/${today}/${req.file.filename}`;
    } else {
      imageFullUrl = `${baseUrl}/uploads/${telegramId}/${today}/${req.file.filename}`;
    }
    
    console.log('üì∏ [RESTORE] imageLocalPath:', imageLocalPath);
    console.log('üì∏ [RESTORE] imageFullUrl:', imageFullUrl);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏
    console.log('üì∏ [RESTORE] –í—ã–∑—ã–≤–∞–µ–º PhotoRestorationService...');
    const result = await PhotoRestorationService.restorePhoto({
      userId: parseInt(userId), // –ò—Å–ø–æ–ª—å–∑—É–µ–º database userId –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
      telegramId: parseInt(telegramId), // –î–æ–±–∞–≤–ª—è–µ–º telegramId –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫
      imageUrl: imageFullUrl, // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–π URL –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
      options: options ? JSON.parse(options) : {}
    });

    console.log('üì∏ [RESTORE] –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏:', result);
    res.json(result);
  } catch (error) {
    console.error('‚ùå [RESTORE] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ:', error);
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (req.file && req.file.path) {
      try {
        const fs = require('fs');
        if (fs.existsSync(req.file.path)) {
          fs.unlinkSync(req.file.path);
          console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', req.file.path);
        }
      } catch (unlinkError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', unlinkError);
      }
    }
    
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ
 */
app.get('/api/photos/:photoId/status', async (req, res) => {
  try {
    const { photoId } = req.params;
    const status = await PhotoRestorationService.getPhotoStatus(parseInt(photoId));
    res.json(status);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–æ—Ç–æ:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
app.get('/api/photos/history/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    const { page = 1, limit = 10 } = req.query;
    
    const history = await PhotoRestorationService.getUserPhotoHistory(
      parseInt(userId),
      parseInt(page as string),
      parseInt(limit as string)
    );
    
    res.json(history);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ñ–æ—Ç–æ:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π LeadTech
 */
app.get('/api/balance/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    console.log('üí∞ –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π LeadTech
    const balance = await BalanceService.getBalanceWithSync(parseInt(userId));
    console.log('üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', balance);
    
    res.json({ balance });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
app.post('/api/balance/top-up', async (req, res) => {
  try {
    const { userId, amount, description } = req.body;
    
    if (!userId || !amount) {
      return res.status(400).json({ error: 'userId –∏ amount –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    await BalanceService.credit(userId, amount, description || '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞');
    const newBalance = await BalanceService.getBalance(userId);
    
    res.json({ success: true, balance: newBalance });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å LeadTech contact ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
app.post('/api/balance/set-leadtech-id', async (req, res) => {
  try {
    const { telegramUserId, contactId } = req.body;
    
    if (!telegramUserId || !contactId) {
      return res.status(400).json({ error: 'telegramUserId –∏ contactId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    console.log('üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º LeadTech contact ID:', contactId, '–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramUserId);
    
    const success = await BalanceService.setLeadTechContactId(telegramUserId, contactId);
    
    if (success) {
      // –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ID —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å
      const syncResult = await BalanceService.syncWithLeadTech(telegramUserId);
      console.log('üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–∏—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', syncResult);
      
      res.json({ 
        success: true, 
        message: 'LeadTech ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        syncResult 
      });
    } else {
      res.status(400).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å LeadTech ID' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ LeadTech ID:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∏ —Å LeadTech –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
app.get('/api/balance/leadtech-info/:telegramUserId', async (req, res) => {
  try {
    const { telegramUserId } = req.params;
    
    const user = await BalanceService.getUser(parseInt(telegramUserId));
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({
      success: true,
      leadtech_contact_id: user.leadtech_contact_id,
      is_linked: !!user.leadtech_contact_id,
      user: {
        id: user.id,
        telegram_id: user.telegram_id,
        name: [user.first_name, user.last_name].filter(Boolean).join(' ') || null,
        username: user.username
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ LeadTech:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error: MulterError | Error, req: Request, res: Response, next: NextFunction) => {
  if (error instanceof MulterError) {
    if (error.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({ error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π' });
    }
  }
  
  console.error('–û—à–∏–±–∫–∞:', error);
  res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

app.listen(PORT, () => {
  console.log(`Server run on port: ${PORT}`);
  
  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É uploads, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const uploadDir = 'uploads/';
  const tempDir = 'uploads/temp/';
  
  if (!require('fs').existsSync(uploadDir)) {
    require('fs').mkdirSync(uploadDir, { recursive: true });
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ uploads/');
  }
  
  if (!require('fs').existsSync(tempDir)) {
    require('fs').mkdirSync(tempDir, { recursive: true });
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ uploads/temp/');
  }
});
