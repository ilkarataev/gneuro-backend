import express, { Request, Response, NextFunction } from 'express';
import cors from 'cors';
import multer, { MulterError } from 'multer';
import path from 'path';
import { validate, parse } from '@telegram-apps/init-data-node';
import { PhotoRestorationService } from './services/PhotoRestorationService';
import { PhotoStylizationService } from './services/PhotoStylizationService';
import { EraStyleService } from './services/EraStyleService';
import { PoetStyleService } from './services/PoetStyleService';
import { FileManagerService } from './services/FileManagerService';
import { ImageGenerationService } from './services/ImageGenerationService';
import { BalanceService } from './services/BalanceService';
import { TelegramBotService } from './services/TelegramBotService';
import { ImageCopyService } from './services/ImageCopyService';
import { UserAgreementService } from './services/UserAgreementService';
import { FileDeduplicationService } from './services/FileDeduplicationService';
import pricesRouter from './routes/prices';
import webhookRouter from './routes/webhook';
import adminRouter from './routes/admin';

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø Request –¥–ª—è multer
interface MulterRequest extends Request {
  file?: Express.Multer.File;
}

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É uploads
    const uploadDir = 'uploads/temp/';
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!require('fs').existsSync(uploadDir)) {
      require('fs').mkdirSync(uploadDir, { recursive: true });
      console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞:', uploadDir);
    }
    
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ 
  storage: storage,
  fileFilter: (req, file, cb) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (file.mimetype.startsWith('image/')) {
      // –ó–∞–ø—Ä–µ—â–∞–µ–º HEIC —Ñ–∞–π–ª—ã
      if (file.mimetype === 'image/heic' || file.mimetype === 'image/heif' || 
          file.originalname.toLowerCase().endsWith('.heic') || 
          file.originalname.toLowerCase().endsWith('.heif')) {
        const error = new Error('HEIC/HEIF —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPEG –∏–ª–∏ PNG') as any;
        error.name = 'HEIC_NOT_SUPPORTED';
        return cb(error, false);
      }
      cb(null, true);
    } else {
      cb(null, false); // –û—Ç–∫–ª–æ–Ω—è–µ–º —Ñ–∞–π–ª –±–µ–∑ –æ—à–∏–±–∫–∏
    }
  },
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB –º–∞–∫—Å–∏–º—É–º
  }
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã - –æ—Ç–¥–∞–µ–º —á–µ—Ä–µ–∑ /api/uploads/
app.use('/api/uploads', express.static('uploads'));

// Health check endpoint
app.get('/health', (req: Request, res: Response) => {
  res.status(200).json({ 
    status: 'OK', 
    message: 'Server is healthy',
    timestamp: new Date().toISOString() 
  });
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã
app.use('/api/prices', pricesRouter);
app.use('/api/webhook', webhookRouter);
app.use('/api/admin', adminRouter);

// –ú–∞—Ä—à—Ä—É—Ç—ã

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Mini App
 */
app.post('/api/auth/telegram', async (req, res) => {
  console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  console.log('üì® –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(req.body, null, 2));
  
  try {
    const { initData } = req.body;
    
    if (!initData) {
      console.log('‚ùå initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      return res.status(400).json({ error: 'initData –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    console.log('üìã initData –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞:', initData.length);
    console.log('üìã initData —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:', initData);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º initData —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    const BOT_TOKEN = process.env.BOT_TOKEN || 'test';
    console.log('ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º BOT_TOKEN:', BOT_TOKEN.substring(0, 10) + '...');
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (process.env.NODE_ENV !== 'production' && initData.includes('test_signature_for_development')) {
      console.log('üîß –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
    } else {
      try {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é initData...');
        validate(initData, BOT_TOKEN);
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è initData —É—Å–ø–µ—à–Ω–∞');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ initData:', error instanceof Error ? error.message : String(error));
        console.error('üìú –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
        return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
      }
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData
    console.log('üìä –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const parsed = parse(initData);
    console.log('üìä –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(parsed, null, 2));
    
    const user = parsed.user;
    
    if (!user) {
      console.log('‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ initData');
      return res.status(400).json({ error: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
    }

    const userId = user.id;
    console.log('üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    console.log('üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.first_name);
    console.log('üë§ –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.last_name);
    console.log('üë§ Username:', user.username);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...');
    let existingUser = await BalanceService.getUser(userId);
    
    if (!existingUser) {
      console.log('‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ...');
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
      existingUser = await BalanceService.createUser({
        id: userId,
        username: user.username || null,
        firstName: user.first_name || null,
        lastName: user.last_name || null,
        languageCode: user.language_code || 'ru'
      });
      
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', JSON.stringify(existingUser, null, 2));
    } else {
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î:', JSON.stringify(existingUser, null, 2));
    }

    console.log('üí∞ –ü–æ–ª—É—á–∞–µ–º –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å LeadTech –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const syncResult = await BalanceService.onAppLoad(userId);
    console.log('üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', syncResult);
    
    const balance = await BalanceService.getBalance(userId);
    console.log('üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', balance);
    
    const responseData = {
      success: true,
      user: {
        id: existingUser.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º database id, –∞ –Ω–µ telegram_id
        telegramId: userId, // –î–æ–±–∞–≤–ª—è–µ–º telegram_id –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
        username: user.username,
        firstName: user.first_name,
        lastName: user.last_name,
        languageCode: user.language_code,
        isAdmin: existingUser.is_admin || false
      },
      balance
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç:', JSON.stringify(responseData, null, 2));
    res.json(responseData);
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram:', error instanceof Error ? error.message : String(error));
    console.error('üìú –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error instanceof Error ? error.stack : 'Stack –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ
 */
app.get('/api/photos/restoration-cost', async (req, res) => {
  try {
    const cost = await PhotoRestorationService.getRestorationCost();
    res.json({
      success: true,
      cost: cost,
      currency: 'RUB'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ
 */
app.post('/api/photos/restore', upload.single('photo'), async (req: MulterRequest, res: Response) => {
  try {
    const { userId, telegramId, options, moduleName } = req.body;
    
    console.log('üì∏ [RESTORE] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ');
    console.log('üì∏ [RESTORE] userId (database):', userId);
    console.log('üì∏ [RESTORE] telegramId:', telegramId);
    console.log('üì∏ [RESTORE] moduleName:', moduleName, '–¢–∏–ø:', typeof moduleName);
    console.log('üì∏ [RESTORE] options:', options, '–¢–∏–ø:', typeof options);
    console.log('üì∏ [RESTORE] file:', req.file ? req.file.filename : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    if (!userId) {
      return res.status(400).json({ error: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    if (!telegramId) {
      return res.status(400).json({ error: 'telegramId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º telegramId –∏ moduleName –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏
    const fs = require('fs');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ moduleName —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π, –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç
    let module = moduleName;
    if (typeof moduleName !== 'string') {
      console.log('‚ö†Ô∏è [RESTORE] moduleName –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π:', moduleName, typeof moduleName);
      module = 'photo_restore'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    } else {
      module = moduleName;
    }
    console.log('üìÅ [RESTORE] –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å:', module);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
    const fileStats = require('fs').statSync(req.file.path);
    const dedupResult = await FileDeduplicationService.processFileUpload(
      req.file.path,
      parseInt(userId),
      parseInt(telegramId),
      module,
      {
        fileSize: fileStats.size,
        mimeType: req.file.mimetype
      }
    );
    
    const finalPath = dedupResult.finalPath;
    const filename = path.basename(finalPath);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∫ —Ñ–∞–π–ª—É —Å –ø–æ–º–æ—â—å—é FileManagerService
    const imageFullUrl = FileManagerService.createFileUrl(
      parseInt(telegramId),
      module,
      filename
    );
    
    console.log('üì∏ [RESTORE] –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π. –ù–æ–≤—ã–π —Ñ–∞–π–ª:', dedupResult.isNewFile);
    
    console.log('üì∏ [RESTORE] finalPath:', finalPath);
    console.log('üì∏ [RESTORE] imageFullUrl:', imageFullUrl);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏
    console.log('üì∏ [RESTORE] –í—ã–∑—ã–≤–∞–µ–º PhotoRestorationService...');
    const restoreResult = await PhotoRestorationService.restorePhoto({
      userId: parseInt(userId), // –ò—Å–ø–æ–ª—å–∑—É–µ–º database userId –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
      telegramId: parseInt(telegramId), // –î–æ–±–∞–≤–ª—è–µ–º telegramId –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫
      moduleName: module, // –î–æ–±–∞–≤–ª—è–µ–º moduleName –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–ø–æ–∫
      imageUrl: imageFullUrl, // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–π URL –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
      options: options ? JSON.parse(options) : {}
    });

    console.log('üì∏ [RESTORE] –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏:', restoreResult);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å
    if (restoreResult.success) {
      res.json(restoreResult);
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      let statusCode = 422;
      let errorMessage = restoreResult.error || '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ';
      
      if (restoreResult.error === 'SAFETY_AGREEMENT_REQUIRED') {
        statusCode = 403;
        errorMessage = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏';
      } else if (restoreResult.error === 'CONTENT_SAFETY_VIOLATION') {
        statusCode = 400;
        errorMessage = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.';
      } else if (restoreResult.error === 'COPYRIGHT_VIOLATION') {
        statusCode = 400;
        errorMessage = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑-–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.';
      }
      
      res.status(statusCode).json({ 
        error: errorMessage,
        success: false,
        errorCode: restoreResult.error
      });
    }
  } catch (error) {
    console.error('‚ùå [RESTORE] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ:', error);
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (req.file && req.file.path) {
      try {
        const fs = require('fs');
        if (fs.existsSync(req.file.path)) {
          fs.unlinkSync(req.file.path);
          console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', req.file.path);
        }
      } catch (unlinkError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', unlinkError);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    let statusCode = 500;
    let errorMessage = '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ';
    
    if ((error as Error).message === 'SAFETY_AGREEMENT_REQUIRED') {
      statusCode = 403;
      errorMessage = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏';
    } else if ((error as Error).message === 'CONTENT_SAFETY_VIOLATION') {
      statusCode = 400;
      errorMessage = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.';
    } else if ((error as Error).message === 'COPYRIGHT_VIOLATION') {
      statusCode = 400;
      errorMessage = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑-–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.';
    }
    
    res.status(statusCode).json({ 
      error: errorMessage,
      success: false,
      errorCode: (error as Error).message
    });
  }
});/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ
 */
app.get('/api/photos/:photoId/status', async (req, res) => {
  try {
    const { photoId } = req.params;
    const status = await PhotoRestorationService.getPhotoStatus(parseInt(photoId));
    res.json(status);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–æ—Ç–æ:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
app.get('/api/photos/history/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    const { page = 1, limit = 10 } = req.query;
    
    const history = await PhotoRestorationService.getUserPhotoHistory(
      parseInt(userId),
      parseInt(page as string),
      parseInt(limit as string)
    );
    
    res.json(history);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ñ–æ—Ç–æ:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * GET /api/photos/history/:userId/restore
 */
app.get('/api/photos/history/:userId/restore', async (req, res) => {
  try {
    const { userId } = req.params;
    const { page = 1, limit = 10 } = req.query;
    
    const history = await PhotoRestorationService.getUserPhotoHistoryByModule(
      parseInt(userId),
      'photo_restore',
      parseInt(page as string),
      parseInt(limit as string)
    );
    
    res.json(history);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–π:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * GET /api/photos/history/:userId/stylize
 */
app.get('/api/photos/history/:userId/stylize', async (req, res) => {
  try {
    const { userId } = req.params;
    const { page = 1, limit = 10 } = req.query;
    
    const history = await PhotoRestorationService.getUserPhotoHistoryByModule(
      parseInt(userId),
      'photo_stylize',
      parseInt(page as string),
      parseInt(limit as string)
    );
    
    res.json(history);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–π:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è —ç–ø–æ—Ö–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * GET /api/photos/history/:userId/era-style
 */
app.get('/api/photos/history/:userId/era-style', async (req, res) => {
  try {
    const { userId } = req.params;
    const { page = 1, limit = 10 } = req.query;
    
    const history = await PhotoRestorationService.getUserPhotoHistoryByModule(
      parseInt(userId),
      'era_style',
      parseInt(page as string),
      parseInt(limit as string)
    );
    
    res.json(history);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è —ç–ø–æ—Ö–∏:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * GET /api/photos/history/:userId/image-generation
 */
app.get('/api/photos/history/:userId/image-generation', async (req, res) => {
  try {
    const { userId } = req.params;
    const { page = 1, limit = 10 } = req.query;
    
    const history = await PhotoRestorationService.getUserPhotoHistoryByModule(
      parseInt(userId),
      'image_generate',
      parseInt(page as string),
      parseInt(limit as string)
    );
    
    res.json(history);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ
 */
app.get('/api/photos/stylization-cost', async (req, res) => {
  try {
    const cost = await PhotoStylizationService.getStylizationCost();
    res.json({
      success: true,
      cost: cost,
      currency: 'RUB'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
 */
app.get('/api/photos/styles', async (req, res) => {
  try {
    const styles = PhotoStylizationService.getAvailableStyles();
    res.json({
      success: true,
      styles
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∏–ª–µ–π:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ç–æ
 */
app.post('/api/photos/stylize', upload.single('photo'), async (req: MulterRequest, res: Response) => {
  try {
    const { userId, telegramId, prompt, styleId } = req.body;
    
    console.log('üé® [STYLIZE] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ');
    console.log('üé® [STYLIZE] userId (database):', userId);
    console.log('üé® [STYLIZE] telegramId:', telegramId);
    console.log('üé® [STYLIZE] styleId:', styleId);
    console.log('üé® [STYLIZE] prompt:', prompt);
    console.log('üé® [STYLIZE] prompt –¥–ª–∏–Ω–∞:', prompt?.length || 0);
    console.log('üé® [STYLIZE] file:', req.file ? req.file.filename : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω'
      });
    }

    if (!userId) {
      return res.status(400).json({
        success: false,
        error: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    if (!telegramId) {
      return res.status(400).json({
        success: false,
        error: 'telegramId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    // –î–ª—è era_style –ø—Ä–æ–º–ø—Ç –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω - –æ–Ω –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (!prompt && !styleId?.startsWith('era_style_')) {
      return res.status(400).json({
        success: false,
        error: 'prompt –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    if (!styleId) {
      return res.status(400).json({
        success: false,
        error: 'styleId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (—É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è multer, –Ω–æ –¥–æ–±–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É)
    if (req.file.size > 10 * 1024 * 1024) {
      return res.status(400).json({
        success: false,
        error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB'
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if (!req.file.mimetype.startsWith('image/')) {
      return res.status(400).json({
        success: false,
        error: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
      });
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HEIC —Ñ–∞–π–ª—ã
    if (req.file.mimetype === 'image/heic' || req.file.mimetype === 'image/heif' || 
        req.file.originalname.toLowerCase().endsWith('.heic') || 
        req.file.originalname.toLowerCase().endsWith('.heif')) {
      return res.status(400).json({
        success: false,
        error: 'HEIC/HEIF —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPEG –∏–ª–∏ PNG',
        code: 'HEIC_NOT_SUPPORTED'
      });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
    const moduleName = 'photo_stylize';
    const fileStats = require('fs').statSync(req.file.path);
    const dedupResult = await FileDeduplicationService.processFileUpload(
      req.file.path,
      parseInt(userId),
      parseInt(telegramId),
      moduleName,
      {
        fileSize: fileStats.size,
        mimeType: req.file.mimetype
      }
    );
    
    const finalPath = dedupResult.finalPath;
    const filename = path.basename(finalPath);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∫ —Ñ–∞–π–ª—É
    const imageFullUrl = FileManagerService.createFileUrl(
      parseInt(telegramId),
      moduleName,
      filename
    );
    
    console.log('üé® [STYLIZE] –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π. –ù–æ–≤—ã–π —Ñ–∞–π–ª:', dedupResult.isNewFile);
    
    console.log('üé® [STYLIZE] finalPath:', finalPath);
    console.log('üé® [STYLIZE] imageFullUrl:', imageFullUrl);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–º–ø—Ç: –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω custom prompt, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –±–µ—Ä–µ–º –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è
    let finalPrompt = prompt;
    if (!prompt || prompt.trim().length === 0) {
      console.log('üîç [STYLIZE] –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∏–ª—è:', styleId);
      finalPrompt = await PhotoStylizationService.getStylePrompt(styleId);
      console.log('üìù [STYLIZE] –ü—Ä–æ–º–ø—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', finalPrompt ? '–∑–∞–≥—Ä—É–∂–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
      if (!finalPrompt) {
        return res.status(400).json({
          success: false,
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∏–ª—å –∏–ª–∏ –ø—Ä–æ–º–ø—Ç'
        });
      }
    } else {
      console.log('üìù [STYLIZE] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç');
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
    console.log('üé® [STYLIZE] –í—ã–∑—ã–≤–∞–µ–º PhotoStylizationService...');
    console.log('üé® [STYLIZE] finalPrompt:', finalPrompt);
    const stylizeResult = await PhotoStylizationService.stylizePhoto({
      userId: parseInt(userId),
      telegramId: parseInt(telegramId),
      imageUrl: imageFullUrl, // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ request_data
      localPath: finalPath, // –ü–µ—Ä–µ–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
      styleId: styleId,
      prompt: finalPrompt,
      originalFilename: req.file.originalname
    });

    console.log('üé® [STYLIZE] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏:', stylizeResult);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å
    if (stylizeResult.success) {
      res.json(stylizeResult);
    } else {
      // –ü—Ä–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å 422 (Unprocessable Entity)
      res.status(422).json({ 
        error: stylizeResult.error || '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ',
        success: false
      });
    }
  } catch (error) {
    console.error('‚ùå [STYLIZE] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ:', error);
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (req.file && req.file.path) {
      try {
        const fs = require('fs');
        if (fs.existsSync(req.file.path)) {
          fs.unlinkSync(req.file.path);
          console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', req.file.path);
        }
      } catch (unlinkError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', unlinkError);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    let statusCode = 500;
    let errorMessage = '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ';
    
    if ((error as Error).message === 'SAFETY_AGREEMENT_REQUIRED') {
      statusCode = 403;
      errorMessage = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏';
    } else if ((error as Error).message === 'CONTENT_SAFETY_VIOLATION') {
      statusCode = 400;
      errorMessage = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.';
    } else if ((error as Error).message === 'COPYRIGHT_VIOLATION') {
      statusCode = 400;
      errorMessage = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑-–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.';
    }
    
    res.status(statusCode).json({
      success: false,
      error: errorMessage,
      errorCode: (error as Error).message
    });
  }
});

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Mini App
 */
app.post('/api/telegram/prepare-photo-message', async (req: Request, res: Response) => {
  const startTime = Date.now();
  
  try {
    const { imageUrl, caption, userId } = req.body;

    console.log('üì§ [PREPARE] –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    console.log('üì§ [PREPARE] imageUrl:', imageUrl);
    console.log('üì§ [PREPARE] caption:', caption);
    console.log('üì§ [PREPARE] userId:', userId);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!imageUrl) {
      return res.status(400).json({
        success: false,
        error: 'imageUrl –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
    if (!TelegramBotService.isValidImageUrl(imageUrl)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. URL –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS –ø—Ä–æ—Ç–æ–∫–æ–ª'
      });
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const preparedMessageId = await TelegramBotService.createPreparedPhotoMessage(
      imageUrl,
      caption || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏',
      userId
    );

    if (preparedMessageId) {
      const executionTime = Date.now() - startTime;
      console.log(`‚úÖ [PREPARE] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ${preparedMessageId} (–≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime}ms)`);
      
      res.json({
        success: true,
        preparedMessageId,
        message: '–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ'
      });
    } else {
      const executionTime = Date.now() - startTime;
      console.error(`‚ùå [PREPARE] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime}ms)`);
      
      res.status(500).json({
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
      });
    }

  } catch (error: any) {
    const executionTime = Date.now() - startTime;
    console.error(`‚ùå [PREPARE] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime}ms):`, error);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è';
    let statusCode = 500;
    
    if (error.code === 'ECONNABORTED') {
      errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
      statusCode = 504; // Gateway Timeout
    } else if (error.response?.status === 400) {
      errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è';
      statusCode = 400;
    } else if (error.response?.status === 401) {
      errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞';
      statusCode = 503; // Service Unavailable
    } else if (error.response?.status >= 500) {
      errorMessage = '–°–µ—Ä–≤–∏—Å Telegram –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
      statusCode = 503; // Service Unavailable
    }
    
    res.status(statusCode).json({
      success: false,
      error: errorMessage
    });
  }
});

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Telegram –±–æ—Ç–∞
 */
app.get('/api/telegram/bot-status', async (req: Request, res: Response) => {
  try {
    console.log('ü§ñ [BOT-STATUS] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞');

    const botInfo = await TelegramBotService.getBotInfo();

    if (botInfo) {
      res.json({
        success: true,
        botInfo,
        message: '–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ'
      });
    } else {
      res.status(503).json({
        success: false,
        error: '–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      });
    }

  } catch (error) {
    console.error('‚ùå [BOT-STATUS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞:', error);
    
    res.status(500).json({
      success: false,
      error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ—Ç–∞'
    });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ø–æ—Ö–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è
 */
app.get('/api/photos/eras', async (req, res) => {
  try {
    const eras = EraStyleService.getAvailableEras();
    res.json({
      success: true,
      eras
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–ø–æ—Ö:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è —ç–ø–æ—Ö–∏
 */
app.get('/api/photos/era-style-cost', async (req, res) => {
  try {
    const cost = await EraStyleService.getEraStyleCost();
    res.json({
      success: true,
      cost: cost,
      currency: 'RUB'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è —ç–ø–æ—Ö–∏:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è —ç–ø–æ—Ö–∏
 */
app.post('/api/photos/era-style', upload.single('photo'), async (req: MulterRequest, res: Response) => {
  try {
    const { userId, telegramId, prompt, eraId, operationType } = req.body;
    
    console.log('üèõÔ∏è [ERA_STYLE] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è —ç–ø–æ—Ö–∏');
    console.log('üèõÔ∏è [ERA_STYLE] userId (database):', userId);
    console.log('üèõÔ∏è [ERA_STYLE] telegramId:', telegramId);
    console.log('üèõÔ∏è [ERA_STYLE] eraId:', eraId);
    console.log('üèõÔ∏è [ERA_STYLE] operationType:', operationType);
    console.log('üèõÔ∏è [ERA_STYLE] prompt –¥–ª–∏–Ω–∞:', prompt?.length || 0);
    console.log('üèõÔ∏è [ERA_STYLE] file:', req.file ? req.file.filename : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω'
      });
    }

    if (!userId) {
      return res.status(400).json({
        success: false,
        error: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    if (!telegramId) {
      return res.status(400).json({
        success: false,
        error: 'telegramId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    if (!eraId) {
      return res.status(400).json({
        success: false,
        error: 'eraId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    if (operationType !== 'era_style') {
      return res.status(400).json({
        success: false,
        error: 'operationType –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å era_style'
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (—É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è multer, –Ω–æ –¥–æ–±–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É)
    if (req.file.size > 10 * 1024 * 1024) {
      return res.status(400).json({
        success: false,
        error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB'
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if (!req.file.mimetype.startsWith('image/')) {
      return res.status(400).json({
        success: false,
        error: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
      });
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HEIC —Ñ–∞–π–ª—ã
    if (req.file.mimetype === 'image/heic' || req.file.mimetype === 'image/heif' || 
        req.file.originalname.toLowerCase().endsWith('.heic') || 
        req.file.originalname.toLowerCase().endsWith('.heif')) {
      return res.status(400).json({
        success: false,
        error: 'HEIC/HEIF —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPEG –∏–ª–∏ PNG',
        code: 'HEIC_NOT_SUPPORTED'
      });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
    const moduleName = 'era-style';
    const fileStats = require('fs').statSync(req.file.path);
    const dedupResult = await FileDeduplicationService.processFileUpload(
      req.file.path,
      parseInt(userId),
      parseInt(telegramId),
      moduleName,
      {
        fileSize: fileStats.size,
        mimeType: req.file.mimetype
      }
    );
    
    const finalPath = dedupResult.finalPath;
    const filename = path.basename(finalPath);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∫ —Ñ–∞–π–ª—É
    const imageFullUrl = FileManagerService.createFileUrl(
      parseInt(telegramId),
      moduleName,
      filename
    );
    
    console.log('üèõÔ∏è [ERA_STYLE] –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π. –ù–æ–≤—ã–π —Ñ–∞–π–ª:', dedupResult.isNewFile);
    
    console.log('üèõÔ∏è [ERA_STYLE] finalPath:', finalPath);
    console.log('üèõÔ∏è [ERA_STYLE] imageFullUrl:', imageFullUrl);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–º–ø—Ç: –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω custom prompt, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –±–µ—Ä–µ–º –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —ç–ø–æ—Ö–∏
    let finalPrompt = prompt;
    if (!prompt || prompt.trim().length === 0) {
      console.log('üîç [ERA_STYLE] –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –ë–î –¥–ª—è —ç–ø–æ—Ö–∏:', eraId);
      finalPrompt = await EraStyleService.getEraPrompt(eraId);
      console.log('üìù [ERA_STYLE] –ü—Ä–æ–º–ø—Ç –∏–∑ –ë–î –ø–æ–ª—É—á–µ–Ω:', finalPrompt ? '—É—Å–ø–µ—à–Ω–æ' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
      if (!finalPrompt) {
        console.log('‚ùå [ERA_STYLE] –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç–ø–æ—Ö–∏:', eraId);
        return res.status(400).json({
          success: false,
          error: '–ù–µ–≤–µ—Ä–Ω–∞—è —ç–ø–æ—Ö–∞ –∏–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }
    } else {
      console.log('üìù [ERA_STYLE] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç');
    }

    console.log('üèõÔ∏è [ERA_STYLE] finalPrompt –¥–ª–∏–Ω–∞:', finalPrompt?.length);
    console.log('üèõÔ∏è [ERA_STYLE] finalPrompt —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:', finalPrompt?.substring(0, 200) + '...');

    const eraResult = await EraStyleService.stylePhotoByEra({
      userId: parseInt(userId),
      telegramId: parseInt(telegramId),
      imageUrl: imageFullUrl, // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ request_data
      eraId: eraId,
      prompt: finalPrompt,
      originalFilename: req.file.originalname
    });
    
    console.log('üèõÔ∏è [ERA_STYLE] –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è —ç–ø–æ—Ö–∏:', eraResult);
    res.json(eraResult);
  } catch (error) {
    console.error('‚ùå [ERA_STYLE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∏–ª—è —ç–ø–æ—Ö–∏:', error);
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (req.file && req.file.path) {
      try {
        const fs = require('fs');
        if (fs.existsSync(req.file.path)) {
          fs.unlinkSync(req.file.path);
          console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', req.file.path);
        }
      } catch (unlinkError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', unlinkError);
      }
    }
    
    res.status(500).json({
      success: false,
      error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
    });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—ç—Ç–æ–≤ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
 */
app.get('/api/photos/poets', async (req, res) => {
  try {
    const poets = await PoetStyleService.getAvailablePoets();
    res.json({
      success: true,
      poets
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—ç—Ç–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Å –ø–æ—ç—Ç–æ–º
 */
app.get('/api/photos/poet-style-cost', async (req, res) => {
  try {
    const cost = await PoetStyleService.getPoetStyleCost();
    res.json({
      success: true,
      cost: cost,
      currency: 'RUB'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Å –ø–æ—ç—Ç–æ–º:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ—ç—Ç–æ–º
 */
app.post('/api/photos/poet-style', upload.single('photo'), async (req: MulterRequest, res: Response) => {
  try {
    const { userId, telegramId, prompt, poetId } = req.body;
    
    console.log('üé≠ [POET_STYLE] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–ª—Ñ–∏ —Å –ø–æ—ç—Ç–æ–º');
    console.log('üé≠ [POET_STYLE] userId (database):', userId);
    console.log('üé≠ [POET_STYLE] telegramId:', telegramId);
    console.log('üé≠ [POET_STYLE] poetId:', poetId);
    console.log('üé≠ [POET_STYLE] prompt –¥–ª–∏–Ω–∞:', prompt?.length || 0);
    console.log('üé≠ [POET_STYLE] file:', req.file ? req.file.filename : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω'
      });
    }

    if (!userId) {
      return res.status(400).json({
        success: false,
        error: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    if (!telegramId) {
      return res.status(400).json({
        success: false,
        error: 'telegramId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    if (!poetId) {
      return res.status(400).json({
        success: false,
        error: 'poetId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if (req.file.size > 10 * 1024 * 1024) {
      return res.status(400).json({
        success: false,
        error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB'
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if (!req.file.mimetype.startsWith('image/')) {
      return res.status(400).json({
        success: false,
        error: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
      });
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HEIC —Ñ–∞–π–ª—ã
    if (req.file.mimetype === 'image/heic' || req.file.mimetype === 'image/heif' || 
        req.file.originalname.toLowerCase().endsWith('.heic') || 
        req.file.originalname.toLowerCase().endsWith('.heif')) {
      return res.status(400).json({
        success: false,
        error: 'HEIC/HEIF —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPEG –∏–ª–∏ PNG',
        code: 'HEIC_NOT_SUPPORTED'
      });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
    const moduleName = 'poet_style';
    const fileStats = require('fs').statSync(req.file.path);
    const dedupResult = await FileDeduplicationService.processFileUpload(
      req.file.path,
      parseInt(userId),
      parseInt(telegramId),
      moduleName,
      {
        fileSize: fileStats.size,
        mimeType: req.file.mimetype
      }
    );
    
    const finalPath = dedupResult.finalPath;
    const filename = path.basename(finalPath);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∫ —Ñ–∞–π–ª—É
    const imageFullUrl = FileManagerService.createFileUrl(
      parseInt(telegramId),
      moduleName,
      filename
    );
    
    console.log('üé≠ [POET_STYLE] –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π. –ù–æ–≤—ã–π —Ñ–∞–π–ª:', dedupResult.isNewFile);
    
    console.log('üé≠ [POET_STYLE] finalPath:', finalPath);
    console.log('üé≠ [POET_STYLE] imageFullUrl:', imageFullUrl);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–ª—Ñ–∏ —Å –ø–æ—ç—Ç–æ–º
    console.log('üé≠ [POET_STYLE] –í—ã–∑—ã–≤–∞–µ–º PoetStyleService...');
    const poetResult = await PoetStyleService.stylePhotoWithPoet({
      userId: parseInt(userId),
      telegramId: parseInt(telegramId),
      imageUrl: imageFullUrl,
      localPath: finalPath,
      poetId: parseInt(poetId),
      prompt: prompt || undefined,
      originalFilename: req.file.originalname
    });

    console.log('üé≠ [POET_STYLE] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–ª—Ñ–∏:', poetResult);
    res.json(poetResult);
  } catch (error) {
    console.error('‚ùå [POET_STYLE] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–ª—Ñ–∏ —Å –ø–æ—ç—Ç–æ–º:', error);
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (req.file && req.file.path) {
      try {
        const fs = require('fs');
        if (fs.existsSync(req.file.path)) {
          fs.unlinkSync(req.file.path);
          console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', req.file.path);
        }
      } catch (unlinkError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', unlinkError);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    let statusCode = 500;
    let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
    
    if ((error as Error).message === 'SAFETY_AGREEMENT_REQUIRED') {
      statusCode = 403;
      errorMessage = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏';
    } else if ((error as Error).message === 'CONTENT_SAFETY_VIOLATION') {
      statusCode = 400;
      errorMessage = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.';
    } else if ((error as Error).message === 'COPYRIGHT_VIOLATION') {
      statusCode = 400;
      errorMessage = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑-–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.';
    }
    
    res.status(statusCode).json({
      success: false,
      error: errorMessage,
      errorCode: (error as Error).message
    });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–π —Å –ø–æ—ç—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * GET /api/photos/history/:userId/poet-style
 */
app.get('/api/photos/history/:userId/poet-style', async (req, res) => {
  try {
    const { userId } = req.params;
    const { page = 1, limit = 10 } = req.query;
    
    const history = await PhotoRestorationService.getUserPhotoHistoryByModule(
      parseInt(userId),
      'poet_style',
      parseInt(page as string),
      parseInt(limit as string)
    );
    
    res.json(history);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–π —Å –ø–æ—ç—Ç–∞–º–∏:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ–º–ø—Ç—É
 */
app.post('/api/images/generate', async (req, res) => {
  try {
    const { userId, telegramId, prompt, options } = req.body;
    
    console.log('üé® [IMAGE_GEN] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    console.log('üé® [IMAGE_GEN] userId (database):', userId);
    console.log('üé® [IMAGE_GEN] telegramId:', telegramId);
    console.log('üé® [IMAGE_GEN] prompt:', prompt?.substring(0, 100) + '...');
    console.log('üé® [IMAGE_GEN] options:', options);
    
    if (!userId) {
      return res.status(400).json({ error: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    if (!telegramId) {
      return res.status(400).json({ error: 'telegramId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    if (!prompt || prompt.trim().length === 0) {
      return res.status(400).json({ error: 'prompt –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    console.log('üé® [IMAGE_GEN] –í—ã–∑—ã–≤–∞–µ–º ImageGenerationService...');
    const result = await ImageGenerationService.generateImage({
      userId: parseInt(userId),
      telegramId: parseInt(telegramId),
      prompt: prompt.trim(),
      options: options || {}
    });

    console.log('üé® [IMAGE_GEN] –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', result);
    res.json(result);
  } catch (error) {
    console.error('‚ùå [IMAGE_GEN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
app.get('/api/images/generation-cost', async (req, res) => {
  try {
    const cost = await ImageGenerationService.getGenerationCost();
    res.json({ cost });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π LeadTech
 */
app.get('/api/balance/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    console.log('üí∞ –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π LeadTech
    const balance = await BalanceService.getBalanceWithSync(parseInt(userId));
    console.log('üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', balance);
    
    res.json({ balance });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
app.post('/api/balance/top-up', async (req, res) => {
  try {
    const { userId, amount, description } = req.body;
    
    if (!userId || !amount) {
      return res.status(400).json({ error: 'userId –∏ amount –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    await BalanceService.credit(userId, amount, description || '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞');
    const newBalance = await BalanceService.getBalance(userId);
    
    res.json({ success: true, balance: newBalance });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å LeadTech contact ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
app.post('/api/balance/set-leadtech-id', async (req, res) => {
  try {
    const { telegramUserId, contactId } = req.body;
    
    if (!telegramUserId || !contactId) {
      return res.status(400).json({ error: 'telegramUserId –∏ contactId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    console.log('üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º LeadTech contact ID:', contactId, '–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramUserId);
    
    const success = await BalanceService.setLeadTechContactId(telegramUserId, contactId);
    
    if (success) {
      // –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ID —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å
      const syncResult = await BalanceService.syncWithLeadTech(telegramUserId);
      console.log('üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–∏—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', syncResult);
      
      res.json({ 
        success: true, 
        message: 'LeadTech ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        syncResult 
      });
    } else {
      res.status(400).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å LeadTech ID' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ LeadTech ID:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∏ —Å LeadTech –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
app.get('/api/balance/leadtech-info/:telegramUserId', async (req, res) => {
  try {
    const { telegramUserId } = req.params;
    
    const user = await BalanceService.getUser(parseInt(telegramUserId));
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({
      success: true,
      leadtech_contact_id: user.leadtech_contact_id,
      is_linked: !!user.leadtech_contact_id,
      user: {
        id: user.id,
        telegram_id: user.telegram_id,
        name: [user.first_name, user.last_name].filter(Boolean).join(' ') || null,
        username: user.username
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ LeadTech:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * Text-to-Image –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
 */
app.post('/api/photos/generate', upload.none(), async (req, res) => {
  try {
    const { prompt, userId, telegramId, moduleName } = req.body;
    
    console.log('üé® [PHOTOS/GENERATE] –ù–∞—á–∏–Ω–∞–µ–º process text2img –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    console.log('üé® [PHOTOS/GENERATE] userId (database):', userId);
    console.log('üé® [PHOTOS/GENERATE] telegramId:', telegramId);
    console.log('üé® [PHOTOS/GENERATE] moduleName:', moduleName);
    console.log('üé® [PHOTOS/GENERATE] prompt:', prompt?.substring(0, 100) + '...');
    
    if (!userId || isNaN(parseInt(userId))) {
      return res.status(400).json({ 
        success: false,
        error: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º',
        message: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
      });
    }

    if (!telegramId || isNaN(parseInt(telegramId))) {
      return res.status(400).json({ 
        success: false,
        error: 'telegramId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º',
        message: 'telegramId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
      });
    }

    if (!prompt || prompt.trim().length === 0) {
      return res.status(400).json({ 
        success: false,
        error: 'prompt –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        message: 'prompt –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    console.log('üé® [PHOTOS/GENERATE] –í—ã–∑—ã–≤–∞–µ–º ImageGenerationService...');
    const result = await ImageGenerationService.generateImage({
      userId: parseInt(userId),
      telegramId: parseInt(telegramId),
      prompt: prompt.trim(),
      moduleName: moduleName || 'image_generation',
      options: {}
    });

    console.log('üé® [PHOTOS/GENERATE] –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', result);
    res.json(result);
  } catch (error) {
    console.error('‚ùå [PHOTOS/GENERATE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    res.status(500).json({ 
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * Image-to-Image –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
 */
app.post('/api/photos/generate-img2img', upload.array('referenceImages', 8), async (req: Request, res: Response) => {
  try {
    const { prompt, userId, telegramId, moduleName } = req.body;
    const referenceImages = req.files as Express.Multer.File[];
    
    console.log('üé® [PHOTOS/GENERATE-IMG2IMG] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å img2img –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    console.log('üé® [PHOTOS/GENERATE-IMG2IMG] userId (database):', userId, '–¢–∏–ø:', typeof userId);
    console.log('üé® [PHOTOS/GENERATE-IMG2IMG] telegramId:', telegramId, '–¢–∏–ø:', typeof telegramId);
    console.log('üé® [PHOTOS/GENERATE-IMG2IMG] moduleName:', moduleName);
    console.log('üé® [PHOTOS/GENERATE-IMG2IMG] prompt:', prompt?.substring(0, 100) + '...');
    console.log('üé® [PHOTOS/GENERATE-IMG2IMG] referenceImages count:', referenceImages?.length || 0);
    
    if (!userId || isNaN(parseInt(userId))) {
      console.error('‚ùå [PHOTOS/GENERATE-IMG2IMG] –ù–µ–≤–µ—Ä–Ω—ã–π userId:', userId);
      return res.status(400).json({ 
        success: false,
        error: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º',
        message: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
      });
    }

    if (!telegramId || isNaN(parseInt(telegramId))) {
      console.error('‚ùå [PHOTOS/GENERATE-IMG2IMG] –ù–µ–≤–µ—Ä–Ω—ã–π telegramId:', telegramId);
      return res.status(400).json({ 
        success: false,
        error: 'telegramId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º',
        message: 'telegramId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
      });
    }

    if (!prompt || prompt.trim().length === 0) {
      return res.status(400).json({ 
        success: false,
        error: 'prompt –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        message: 'prompt –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    if (!referenceImages || referenceImages.length === 0) {
      return res.status(400).json({ 
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
      });
    }

    if (referenceImages.length > 8) {
      return res.status(400).json({ 
        success: false,
        error: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - 8',
        message: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - 8'
      });
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞–º–∏
    console.log('üé® [PHOTOS/GENERATE-IMG2IMG] –í—ã–∑—ã–≤–∞–µ–º ImageGenerationService...');
    const result = await ImageGenerationService.generateImageWithReference({
      userId: parseInt(userId),
      telegramId: parseInt(telegramId),
      prompt: prompt.trim(),
      referenceImages: referenceImages,
      moduleName: moduleName || 'image_generation_img2img',
      options: {}
    });

    console.log('üé® [PHOTOS/GENERATE-IMG2IMG] –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', result);
    
    // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    try {
      const fs = require('fs');
      for (const file of referenceImages) {
        if (fs.existsSync(file.path)) {
          fs.unlinkSync(file.path);
          console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', file.path);
        }
      }
    } catch (cleanupError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', cleanupError);
    }
    
    res.json(result);
  } catch (error) {
    console.error('‚ùå [PHOTOS/GENERATE-IMG2IMG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    
    // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    const referenceImages = req.files as Express.Multer.File[];
    if (referenceImages && referenceImages.length > 0) {
      try {
        const fs = require('fs');
        for (const file of referenceImages) {
          if (fs.existsSync(file.path)) {
            fs.unlinkSync(file.path);
            console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ:', file.path);
          }
        }
      } catch (cleanupError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', cleanupError);
      }
    }
    
    res.status(500).json({ 
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error: MulterError | Error, req: Request, res: Response, next: NextFunction) => {
  if (error instanceof MulterError) {
    if (error.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({ error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π' });
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ HEIC
  if (error.name === 'HEIC_NOT_SUPPORTED') {
    return res.status(400).json({ 
      error: 'HEIC/HEIF —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPEG –∏–ª–∏ PNG',
      code: 'HEIC_NOT_SUPPORTED'
    });
  }
  
  console.error('–û—à–∏–±–∫–∞:', error);
  res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */
app.get('/api/safety-rules', async (req, res) => {
  try {
    const safetyRules = UserAgreementService.getSafetyRules();
    res.json({
      success: true,
      data: safetyRules
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */
app.get('/api/safety-agreement/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    
    if (!userId || isNaN(parseInt(userId))) {
      return res.status(400).json({ 
        success: false,
        error: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
      });
    }

    const hasAgreed = await UserAgreementService.hasUserAgreedToSafetyRules(parseInt(userId));
    
    res.json({
      success: true,
      hasAgreed,
      safetyRules: hasAgreed ? null : UserAgreementService.getSafetyRules()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–≥–ª–∞—Å–∏—è:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */
app.post('/api/safety-agreement', async (req, res) => {
  try {
    const { userId, ipAddress, userAgent } = req.body;
    
    if (!userId || isNaN(parseInt(userId))) {
      return res.status(400).json({ 
        success: false,
        error: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
      });
    }

    const success = await UserAgreementService.recordSafetyRulesAgreement(
      parseInt(userId),
      ipAddress,
      userAgent
    );

    if (success) {
      res.json({
        success: true,
        message: '–°–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∞–Ω–æ'
      });
    } else {
      res.status(500).json({
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ'
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å–æ–≥–ª–∞—Å–∏—è:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.listen(PORT, async () => {
  console.log(`Server run on port: ${PORT}`);
  
  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É uploads, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const uploadDir = 'uploads/';
  const tempDir = 'uploads/temp/';
  
  if (!require('fs').existsSync(uploadDir)) {
    require('fs').mkdirSync(uploadDir, { recursive: true });
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ uploads/');
  }
  
  if (!require('fs').existsSync(tempDir)) {
    require('fs').mkdirSync(tempDir, { recursive: true });
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ uploads/temp/');
  }

  // –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏ images –≤ uploads
  try {
    await ImageCopyService.copyImagesOnStartup();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
  }
});
